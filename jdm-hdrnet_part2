{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 38213,
     "status": "ok",
     "timestamp": 1729130695823,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "-PNw0-BM6AsG",
    "outputId": "3badda66-61e9-4417-b44b-4cbf759c9dd8"
   },
   "outputs": [],
   "source": [
    "# !pip install torch\n",
    "# !pip install torchvision\n",
    "# !pip install tensorboard\n",
    "# !pip install numpy\n",
    "# !pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 10891,
     "status": "ok",
     "timestamp": 1729130706701,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "xr1hhZRsMtyw",
    "outputId": "04edeb7b-5e88-4a67-f4f2-249077dd015c"
   },
   "outputs": [],
   "source": [
    "# !pip install imagecodecs\n",
    "# !pip install einops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install opencv-python\n",
    "# !pip install scikit-image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# conda environments:\n",
      "#\n",
      "                         /home/ipr/Desktop/Vijay-IPR/harshit21/test-env\n",
      "base                     /home/ipr/anaconda3\n",
      "adityak21                /home/ipr/anaconda3/envs/adityak21\n",
      "bakishor21               /home/ipr/anaconda3/envs/bakishor21\n",
      "jhalak21                 /home/ipr/anaconda3/envs/jhalak21\n",
      "my                       /home/ipr/anaconda3/envs/my\n",
      "myenv                    /home/ipr/anaconda3/envs/myenv\n",
      "nirmalj21                /home/ipr/anaconda3/envs/nirmalj21\n",
      "rohanpv21             *  /home/ipr/anaconda3/envs/rohanpv21\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!conda info --envs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wed Nov  6 21:36:31 2024       \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 555.42.06              Driver Version: 555.42.06      CUDA Version: 12.5     |\n",
      "|-----------------------------------------+------------------------+----------------------+\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n",
      "|                                         |                        |               MIG M. |\n",
      "|=========================================+========================+======================|\n",
      "|   0  NVIDIA GeForce RTX 3060        Off |   00000000:01:00.0 Off |                  N/A |\n",
      "|  0%   44C    P8              7W /  170W |    1247MiB /  12288MiB |      0%      Default |\n",
      "|                                         |                        |                  N/A |\n",
      "+-----------------------------------------+------------------------+----------------------+\n",
      "                                                                                         \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| Processes:                                                                              |\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n",
      "|        ID   ID                                                               Usage      |\n",
      "|=========================================================================================|\n",
      "|    0   N/A  N/A      1945      G   /usr/lib/xorg/Xorg                             36MiB |\n",
      "|    0   N/A  N/A      2084    C+G   ...libexec/gnome-remote-desktop-daemon        104MiB |\n",
      "|    0   N/A  N/A    212809      G   /usr/lib/xorg/Xorg                             71MiB |\n",
      "|    0   N/A  N/A    251576      G   /usr/libexec/gnome-shell-portal-helper          2MiB |\n",
      "|    0   N/A  N/A    383240      G   gnome-control-center                            2MiB |\n",
      "|    0   N/A  N/A    384142      G   /usr/lib/xorg/Xorg                            155MiB |\n",
      "|    0   N/A  N/A    384354      G   /usr/bin/gnome-shell                           59MiB |\n",
      "|    0   N/A  N/A    384693      G   ...3/usr/bin/snapd-desktop-integration          6MiB |\n",
      "|    0   N/A  N/A    509097      G   ...irefox/4848/usr/lib/firefox/firefox         14MiB |\n",
      "|    0   N/A  N/A    899796      G   /usr/libexec/gnome-shell-portal-helper          2MiB |\n",
      "|    0   N/A  N/A   1161048      C   python3                                       102MiB |\n",
      "|    0   N/A  N/A   1197142      C   python3                                       102MiB |\n",
      "|    0   N/A  N/A   1270277      C   python3                                       102MiB |\n",
      "|    0   N/A  N/A   1270827      C   python3                                       102MiB |\n",
      "+-----------------------------------------------------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DAYrHk7t9dTI"
   },
   "source": [
    "# HDRNet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cQTTJkop9T_D"
   },
   "source": [
    "## Utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "executionInfo": {
     "elapsed": 2430,
     "status": "ok",
     "timestamp": 1729141900567,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "uWqW_Ks09TPx"
   },
   "outputs": [],
   "source": [
    "import json\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "import re\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import cv2\n",
    "from skimage.metrics import structural_similarity as ssim\n",
    "\n",
    "\n",
    "\n",
    "def psnr(pred, target):\n",
    "    return 10 * torch.log10(1 / F.mse_loss(pred, target))\n",
    "\n",
    "def calculate_ssim(image1, image2):\n",
    "    # Convert to grayscale if the images are colored\n",
    "    if len(image1.shape) == 3:\n",
    "        image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)\n",
    "    if len(image2.shape) == 3:\n",
    "        image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "    ssim_value, _ = ssim(image1, image2, full=True)\n",
    "    return ssim_value\n",
    "\n",
    "\n",
    "def print_params(params):\n",
    "    print('Training parameters: ')\n",
    "    print('\\n'.join('  {} = {}'.format(k, str(v)) for k, v in params.items()))\n",
    "    print()\n",
    "\n",
    "def get_files(path):\n",
    "    files = os.listdir(path)\n",
    "    files = [os.path.join(path, x) for x in files]\n",
    "    files.sort()\n",
    "    return files\n",
    "\n",
    "def load_train_ckpt(model, ckpt_dir):\n",
    "    # Get latest\n",
    "    files = os.listdir(ckpt_dir)\n",
    "    if not files:\n",
    "        return\n",
    "    files = [os.path.join(ckpt_dir, x) for x in files]\n",
    "    files.sort(key=lambda f: int(re.sub('\\D', '', f)))\n",
    "    ckpt_path = files[-1]\n",
    "    prev_epochs = -1\n",
    "    prev_epochs = int(ckpt_path.split('_')[1])\n",
    "    print(\"epochs \", prev_epochs)\n",
    "    # Load ckpt\n",
    "    print('Loading:', ckpt_path)\n",
    "    state_dict = torch.load(ckpt_path)\n",
    "    state_dict.pop('params')\n",
    "    model.load_state_dict(state_dict)\n",
    "    return prev_epochs\n",
    "\n",
    "def load_test_ckpt(ckpt_path):\n",
    "    state_dict = torch.load(ckpt_path)\n",
    "    params = state_dict['params']\n",
    "    state_dict.pop('params')\n",
    "    return state_dict, params\n",
    "\n",
    "def save_model_stats(model, params, ckpt_fname, stats):\n",
    "    ckpt_path = os.path.join(params['ckpt_dir'], ckpt_fname)\n",
    "    state_dict = model.state_dict()\n",
    "    state_dict['params'] = params\n",
    "    torch.save(state_dict, ckpt_path)\n",
    "    # Save stats\n",
    "    stats_path = os.path.join(params['stats_dir'], 'stats.json')\n",
    "    with open(stats_path, 'w') as fp:\n",
    "        json.dump(stats, fp, indent=2)\n",
    "\n",
    "\n",
    "class AvgMeter(object):\n",
    "    \"\"\"Acumulate and compute average.\"\"\"\n",
    "\n",
    "    def __init__(self):\n",
    "        self.reset()\n",
    "\n",
    "    def reset(self):\n",
    "        self.val = 0\n",
    "        self.avg = 0.\n",
    "        self.sum = 0\n",
    "        self.count = 0\n",
    "\n",
    "    def update(self, val, n=1):\n",
    "        self.val = val\n",
    "        self.sum += val * n\n",
    "        self.count += n\n",
    "        self.avg = self.sum / self.count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U_mLJiG6-rbY"
   },
   "source": [
    "## Layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "executionInfo": {
     "elapsed": 1348,
     "status": "ok",
     "timestamp": 1729141901905,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "wnABdzEk-rEc"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torchvision.utils import save_image\n",
    "\n",
    "def conv_layer(in_channels, out_channels, kernel_size, stride=1, padding=0, bias=True, activation=nn.ReLU, batch_norm=False):\n",
    "    layers = [nn.Conv2d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)]\n",
    "    if batch_norm:\n",
    "        layers.append(nn.BatchNorm2d(out_channels))\n",
    "    if activation:\n",
    "        layers.append(activation())\n",
    "    return nn.Sequential(*layers)\n",
    "\n",
    "def fc_layer(in_channels, out_channels, bias=True, activation=nn.ReLU, batch_norm=False):\n",
    "    layers = [nn.Linear(int(in_channels), int(out_channels), bias=bias)]\n",
    "    if batch_norm:\n",
    "        layers.append(nn.BatchNorm1d(out_channels))\n",
    "    if activation:\n",
    "        layers.append(activation())\n",
    "    return nn.Sequential(*layers)\n",
    "\n",
    "def slicing(grid, guide):#grid N, C=12, D=8, H=16, W=16  # guide N, C=1, H, W\n",
    "    N, C, H, W = guide.shape\n",
    "    device = grid.get_device()\n",
    "    if device >= 0:\n",
    "        hh, ww = torch.meshgrid(torch.arange(H, device=device), torch.arange(W, device=device)) # H, W\n",
    "    else:\n",
    "        hh, ww = torch.meshgrid(torch.arange(H), torch.arange(W)) # H, W\n",
    "    # To [-1, 1] range for grid_sample\n",
    "    hh = hh / (H - 1) * 2 - 1\n",
    "    ww = ww / (W - 1) * 2 - 1\n",
    "    guide = guide * 2 - 1\n",
    "    hh = hh[None, :, :, None].repeat(N, 1, 1, 1) # N, H, W, C=1\n",
    "    ww = ww[None, :, :, None].repeat(N, 1, 1, 1)  # N, H, W, C=1\n",
    "    guide = guide.permute(0, 2, 3, 1) # N, H, W, C=1\n",
    "\n",
    "    guide_coords = torch.cat([ww, hh, guide], dim=3) # N, H, W, 3    guide-> D channel\n",
    "    # unsqueeze because extra D dimension\n",
    "    guide_coords = guide_coords.unsqueeze(1) # N, Dout=1, H, W, 3 # H W->final size\n",
    "    sliced = F.grid_sample(grid, guide_coords, align_corners=False, padding_mode=\"border\") # N, C=12, Dout=1, H, W\n",
    "    sliced = sliced.squeeze(2) # N, C=12, H, W\n",
    "\n",
    "    return sliced\n",
    "\n",
    "def apply(sliced, fullres):\n",
    "    # r' = w1*r + w2*g + w3*b + w4\n",
    "    rr = fullres * sliced[:, 0:3, :, :] # N, C=3, H, W\n",
    "    gg = fullres * sliced[:, 4:7, :, :] # N, C=3, H, W\n",
    "    bb = fullres * sliced[:, 8:11, :, :] # N, C=3, H, W\n",
    "    rr = torch.sum(rr, dim=1) + sliced[:, 3, :, :] # N, H, W\n",
    "    gg = torch.sum(gg, dim=1) + sliced[:, 7, :, :] # N, H, W\n",
    "    bb = torch.sum(bb, dim=1) + sliced[:, 11, :, :] # N, H, W\n",
    "    output = torch.stack([rr, gg, bb], dim=1) # N, C=3, H, W\n",
    "    return output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-OcQ7PLT-1OZ"
   },
   "source": [
    "## Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "executionInfo": {
     "elapsed": 17,
     "status": "ok",
     "timestamp": 1729141901906,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "-55MTTwx-3Ds"
   },
   "outputs": [],
   "source": [
    "import torch.nn.functional as F\n",
    "from PIL import Image\n",
    "from torchvision.transforms.functional import resize\n",
    "from einops import rearrange\n",
    "\n",
    "class SPSA_Attention(nn.Module):\n",
    "    def __init__(self, dim, num_heads,is_material_mask, is_spec, bias):\n",
    "        super(SPSA_Attention, self).__init__()\n",
    "        self.num_heads = num_heads\n",
    "        self.is_material_mask = is_material_mask\n",
    "        self.is_spec = is_spec\n",
    "        self.temperature = nn.Parameter(torch.ones(num_heads, 1, 1))\n",
    "\n",
    "        self.qkv = nn.Conv2d(dim, dim*3, kernel_size=1, bias=bias)\n",
    "        self.qkv_dwconv = nn.Conv2d(dim*3, dim*3, kernel_size=3, stride=1, padding=1, groups=dim*3, bias=bias)\n",
    "        if self.is_spec:\n",
    "            self.project_out1_x = nn.Conv2d(dim//2, dim//2,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "            self.project_out1_spec = nn.Conv2d(dim//2, dim//2,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "            self.project_out2_x = nn.Conv2d(dim, dim//2,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "            self.project_out2_spec = nn.Conv2d(dim, dim//2,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "        else:\n",
    "            self.project_out1 = nn.Conv2d(dim, dim,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "            self.project_out2 = nn.Conv2d(dim, dim,  kernel_size=3, stride=1, padding=1, bias=bias)\n",
    "\n",
    "        # ===========================mask condition===========================\n",
    "        self.ResBlock_SFTk = ResBlock_SFT(input_channel = dim,input_mask_dim=1)\n",
    "        self.ResBlock_SFTq = ResBlock_SFT(input_channel = dim,input_mask_dim=1)\n",
    "        self.out_sft1 = ResBlock_SFT(input_channel = dim,input_mask_dim=1)\n",
    "        self.out_sft2 = ResBlock_SFT(input_channel = dim,input_mask_dim=1)\n",
    "        self.out_sft3 = ResBlock_SFT(input_channel = dim//2,input_mask_dim=1)\n",
    "        self.out_sft4 = ResBlock_SFT(input_channel = dim//2,input_mask_dim=1)\n",
    "\n",
    "    def forward(self, x_in,spec, material_mask):\n",
    "        x = torch.cat([spec,x_in],dim=1)\n",
    "        b,c,h,w = x.shape\n",
    "\n",
    "        qkv = self.qkv_dwconv(self.qkv(x))\n",
    "        q,k,v = qkv.chunk(3, dim=1)\n",
    "\n",
    "        #material semantic prior\n",
    "        if self.is_material_mask:\n",
    "            q = self.ResBlock_SFTk(q,material_mask)\n",
    "            k = self.ResBlock_SFTq(k,material_mask)\n",
    "\n",
    "        q = rearrange(q, 'b (head c) h w -> b head c (h w)', head=self.num_heads)\n",
    "        k = rearrange(k, 'b (head c) h w -> b head c (h w)', head=self.num_heads)\n",
    "        v = rearrange(v, 'b (head c) h w -> b head c (h w)', head=self.num_heads)\n",
    "\n",
    "        q = torch.nn.functional.normalize(q, dim=-1)\n",
    "        k = torch.nn.functional.normalize(k, dim=-1)\n",
    "\n",
    "        attn = (q @ k.transpose(-2, -1)) * self.temperature\n",
    "        attn = attn.softmax(dim=-1)\n",
    "\n",
    "        out = (attn @ v)\n",
    "        out = rearrange(out, 'b head c (h w) -> b (head c) h w', head=self.num_heads, h=h, w=w)\n",
    "\n",
    "        x_out = self.project_out2_x(out) + self.project_out1_x(x_in)\n",
    "        spec_out = self.project_out2_spec(out) + self.project_out1_spec(spec)\n",
    "        return x_out,spec_out\n",
    "\n",
    "class SFTLayer(nn.Module):\n",
    "    def __init__(self,dim,input_mask_dim):\n",
    "        super(SFTLayer, self).__init__()\n",
    "        self.SFT_scale_conv0 = nn.Conv2d(input_mask_dim, dim//2, kernel_size=1, stride=1, padding=0, bias=True) #nn.Conv2d(32, 32, 1)\n",
    "        self.SFT_scale_conv1 = nn.Conv2d(dim//2, dim, kernel_size=1, stride=1, padding=0, bias=True)\n",
    "        self.SFT_shift_conv0 = nn.Conv2d(input_mask_dim, dim//2, kernel_size=1, stride=1, padding=0, bias=True)\n",
    "        self.SFT_shift_conv1 = nn.Conv2d(dim//2, dim, kernel_size=1, stride=1, padding=0, bias=True)\n",
    "\n",
    "    def forward(self, x,seg):\n",
    "        bt, c, h, w = x.shape\n",
    "        seg = resize(seg, (h, w), Image.BILINEAR)\n",
    "        scale = self.SFT_scale_conv1(F.gelu(self.SFT_scale_conv0(seg)))\n",
    "        shift = self.SFT_shift_conv1(F.gelu(self.SFT_shift_conv0(seg)))\n",
    "        return x * (scale + 1) + shift\n",
    "class ResBlock_SFT(nn.Module):\n",
    "    def __init__(self,input_channel,input_mask_dim):\n",
    "        super(ResBlock_SFT, self).__init__()\n",
    "        self.sft0 = SFTLayer(dim = input_channel,input_mask_dim = input_mask_dim)\n",
    "        self.conv0 = nn.Conv2d(input_channel, input_channel, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.sft1 = SFTLayer(dim = input_channel,input_mask_dim = input_mask_dim)\n",
    "        self.conv1 = nn.Conv2d(input_channel, input_channel, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "\n",
    "    def forward(self, x,seg):\n",
    "        # x[0]: fea; x[1]: cond\n",
    "        fea = self.sft0(x,seg)\n",
    "        fea = F.gelu(self.conv0(fea))\n",
    "        fea = self.sft1(fea, seg)\n",
    "        fea = self.conv1(fea)\n",
    "        return x + fea\n",
    "\n",
    "\n",
    "class SegExtract(nn.Module):\n",
    "    def __init__(self, params, c_in=1):\n",
    "        super(SegExtract, self).__init__()\n",
    "        self.params = params\n",
    "        self.relu = nn.ReLU()\n",
    "\n",
    "        self.splat1 = nn.Conv2d(c_in, 8, kernel_size=3, stride=1, padding=1, bias=True)#conv_layer(c_in, 8, kernel_size=3, stride=1, padding=1, batch_norm=False)\n",
    "        self.maxpool1 = nn.MaxPool2d(kernel_size=(3,3),stride=(2,2),padding=(1,1))#\n",
    "        self.splat2 = nn.Conv2d(8, 16, kernel_size=3, stride=1, padding=1, bias=True)#conv_layer(8, 16, kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.maxpool2 = nn.MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))  #\n",
    "        #\n",
    "        self.splat1_up = nn.Conv2d(16, 8, kernel_size=3, stride=1, padding=1, bias=True)#conv_layer(16, 8, kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.splat2_up = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1, bias=True)#conv_layer(8, 1, kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "    def forward(self, x_in):\n",
    "        x_in = resize(x_in, (16, 16), Image.BILINEAR)\n",
    "\n",
    "        x1 = self.splat1(x_in)\n",
    "        x1 = self.maxpool1(x1)\n",
    "        x1 = self.splat2(x1)\n",
    "        x_low1 = self.maxpool2(x1)\n",
    "\n",
    "        x1 = self.splat1_up(x_low1)\n",
    "        x1 = F.interpolate(x1, size=(8,8), mode='bilinear')\n",
    "        x1 = self.splat2_up(x1)\n",
    "        a = F.interpolate(x1, size=(16,16), mode='bilinear')#self.upsamp2(x1)\n",
    "\n",
    "        out = 1.0+x_in*(1+a)\n",
    "        return out\n",
    "\n",
    "class BrightnessAdaptation(nn.Module):\n",
    "    def __init__(self, params, c_in=1):\n",
    "        super(BrightnessAdaptation, self).__init__()\n",
    "        self.params = params\n",
    "        self.relu = nn.ReLU()\n",
    "\n",
    "        self.splat1 = nn.Conv2d(c_in, 8, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.splat1_2 = nn.Conv2d(c_in, 8, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.maxpool1 = nn.MaxPool2d(kernel_size=(3,3),stride=(2,2),padding=(1,1))#\n",
    "        self.splat2 = nn.Conv2d(8, 16, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.splat2_2 = nn.Conv2d(8, 16, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.maxpool2 = nn.MaxPool2d(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))  #\n",
    "\n",
    "        self.splat1_up = nn.Conv2d(16, 8, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.splat1_up2 = nn.Conv2d(16, 8, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.upsamp1 = torch.nn.Upsample(size=(params['output_res'][0]//2,params['output_res'][1]//2), mode='bilinear')\n",
    "        self.splat2_up = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.splat2_up2 = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1, bias=True)\n",
    "        self.upsamp2 = torch.nn.Upsample(size=(params['output_res'][0],params['output_res'][1]), mode='bilinear')\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "    def forward(self, x_in,fullres):\n",
    "        x1 = self.splat1(x_in)\n",
    "        x1 = self.maxpool1(x1)\n",
    "        x1 = self.splat2(x1)\n",
    "        x_low1 = self.maxpool2(x1)\n",
    "\n",
    "        x1 = self.splat1_up(x_low1)\n",
    "        x1 = F.interpolate(x1, size=(fullres.size()[-2:][0]//2,fullres.size()[-2:][1]//2), mode='bilinear')\n",
    "        x1 = self.splat2_up(x1)\n",
    "        a = F.interpolate(x1, size=(fullres.size()[-2:][0],fullres.size()[-2:][1]), mode='bilinear')\n",
    "\n",
    "        x2 = self.splat1_2(x_in)\n",
    "        x2 = self.maxpool1(x2)\n",
    "        x2 = self.splat2_2(x2)\n",
    "        x_low2 = self.maxpool2(x2)\n",
    "\n",
    "        x2 = self.splat1_up2(x_low2)\n",
    "        x2 = F.interpolate(x2, size=(fullres.size()[-2:][0]//2,fullres.size()[-2:][1]//2), mode='bilinear')\n",
    "        x2 = self.splat2_up2(x2)\n",
    "        b = F.interpolate(x2, size=(fullres.size()[-2:][0],fullres.size()[-2:][1]), mode='bilinear')\n",
    "        out = x_in*(1+a)+b\n",
    "        out = torch.clamp(out, 0.01, 1)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aiGv7tLA-_1P"
   },
   "source": [
    "## Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1729141901907,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "1ec_rhBC_BNS"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class FeatureExtract(nn.Module):\n",
    "    def __init__(self, params, c_in = 3):\n",
    "        super(FeatureExtract, self).__init__()\n",
    "        self.params = params\n",
    "        self.relu = nn.ReLU()\n",
    "        # ===========================attention===========================\n",
    "        if self.params['spec']:\n",
    "            self.attn1 = SPSA_Attention(dim=8*2, num_heads=1, is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn2 = SPSA_Attention(dim=16*2, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn3 = SPSA_Attention(dim=32*2, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn4 = SPSA_Attention(dim=64*2, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "        else:\n",
    "            self.attn1 = SPSA_Attention(dim=8, num_heads=1, is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn2 = SPSA_Attention(dim=16, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn3 = SPSA_Attention(dim=32, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "            self.attn4 = SPSA_Attention(dim=64, num_heads=1,is_material_mask = self.params['material_mask'], is_spec = self.params['spec'], bias=False)\n",
    "        # ===========================Fusion===========================\n",
    "        self.fusion1 = conv_layer(16, 8,  kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.fusion2 = conv_layer(32, 16,  kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.fusion3 = conv_layer(64, 32,  kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.fusion4 = conv_layer(128, 64,  kernel_size=3, stride=1, padding=1, batch_norm=params['batch_norm'])\n",
    "        # ===========================Splat===========================\n",
    "        self.splat1 = conv_layer(c_in, 8,  kernel_size=3, stride=2, padding=1, batch_norm=False)\n",
    "        self.splat2 = conv_layer(8,    16, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.splat3 = conv_layer(16,   32, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.splat4 = conv_layer(32,   64, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "\n",
    "        self.splat1_spec = conv_layer(10,    8, kernel_size=3, stride=2, padding=1, batch_norm=False) #12.18\n",
    "        self.splat2_spec = conv_layer(8,    16, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.splat3_spec = conv_layer(16,   32, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.splat4_spec = conv_layer(32,   64, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        # ===========================Global mine===========================\n",
    "        # Conv until 4x4\n",
    "        self.global1 = conv_layer(64, 128, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.global2 = conv_layer(128, 256, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.global3 = conv_layer(256, 128, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.global4 = conv_layer(128, 64, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.global5 = conv_layer(64, 64, kernel_size=3, stride=2, padding=1, batch_norm=params['batch_norm'])\n",
    "\n",
    "        # ===========================Local===========================\n",
    "        self.local1 = conv_layer(64, 64, kernel_size=3, padding=1, batch_norm=params['batch_norm'])\n",
    "        self.local2 = conv_layer(64, 64, kernel_size=3, padding=1, bias=False, activation=None)\n",
    "\n",
    "        # ===========================predicton===========================\n",
    "        self.pred = conv_layer(64, 96, kernel_size=1, activation=None) # 64 -> 96\n",
    "\n",
    "    def forward(self, x, spec, material_mask):\n",
    "        N = x.shape[0]\n",
    "        # ===========================Splat===========================\n",
    "        x = self.splat1(x) # N, C=8,  H=128, W=128\n",
    "        if self.params['spec']:\n",
    "            spec = self.splat1_spec(spec) # N, C=8,  H=128, W=128\n",
    "            x,spec = self.attn1(x, spec, material_mask)\n",
    "\n",
    "        x = self.splat2(x) # N, C=16, H=64,  W=64\n",
    "        if self.params['spec']:\n",
    "            spec = self.splat2_spec(spec) # N, C=8,  H=128, W=128\n",
    "            x,spec = self.attn2(x, spec, material_mask)\n",
    "\n",
    "        x = self.splat3(x) # N, C=32, H=32,  W=32\n",
    "        if self.params['spec']:\n",
    "            spec = self.splat3_spec(spec) # N, C=8,  H=128, W=128\n",
    "            x,spec = self.attn3(x, spec, material_mask)\n",
    "\n",
    "        x = self.splat4(x) # N, C=64, H=16,  W=16\n",
    "        if self.params['spec']:\n",
    "            spec = self.splat4_spec(spec) # N, C=8,  H=128, W=128\n",
    "            x,spec = self.attn4(x, spec, material_mask)\n",
    "\n",
    "        splat_out = x # N, C=64, H=16,  W=16\n",
    "        # ===========================Global mine===========================\n",
    "        # convs\n",
    "        x = self.global1(x)\n",
    "        x = self.global2(x)\n",
    "        # flatten\n",
    "        x = self.global3(x)\n",
    "        x = self.global4(x)\n",
    "        x = self.global5(x)\n",
    "        global_out = x.squeeze(2).squeeze(2)\n",
    "        # ===========================Local===========================\n",
    "        x = splat_out\n",
    "        x = self.local1(x)\n",
    "        x = self.local2(x)\n",
    "        local_out = x\n",
    "        # ===========================Fusion===========================\n",
    "        global_out = global_out[:, :, None, None] # N, 64， 1， 1\n",
    "        fusion = self.relu(local_out + global_out) # N, C=64, H=16, W=16\n",
    "        # ===========================Prediction===========================\n",
    "        x = self.pred(fusion) # N, C=96, H=16, W=16\n",
    "        x = x.view(N, 12, 8, 16, 16)#16, 16) # N, C=12, D=8, H=16, W=16\n",
    "        return x\n",
    "\n",
    "class Coefficients(nn.Module):\n",
    "    def __init__(self, params, c_in=3):\n",
    "        super(Coefficients, self).__init__()\n",
    "        self.params = params\n",
    "        self.relu = nn.ReLU()\n",
    "        # ===========================FeatureExtract===========================\n",
    "        self.FeatureExtract0 = FeatureExtract(params,c_in=3)\n",
    "        self.FeatureExtract1 = FeatureExtract(params,c_in=3)\n",
    "        self.FeatureExtract2 = FeatureExtract(params,c_in=3)\n",
    "        self.FeatureExtract3 = FeatureExtract(params,c_in=3)\n",
    "        self.FeatureExtract4 = FeatureExtract(params,c_in=3)\n",
    "        self.FeatureExtract5 = FeatureExtract(params,c_in=3)\n",
    "        self.SegExtract0 = SegExtract(params)\n",
    "        self.SegExtract1 = SegExtract(params)\n",
    "        self.SegExtract2 = SegExtract(params)\n",
    "        self.SegExtract3 = SegExtract(params)\n",
    "        self.SegExtract4 = SegExtract(params)\n",
    "        self.SegExtract5 = SegExtract(params)\n",
    "\n",
    "    def forward(self, x, spec, material_mask):\n",
    "        #FeatureExtract\n",
    "        if self.params['material_mask']:\n",
    "            x0 = self.FeatureExtract0(x,spec, material_mask[:,0,:,:].unsqueeze(1))\n",
    "            x1 = self.FeatureExtract1(x,spec, material_mask[:,1,:,:].unsqueeze(1))\n",
    "            x2 = self.FeatureExtract2(x,spec, material_mask[:,2,:,:].unsqueeze(1))\n",
    "            x3 = self.FeatureExtract3(x,spec, material_mask[:,3,:,:].unsqueeze(1))\n",
    "            x4 = self.FeatureExtract4(x,spec, material_mask[:,4,:,:].unsqueeze(1))\n",
    "            x5 = self.FeatureExtract5(x,spec, material_mask[:,5,:,:].unsqueeze(1))\n",
    "            x0_seg = self.SegExtract0(material_mask[:,0,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x1_seg = self.SegExtract1(material_mask[:,1,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x2_seg = self.SegExtract2(material_mask[:,2,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x3_seg = self.SegExtract3(material_mask[:,3,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x4_seg = self.SegExtract4(material_mask[:,4,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x5_seg = self.SegExtract5(material_mask[:,5,:,:].unsqueeze(1)).unsqueeze(1)\n",
    "            x = x0*x0_seg + x1*x1_seg + x2*x2_seg + x3*x3_seg + x4*x4_seg + x5*x5_seg\n",
    "        else:\n",
    "            x = self.FeatureExtract0(x,spec, material_mask[:,0,:,:].unsqueeze(1))\n",
    "        return x\n",
    "\n",
    "\n",
    "class Guide(nn.Module):\n",
    "    def __init__(self, params, c_in=3):\n",
    "        super(Guide, self).__init__()\n",
    "        self.params = params\n",
    "        # Number of relus/control points for the curve\n",
    "        self.nrelus = 16\n",
    "        self.c_in = c_in\n",
    "        self.M = nn.Parameter(torch.eye(c_in, dtype=torch.float32) + torch.randn(1, dtype=torch.float32) * 1e-4) # (c_in, c_in)\n",
    "        self.M_bias = nn.Parameter(torch.zeros(c_in, dtype=torch.float32)) # (c_in,)\n",
    "        # The shifts/thresholds in x of relus\n",
    "        thresholds = np.linspace(0, 1, self.nrelus, endpoint=False, dtype=np.float32) # (nrelus,)\n",
    "        thresholds = torch.tensor(thresholds) # (nrelus,)\n",
    "        thresholds = thresholds[None, None, None, :] # (1, 1, 1, nrelus)\n",
    "        thresholds = thresholds.repeat(1, 1, c_in, 1) # (1, 1, c_in, nrelus)\n",
    "        self.thresholds = nn.Parameter(thresholds) # (1, 1, c_in, nrelus)\n",
    "        # The slopes of relus\n",
    "        slopes = torch.zeros(1, 1, 1, c_in, self.nrelus, dtype=torch.float32) # (1, 1, 1, c_in, nrelus)\n",
    "        slopes[:, :, :, :, 0] = 1.0\n",
    "        self.slopes = nn.Parameter(slopes)\n",
    "\n",
    "        self.relu = nn.ReLU()\n",
    "        self.bias = nn.Parameter(torch.tensor(0, dtype=torch.float32))\n",
    "\n",
    "    def forward(self, x,material_mask,nir):\n",
    "        x = x.permute(0, 2, 3, 1) # N, H, W, C=3\n",
    "        old_shape = x.shape # (N, H, W, C=3)\n",
    "\n",
    "        x = torch.matmul(x.reshape(-1, self.c_in), self.M) # N*H*W, C=3\n",
    "        x = x + self.M_bias\n",
    "        x = x.reshape(old_shape) # N, H, W, C=3\n",
    "        x = x.unsqueeze(4) # N, H, W, C=3, 1\n",
    "        x = torch.sum(self.slopes * self.relu(x - self.thresholds), dim=4) # N, H, W, C=3\n",
    "\n",
    "        x = x.permute(0, 3, 1, 2) # N, C=3, H, W\n",
    "\n",
    "        x = torch.sum(x, dim=1, keepdim=True) / self.c_in # N, C=1, H, W\n",
    "        x = x + self.bias # N, C=1, H, W\n",
    "        x = torch.clamp(x, 0, 1) # N, C=1, H, W\n",
    "        return x\n",
    "\n",
    "\n",
    "class JDMHDRnetModel(nn.Module):\n",
    "    def __init__(self, params):\n",
    "        super(JDMHDRnetModel, self).__init__()\n",
    "        self.coefficients = Coefficients(params)\n",
    "        self.BrightnessAdaptation1 = BrightnessAdaptation(params)\n",
    "        self.BrightnessAdaptation2 = BrightnessAdaptation(params)\n",
    "        self.BrightnessAdaptation3 = BrightnessAdaptation(params)\n",
    "        self.guide = Guide(params)\n",
    "\n",
    "    def forward(self, lowres, fullres,spec,material_mask,nir):\n",
    "        #step1 Brightness Adaptation\n",
    "        hue = self.BrightnessAdaptation1(nir,fullres)\n",
    "        hue_out = self.BrightnessAdaptation2(nir,fullres)\n",
    "        hue_spec = self.BrightnessAdaptation3(nir, fullres)\n",
    "        hue_lowres = F.interpolate(hue, size=lowres.size()[-2:],mode='bilinear')\n",
    "        hue_spec = F.interpolate(hue_spec, size=lowres.size()[-2:],mode='bilinear')\n",
    "        fullres = fullres/hue\n",
    "        lowres = lowres/hue_lowres\n",
    "        spec = spec/hue_spec\n",
    "        # step2 grid coefficient predict\n",
    "        grid = self.coefficients(lowres,spec,material_mask)# N, C=12, D=8, H=16, W=16\n",
    "        # step3 guide map\n",
    "        guide = self.guide(fullres,material_mask,nir) # N, C=1, H, W\n",
    "        #step4 slicing\n",
    "        sliced = slicing(grid, guide)\n",
    "        #step5 generate output\n",
    "        output = apply(sliced, fullres)\n",
    "        output = output * hue_out\n",
    "\n",
    "        return output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "10Fb7MKZ_JI5"
   },
   "source": [
    "## Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "executionInfo": {
     "elapsed": 933,
     "status": "ok",
     "timestamp": 1729141902827,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "FLU4ettE_K8m"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import torch\n",
    "from PIL import Image\n",
    "from skimage import io\n",
    "from torchvision import transforms\n",
    "from torchvision.transforms.functional import resize\n",
    "from torch.utils.data import Dataset\n",
    "\n",
    "class BaseDataset(Dataset):\n",
    "    def get_tif(self, path, is_jdm_predict):\n",
    "        memory_tif = []\n",
    "        memory_tif_input = {}\n",
    "        memory_tif_output = {}\n",
    "        memory_tif_nir = {}\n",
    "        memory_spec = {}\n",
    "        for file_name in os.listdir(path+'/target'):\n",
    "            fname = file_name\n",
    "            input = io.imread(os.path.join(path, 'source', fname.split('.')[0] + '.tif'))\n",
    "            output = io.imread(os.path.join(path, 'target', fname.split('.')[0] + '.tif'))\n",
    "            if is_jdm_predict:\n",
    "                nir = io.imread(os.path.join(path, 'nir_jdm', fname.split('.')[0] + '.png'))\n",
    "                nir = nir[:, :, 0]\n",
    "                nir = (nir // 32 + 1)#1-8\n",
    "                nir = nir / 8.0#0.125-1.0\n",
    "            else:\n",
    "                nir = io.imread(os.path.join(path, 'nir', fname.split('.')[0] + '.tif'))\n",
    "            spec = np.load(os.path.join(path, 'spec_npy10band', fname.split('.')[0] + '.npy'), mmap_mode=None,\n",
    "                           allow_pickle=False, fix_imports=True, encoding='ASCII')\n",
    "\n",
    "            memory_tif_input.update({fname.split('.')[0]:input})\n",
    "            memory_tif_output.update({fname.split('.')[0]:output})\n",
    "            memory_tif_nir.update({fname.split('.')[0]:nir})\n",
    "            memory_spec.update({fname.split('.')[0]:spec})\n",
    "        memory_tif.append(memory_tif_input)\n",
    "        memory_tif.append(memory_tif_output)\n",
    "        memory_tif.append(memory_tif_nir)\n",
    "        memory_tif.append(memory_spec)\n",
    "        return memory_tif\n",
    "\n",
    "    def load_img_hdr(self, fname,read_memory = False):\n",
    "        if read_memory:\n",
    "            input = self.memory_tif[0][fname.split('.')[0]]\n",
    "            output = self.memory_tif[1][fname.split('.')[0]]\n",
    "            nir_ori = self.memory_tif[2][fname.split('.')[0]]\n",
    "            spec = self.memory_tif[3][fname.split('.')[0]]\n",
    "        else:\n",
    "            input = io.imread(os.path.join(self.data_path, 'source', fname.split('.')[0] + '.tif'))\n",
    "            output = io.imread(os.path.join(self.data_path, 'target', fname.split('.')[0] + '.tif'))\n",
    "            if self.params['jdm_predict']:\n",
    "                nir_ori = io.imread(os.path.join(self.data_path, 'nir_jdm', fname.split('.')[0] + '.png'))\n",
    "                nir_ori = nir_ori[:, :, 0]\n",
    "                nir_ori = (nir_ori // 32 + 1)#1-8\n",
    "                nir_ori = nir_ori / 8.0#0.125-1.0\n",
    "            else:\n",
    "                nir_ori = io.imread(os.path.join(self.data_path, 'nir', fname.split('.')[0] + '.tif'))\n",
    "            spec = np.load(os.path.join(self.data_path, 'spec_npy10band', fname.split('.')[0] + '.npy'), mmap_mode=None,\n",
    "                           allow_pickle=False, fix_imports=True, encoding='ASCII')\n",
    "        if self.params['jdm_predict']:\n",
    "            seg = io.imread(os.path.join(self.data_path, 'seg_jdm', fname.split('.')[0] + '.png'))\n",
    "        else:\n",
    "            seg = io.imread(os.path.join(self.data_path, 'seg', fname.split('.')[0] + '.png'))\n",
    "\n",
    "        spec = spec.transpose((1, 0, 2))[:,::-1,:]\n",
    "        spec = np.ascontiguousarray(spec)\n",
    "\n",
    "        #############segmentation#################\n",
    "        #CLASSES = ('sky','tree','building','trunk','road')\n",
    "        #PALETTE =[[19,19,194], [43,139,3], [248,232,109], [78,50,12],[102,102,100]]\n",
    "        sky_mask = np.where((seg[:,:,0]==19)&(seg[:,:,1]==19)&(seg[:,:,2]==194),1,0)\n",
    "        tree_mask = np.where((seg[:,:,0]==43)&(seg[:,:,1]==139)&(seg[:,:,2]==3),1,0)\n",
    "        building_mask = np.where((seg[:,:,0]==248)&(seg[:,:,1]==232)&(seg[:,:,2]==109),1,0)\n",
    "        trunk_mask = np.where((seg[:,:,0]==78)&(seg[:,:,1]==50)&(seg[:,:,2]==12),1,0)\n",
    "        road_mask = np.where((seg[:,:,0]==102)&(seg[:,:,1]==102)&(seg[:,:,2]==100),1,0)\n",
    "        others_mask = np.where((seg[:,:,0]==8)&(seg[:,:,1]==8)&(seg[:,:,2]==8),1,0)\n",
    "\n",
    "        sky_mask = np.expand_dims(sky_mask,axis=2)\n",
    "        tree_mask = np.expand_dims(tree_mask,axis=2)\n",
    "        building_mask = np.expand_dims(building_mask,axis=2)\n",
    "        trunk_mask = np.expand_dims(trunk_mask,axis=2)\n",
    "        road_mask = np.expand_dims(road_mask,axis=2)\n",
    "        others_mask = np.expand_dims(others_mask,axis=2)\n",
    "\n",
    "        material_mask = np.concatenate((sky_mask,tree_mask,building_mask,trunk_mask,\\\n",
    "                                         road_mask,others_mask ),axis=2)\n",
    "\n",
    "        spec = np.asarray(spec, dtype=np.float32)\n",
    "        input = np.asarray(input, dtype=np.float32)\n",
    "        output = np.asarray(output, dtype=np.float32)\n",
    "        material_mask = np.asarray(material_mask, dtype=np.float32)\n",
    "        nir_ori = np.asarray(nir_ori, dtype=np.float32)\n",
    "\n",
    "        #constraint the nir range\n",
    "        nir_ori = nir_ori[:,:,np.newaxis]\n",
    "        input_max = np.max(input,axis = 2)\n",
    "        nir_max = input_max / np.max(input)\n",
    "        nir_max = nir_max[:, :, np.newaxis]\n",
    "        nir = np.maximum(nir_max,nir_ori)\n",
    "\n",
    "        input = torch.from_numpy(input.transpose((2, 0, 1)))\n",
    "        nir = torch.from_numpy(nir.transpose((2, 0, 1)))\n",
    "        output = torch.from_numpy(output.transpose((2, 0, 1)))\n",
    "        spec = torch.from_numpy(spec.transpose((2, 0, 1)))\n",
    "        material_mask = torch.from_numpy(material_mask.transpose((2, 0, 1)))\n",
    "\n",
    "        return input, output, spec, material_mask,nir\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.input_paths)\n",
    "\n",
    "\n",
    "class Train_Dataset(BaseDataset):\n",
    "    \"\"\"Class for training images.\"\"\"\n",
    "\n",
    "    def __init__(self, params=None):\n",
    "        self.data_path = params['train_data_dir']\n",
    "        self.input_paths = get_files(os.path.join(self.data_path, 'source'))\n",
    "        self.memory_tif = self.get_tif(self.data_path,params['jdm_predict'])\n",
    "        self.input_res = params['input_res']\n",
    "        self.output_res = params['output_res']\n",
    "\n",
    "        self.augment = transforms.Compose([\n",
    "            transforms.RandomCrop(self.output_res),\n",
    "            transforms.RandomHorizontalFlip(p=0.5),\n",
    "            transforms.RandomVerticalFlip(p=0.5),\n",
    "        ])\n",
    "        self.params = params\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "\n",
    "        fname = self.input_paths[idx].split('/')[-1]\n",
    "        if self.params['hdr']:\n",
    "            input, output, spec, material_mask,nir = self.load_img_hdr(fname,read_memory=True)\n",
    "        # Check dimensions before crop\n",
    "        assert input.shape == output.shape\n",
    "        assert self.output_res[0] <= input.shape[2]\n",
    "        assert self.output_res[1] <= input.shape[1]\n",
    "        # Crop\n",
    "        inout = torch.cat([input,output,spec,material_mask,nir],dim=0)\n",
    "        inout = self.augment(inout)\n",
    "\n",
    "        full = inout[:3,:,:]\n",
    "        low = resize(full, (self.input_res, self.input_res), Image.BILINEAR)\n",
    "        output = inout[3:6,:,:]\n",
    "\n",
    "        spec = inout[6:6+spec.shape[0],:,:]\n",
    "        material_mask = inout[6+spec.shape[0]:6+spec.shape[0]+6,:,:]\n",
    "        nir = inout[6+spec.shape[0]+6:6+spec.shape[0]+7,:,:]\n",
    "        spec_tmp = resize(spec, (self.params['spec_size'], self.params['spec_size']), Image.BILINEAR)\n",
    "        spec_low = resize(spec_tmp, (self.input_res, self.input_res), Image.BILINEAR)\n",
    "\n",
    "        return low, full, output, spec_low,material_mask,nir\n",
    "\n",
    "class Eval_Dataset(BaseDataset):\n",
    "    \"\"\"Class for validation images.\"\"\"\n",
    "\n",
    "    def __init__(self, params=None):\n",
    "        self.data_path = params['eval_data_dir']\n",
    "        self.input_paths = get_files(os.path.join(self.data_path,  'source'))#'input'))\n",
    "        # self.memory_tif = self.get_tif(self.data_path)\n",
    "        self.input_res = params['input_res']\n",
    "        self.params = params\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        fname = self.input_paths[idx].split('/')[-1]\n",
    "        if self.params['hdr']:\n",
    "            full, output, spec, material_mask,nir = self.load_img_hdr(fname,read_memory=False)\n",
    "        low = resize(full, (self.input_res, self.input_res), Image.BILINEAR)\n",
    "        spec_tmp = resize(spec, (self.params['spec_size'], self.params['spec_size']), Image.BILINEAR)\n",
    "        spec_low = resize(spec_tmp, (self.input_res, self.input_res), Image.BILINEAR)\n",
    "        return low, full, output, spec_low, material_mask, nir"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BlCDlXeM_RFu"
   },
   "source": [
    "## Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1729141902828,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "Voqxdq2q_SfC"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import time\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from argparse import ArgumentParser\n",
    "from torch.optim import Adam, lr_scheduler\n",
    "from torchvision.transforms.functional import vflip, hflip\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision.utils import save_image\n",
    "\n",
    "\n",
    "\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"]='0'\n",
    "\n",
    "\n",
    "def train(params, train_loader, valid_loader, model, ep, device):\n",
    "    \n",
    "#     if torch.cuda.device_count() > 1:\n",
    "#         print(f\"Using {torch.cuda.device_count()} GPUs!\")\n",
    "#         # Wrap the entire model in DataParallel\n",
    "#         model = nn.DataParallel(model)\n",
    "    \n",
    "    model = model.to(device)\n",
    "    \n",
    "    # Optimization\n",
    "    optimizer = Adam(model.parameters(), params['learning_rate'], weight_decay=1e-8)\n",
    "    if not params['material_mask']:\n",
    "        scheduler = lr_scheduler.ReduceLROnPlateau(optimizer,\n",
    "        patience=params['epochs']*3, factor=0.5, verbose=True)\n",
    "    # Loss function\n",
    "    criterion = nn.MSELoss()\n",
    "    # Training\n",
    "    train_loss_meter = AvgMeter()\n",
    "    train_psnr_meter = AvgMeter()\n",
    "    early_stopping_counter = 100\n",
    "    stats = {'train_loss': [],\n",
    "             'train_psnr': [],\n",
    "             'valid_psnr': []}\n",
    "    iteration = (ep+1)*160 / params['batch_size']\n",
    "    # print(iteration)\n",
    "    old_time = time.time()\n",
    "\n",
    "    for epoch in range(ep+1,params['epochs']):\n",
    "        for batch_idx, (low, full, target, spec, material_mask,nir) in enumerate(train_loader):\n",
    "            iteration += 1\n",
    "            model.train()\n",
    "\n",
    "            low = low.to(device)\n",
    "            full = full.to(device)\n",
    "            target = target.to(device)\n",
    "            spec = spec.to(device)\n",
    "            material_mask = material_mask.to(device)\n",
    "            nir = nir.to(device)\n",
    "\n",
    "            if params['debugsave']:\n",
    "                full_image = full[0, :, :, :]\n",
    "                full_save =  (full_image -torch.min(full_image))/ (torch.max(full_image)- torch.min(full_image)) #* 255\n",
    "                save_image(full_save, os.path.join(params['eval_out'], str(batch_idx)+'_inputfull.tif'))\n",
    "                save_image(nir[0,:,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_nir.tif'))\n",
    "                ori_imgae = nir[0, :, :, :]*full[0,:,:,:]\n",
    "                ori_save = (ori_imgae - torch.min(ori_imgae)) / (torch.max(ori_imgae) - torch.min(ori_imgae)) #* 255\n",
    "                save_image(ori_save, os.path.join(params['eval_out'], str(batch_idx) + '_ori.tif'))\n",
    "                save_image(target[0, :, :, :] / nir[0,:,:,:] /255, os.path.join(params['eval_out'], str(batch_idx) + '_targetR.png'))\n",
    "\n",
    "                save_image(target[0,:,:,:]/255, os.path.join(params['eval_out'], str(batch_idx)+'_target.png'))\n",
    "                save_image(spec[0,0,:,:]/65535, os.path.join(params['eval_out'], str(batch_idx)+'_spec.png'))\n",
    "\n",
    "                # save_image(full[0,:,:,:]/65535*255, os.path.join(params['eval_out'], str(batch_idx)+'_full.tif'))\n",
    "                # save_image(target[0,:,:,:]/255, os.path.join(params['eval_out'], str(batch_idx)+'_target.png'))\n",
    "                # save_image(spec[0,0,:,:]/65535, os.path.join(params['eval_out'], str(batch_idx)+'_spec.png'))\n",
    "                save_image(material_mask[0,0,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_sky_mask.png'))\n",
    "                save_image(material_mask[0,1,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_tree_mask.png'))\n",
    "                save_image(material_mask[0,2,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_building_mask.png'))\n",
    "                save_image(material_mask[0,3,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_trunk_mask.png'))\n",
    "                save_image(material_mask[0,4,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_road_mask.png'))\n",
    "                save_image(material_mask[0,5,:,:], os.path.join(params['eval_out'], str(batch_idx)+'_material_others_mask.png'))\n",
    "            # Normalize to [0, 1] on GPU\n",
    "            if params['hdr']:\n",
    "                low = torch.div(low, 65535.0)\n",
    "                full = torch.div(full, 65535.0)\n",
    "                spec = torch.div(spec, 65535.0)\n",
    "            else:\n",
    "                low = torch.div(low, 255.0)\n",
    "                full = torch.div(full, 255.0)\n",
    "            target = torch.div(target, 255.0)\n",
    "\n",
    "            output = model(low, full, spec, material_mask,nir)\n",
    "\n",
    "            loss = criterion(output, target)\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            if not params['material_mask']:\n",
    "                scheduler.step(loss)\n",
    "\n",
    "            if iteration % params['summary_interval'] == 0:\n",
    "                train_loss_meter.update(loss.item())\n",
    "                train_psnr = psnr(output, target).item()\n",
    "                train_psnr_meter.update(train_psnr)\n",
    "                new_time = time.time()\n",
    "                print('[%d/%d] Iteration: %d | Loss: %.4f | PSNR: %.4f | lr: %.8f | Time: %.2fs' %\n",
    "                        (epoch+1, params['epochs'], iteration, loss, train_psnr, optimizer.param_groups[0]['lr'], new_time-old_time))\n",
    "                old_time = new_time\n",
    "\n",
    "            if iteration % params['ckpt_interval'] == 0:\n",
    "                stats['train_loss'].append(train_loss_meter.avg)\n",
    "                train_loss_meter.reset()\n",
    "                stats['train_psnr'].append(train_psnr_meter.avg)\n",
    "                train_psnr_meter.reset()\n",
    "                valid_psnr = eval(params, valid_loader, model, device, epoch)\n",
    "                stats['valid_psnr'].append(valid_psnr)\n",
    "                ckpt_fname = \"epoch_\" + str(epoch)+'_iter_' + str(iteration) + \".pt\"\n",
    "                save_model_stats(model, params, ckpt_fname, stats)\n",
    "                if(valid_psnr >= 30):\n",
    "                    return\n",
    "\n",
    "def eval(params, valid_loader, model, device,epoch):\n",
    "    model.eval()\n",
    "    psnr_meter = AvgMeter()\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (low, full, target, spec, material_mask,nir) in enumerate(valid_loader):\n",
    "            low = low.to(device)\n",
    "            full = full.to(device)\n",
    "            target = target.to(device)\n",
    "            spec = spec.to(device)\n",
    "            nir = nir.to(device)\n",
    "            material_mask = material_mask.to(device)\n",
    "\n",
    "            # Normalize to [0, 1] on GPU\n",
    "            if params['hdr']:\n",
    "                low =  torch.div(low, 65535.0)\n",
    "                full = torch.div(full, 65535.0)\n",
    "                spec = torch.div(spec, 65535.0)\n",
    "            else:\n",
    "                low = torch.div(low, 255.0)\n",
    "                full = torch.div(full, 255.0)\n",
    "            target = torch.div(target, 255.0)\n",
    "\n",
    "\n",
    "            output= model(low, full, spec, material_mask,nir)\n",
    "\n",
    "            # output = output * nir\n",
    "\n",
    "            # save_image(output, os.path.join(params['eval_out'], 'epoch'+str(epoch)+'_'+str(batch_idx)+'.png'))\n",
    "\n",
    "\n",
    "            eval_psnr = psnr(output, target).item()\n",
    "            print(str(batch_idx)+'.png',eval_psnr)\n",
    "            psnr_meter.update(eval_psnr)\n",
    "\n",
    "    print (\"Validation PSNR: \", psnr_meter.avg)\n",
    "\n",
    "    return psnr_meter.avg\n",
    "\n",
    "\n",
    "def train_main(params, first_time=True):\n",
    "    # Random seeds\n",
    "    seed = 0\n",
    "    torch.backends.cudnn.deterministic = True # False\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed(seed)\n",
    "\n",
    "    print_params(params)\n",
    "\n",
    "    os.makedirs(params['ckpt_dir'], exist_ok=True)\n",
    "    os.makedirs(params['stats_dir'], exist_ok=True)\n",
    "    os.makedirs(params['eval_out'], exist_ok=True)\n",
    "\n",
    "    train_dataset = Train_Dataset(params)\n",
    "    train_loader = DataLoader(train_dataset, batch_size=params['batch_size'], shuffle=True)\n",
    "\n",
    "    valid_dataset = Eval_Dataset(params)\n",
    "    valid_loader = DataLoader(valid_dataset, batch_size=1)\n",
    "\n",
    "    model = JDMHDRnetModel(params)\n",
    "    prev_epochs = load_train_ckpt(model, params['ckpt_dir'])\n",
    "    if first_time:\n",
    "        prev_epochs = -1\n",
    "    print(\"prev_epochs \", prev_epochs)\n",
    "    if params['cuda']:\n",
    "        device = torch.device(\"cuda\")\n",
    "    else:\n",
    "        device = torch.device(\"cpu\")\n",
    "    model.to(device)\n",
    "\n",
    "    train(params, train_loader, valid_loader, model, prev_epochs, device)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UD5RUGir_qqL"
   },
   "source": [
    "## Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "executionInfo": {
     "elapsed": 15,
     "status": "ok",
     "timestamp": 1729141902829,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "EHNmE1uE_sQP"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import torch\n",
    "from argparse import ArgumentParser\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision.utils import save_image\n",
    "\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"]='0'\n",
    "\n",
    "def eval(params, valid_loader, model, device,epoch):\n",
    "    model.eval()\n",
    "    psnr_meter = AvgMeter()\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (low, full, target, spec, material_mask,nir) in enumerate(valid_loader):\n",
    "            low = low.to(device)\n",
    "            full = full.to(device)\n",
    "            target = target.to(device)\n",
    "            spec = spec.to(device)\n",
    "            nir = nir.to(device)\n",
    "            material_mask = material_mask.to(device)\n",
    "\n",
    "            # Normalize to [0, 1] on GPU\n",
    "            if params['hdr']:\n",
    "                low =  torch.div(low, 65535.0)\n",
    "                full = torch.div(full, 65535.0)\n",
    "                spec = torch.div(spec, 65535.0)\n",
    "            else:\n",
    "                low = torch.div(low, 255.0)\n",
    "                full = torch.div(full, 255.0)\n",
    "            target = torch.div(target, 255.0)\n",
    "\n",
    "            output= model(low, full, spec, material_mask,nir)\n",
    "            mul = 1;\n",
    "            if batch_idx >=10 and batch_idx<100:\n",
    "                mul=2\n",
    "            if batch_idx >=100 and batch_idx<1000:\n",
    "                mul=3\n",
    "            save_image(output, os.path.join(params['eval_out'], '0'*(4-mul) + str(batch_idx)+'.png'))\n",
    "\n",
    "            eval_psnr = psnr(output, target).item()\n",
    "            print(str(batch_idx)+'.png',eval_psnr)\n",
    "            psnr_meter.update(eval_psnr)\n",
    "\n",
    "    print (\"Validation PSNR: \", psnr_meter.avg)\n",
    "\n",
    "    return psnr_meter.avg\n",
    "\n",
    "\n",
    "\n",
    "def test(params):\n",
    "    # Random seeds\n",
    "    seed = 0\n",
    "    torch.backends.cudnn.deterministic = True # False\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed(seed)\n",
    "\n",
    "    print_params(params)\n",
    "\n",
    "    os.makedirs(params['ckpt_dir'], exist_ok=True)\n",
    "    os.makedirs(params['stats_dir'], exist_ok=True)\n",
    "    os.makedirs(params['eval_out'], exist_ok=True)\n",
    "\n",
    "    valid_dataset = Eval_Dataset(params)\n",
    "    valid_loader = DataLoader(valid_dataset, batch_size=1)\n",
    "\n",
    "    model = JDMHDRnetModel(params)\n",
    "    load_train_ckpt(model, params['ckpt_dir'])\n",
    "    if params['cuda']:\n",
    "        device = torch.device(\"cuda\")\n",
    "    else:\n",
    "        device = torch.device(\"cpu\")\n",
    "    model.to(device)\n",
    "\n",
    "    valid_psnr = eval(params, valid_loader, model, device, epoch=params['epochs'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1729141902829,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "JcuiQ7CcoO-r"
   },
   "outputs": [],
   "source": [
    "def parse_params(jdm_predict=False):\n",
    "  params = {\n",
    "      \"cuda\": True,\n",
    "      \"ckpt_interval\": 2000,\n",
    "      \"ckpt_dir\": \"./ckptsJdm\",  # Make this different for Ideal and predicted case\n",
    "      \"stats_dir\": \"./stats_jdm\", # Make this different for Ideal and predicted case\n",
    "      \"epochs\": 6000,\n",
    "      \"learning_rate\": 1e-4,\n",
    "      \"summary_interval\": 10,\n",
    "      \"batch_size\": 4,\n",
    "      \"train_data_dir\": './Datasets/Mobile-Spec/train',  # Change this to your path\n",
    "      \"eval_data_dir\": './Datasets/Mobile-Spec/eval',    # Change this to your path\n",
    "      \"eval_out\": \"./outputs_jdm\",\n",
    "      \"hdr\": True,\n",
    "      \"jdm_predict\": jdm_predict,\n",
    "      \"batch_norm\": False,\n",
    "      \"input_res\": 256,\n",
    "      \"output_res\": (512, 512),\n",
    "      \"spec_size\": 16,\n",
    "      \"spec\": True,\n",
    "      \"material_mask\": True,\n",
    "      \"debugsave\": False,\n",
    "  }\n",
    "  return params\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def delete_all_files(directory_path):\n",
    "#     # Loop through all files in the directory\n",
    "#     for filename in os.listdir(directory_path):\n",
    "#         file_path = os.path.join(directory_path, filename)\n",
    "        \n",
    "#         # Check if it's a file before deleting\n",
    "#         if os.path.isfile(file_path):\n",
    "#             os.remove(file_path)\n",
    "#             print(f\"Deleted: {file_path}\")\n",
    "#         else:\n",
    "#             print(f\"Skipped (not a file): {file_path}\")\n",
    "\n",
    "# # Example usage\n",
    "# directory_path = '/kaggle/working/outputs_jdm'  # Replace with your directory path\n",
    "# delete_all_files(directory_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tXbu0ENlB631"
   },
   "source": [
    "### Predicted priors training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1729141905059,
     "user": {
      "displayName": "Rohan Phad",
      "userId": "04082063373055029584"
     },
     "user_tz": -330
    },
    "id": "UjG7H_typbj5"
   },
   "outputs": [],
   "source": [
    "params = parse_params(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training parameters: \n",
      "  cuda = True\n",
      "  ckpt_interval = 2000\n",
      "  ckpt_dir = ./ckptsJdm\n",
      "  stats_dir = ./stats_jdm\n",
      "  epochs = 6000\n",
      "  learning_rate = 0.0001\n",
      "  summary_interval = 10\n",
      "  batch_size = 4\n",
      "  train_data_dir = ./Datasets/Mobile-Spec/train\n",
      "  eval_data_dir = ./Datasets/Mobile-Spec/eval\n",
      "  eval_out = ./outputs_jdm\n",
      "  hdr = True\n",
      "  jdm_predict = True\n",
      "  batch_norm = False\n",
      "  input_res = 256\n",
      "  output_res = (512, 512)\n",
      "  spec_size = 16\n",
      "  spec = True\n",
      "  material_mask = True\n",
      "  debugsave = False\n",
      "\n",
      "epochs  399\n",
      "Loading: ./ckptsJdm/epoch_399_iter_16000.0.pt\n",
      "prev_epochs  399\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ipr/anaconda3/envs/rohanpv21/lib/python3.9/site-packages/torchvision/transforms/functional.py:364: UserWarning: Argument interpolation should be of type InterpolationMode instead of int. Please, use InterpolationMode enum.\n",
      "  warnings.warn(\n",
      "/home/ipr/anaconda3/envs/rohanpv21/lib/python3.9/site-packages/torch/nn/functional.py:3454: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[401/6000] Iteration: 16010 | Loss: 0.0008 | PSNR: 30.8418 | lr: 0.00010000 | Time: 10.18s\n",
      "[401/6000] Iteration: 16020 | Loss: 0.0012 | PSNR: 29.1150 | lr: 0.00010000 | Time: 8.81s\n",
      "[401/6000] Iteration: 16030 | Loss: 0.0014 | PSNR: 28.5721 | lr: 0.00010000 | Time: 8.79s\n",
      "[401/6000] Iteration: 16040 | Loss: 0.0014 | PSNR: 28.4327 | lr: 0.00010000 | Time: 8.80s\n",
      "[402/6000] Iteration: 16050 | Loss: 0.0010 | PSNR: 30.1916 | lr: 0.00010000 | Time: 8.83s\n",
      "[402/6000] Iteration: 16060 | Loss: 0.0007 | PSNR: 31.3700 | lr: 0.00010000 | Time: 8.76s\n",
      "[402/6000] Iteration: 16070 | Loss: 0.0010 | PSNR: 30.0030 | lr: 0.00010000 | Time: 8.87s\n",
      "[402/6000] Iteration: 16080 | Loss: 0.0006 | PSNR: 31.9464 | lr: 0.00010000 | Time: 9.09s\n",
      "[403/6000] Iteration: 16090 | Loss: 0.0008 | PSNR: 30.8522 | lr: 0.00010000 | Time: 8.79s\n",
      "[403/6000] Iteration: 16100 | Loss: 0.0007 | PSNR: 31.4940 | lr: 0.00010000 | Time: 8.78s\n",
      "[403/6000] Iteration: 16110 | Loss: 0.0018 | PSNR: 27.5336 | lr: 0.00010000 | Time: 8.79s\n",
      "[403/6000] Iteration: 16120 | Loss: 0.0005 | PSNR: 32.6269 | lr: 0.00010000 | Time: 8.76s\n",
      "[404/6000] Iteration: 16130 | Loss: 0.0007 | PSNR: 31.7094 | lr: 0.00010000 | Time: 8.81s\n",
      "[404/6000] Iteration: 16140 | Loss: 0.0012 | PSNR: 29.2283 | lr: 0.00010000 | Time: 8.83s\n",
      "[404/6000] Iteration: 16150 | Loss: 0.0011 | PSNR: 29.4130 | lr: 0.00010000 | Time: 8.80s\n",
      "[404/6000] Iteration: 16160 | Loss: 0.0015 | PSNR: 28.2088 | lr: 0.00010000 | Time: 8.80s\n",
      "[405/6000] Iteration: 16170 | Loss: 0.0012 | PSNR: 29.0426 | lr: 0.00010000 | Time: 8.85s\n",
      "[405/6000] Iteration: 16180 | Loss: 0.0008 | PSNR: 30.7289 | lr: 0.00010000 | Time: 8.93s\n",
      "[405/6000] Iteration: 16190 | Loss: 0.0022 | PSNR: 26.4798 | lr: 0.00010000 | Time: 8.84s\n",
      "[405/6000] Iteration: 16200 | Loss: 0.0013 | PSNR: 28.6981 | lr: 0.00010000 | Time: 8.89s\n",
      "[406/6000] Iteration: 16210 | Loss: 0.0022 | PSNR: 26.4843 | lr: 0.00010000 | Time: 8.87s\n",
      "[406/6000] Iteration: 16220 | Loss: 0.0009 | PSNR: 30.6518 | lr: 0.00010000 | Time: 8.81s\n",
      "[406/6000] Iteration: 16230 | Loss: 0.0009 | PSNR: 30.4331 | lr: 0.00010000 | Time: 8.86s\n",
      "[406/6000] Iteration: 16240 | Loss: 0.0008 | PSNR: 31.0703 | lr: 0.00010000 | Time: 8.81s\n",
      "[407/6000] Iteration: 16250 | Loss: 0.0011 | PSNR: 29.5508 | lr: 0.00010000 | Time: 8.80s\n",
      "[407/6000] Iteration: 16260 | Loss: 0.0006 | PSNR: 32.0629 | lr: 0.00010000 | Time: 8.79s\n",
      "[407/6000] Iteration: 16270 | Loss: 0.0010 | PSNR: 30.1571 | lr: 0.00010000 | Time: 8.82s\n",
      "[407/6000] Iteration: 16280 | Loss: 0.0017 | PSNR: 27.7551 | lr: 0.00010000 | Time: 8.82s\n",
      "[408/6000] Iteration: 16290 | Loss: 0.0006 | PSNR: 32.0533 | lr: 0.00010000 | Time: 8.88s\n",
      "[408/6000] Iteration: 16300 | Loss: 0.0004 | PSNR: 33.7003 | lr: 0.00010000 | Time: 8.82s\n",
      "[408/6000] Iteration: 16310 | Loss: 0.0007 | PSNR: 31.5863 | lr: 0.00010000 | Time: 8.93s\n",
      "[408/6000] Iteration: 16320 | Loss: 0.0014 | PSNR: 28.6555 | lr: 0.00010000 | Time: 8.83s\n",
      "[409/6000] Iteration: 16330 | Loss: 0.0016 | PSNR: 27.9582 | lr: 0.00010000 | Time: 8.93s\n",
      "[409/6000] Iteration: 16340 | Loss: 0.0011 | PSNR: 29.6115 | lr: 0.00010000 | Time: 8.82s\n",
      "[409/6000] Iteration: 16350 | Loss: 0.0010 | PSNR: 30.1321 | lr: 0.00010000 | Time: 8.82s\n",
      "[409/6000] Iteration: 16360 | Loss: 0.0019 | PSNR: 27.2626 | lr: 0.00010000 | Time: 8.86s\n",
      "[410/6000] Iteration: 16370 | Loss: 0.0010 | PSNR: 30.0222 | lr: 0.00010000 | Time: 8.91s\n",
      "[410/6000] Iteration: 16380 | Loss: 0.0009 | PSNR: 30.4053 | lr: 0.00010000 | Time: 8.81s\n",
      "[410/6000] Iteration: 16390 | Loss: 0.0011 | PSNR: 29.6523 | lr: 0.00010000 | Time: 8.83s\n",
      "[410/6000] Iteration: 16400 | Loss: 0.0014 | PSNR: 28.6538 | lr: 0.00010000 | Time: 8.82s\n",
      "[411/6000] Iteration: 16410 | Loss: 0.0007 | PSNR: 31.7573 | lr: 0.00010000 | Time: 8.79s\n",
      "[411/6000] Iteration: 16420 | Loss: 0.0017 | PSNR: 27.6941 | lr: 0.00010000 | Time: 8.86s\n",
      "[411/6000] Iteration: 16430 | Loss: 0.0012 | PSNR: 29.3491 | lr: 0.00010000 | Time: 8.79s\n",
      "[411/6000] Iteration: 16440 | Loss: 0.0007 | PSNR: 31.2604 | lr: 0.00010000 | Time: 8.81s\n",
      "[412/6000] Iteration: 16450 | Loss: 0.0009 | PSNR: 30.5951 | lr: 0.00010000 | Time: 8.81s\n",
      "[412/6000] Iteration: 16460 | Loss: 0.0009 | PSNR: 30.6925 | lr: 0.00010000 | Time: 8.97s\n",
      "[412/6000] Iteration: 16470 | Loss: 0.0007 | PSNR: 31.4778 | lr: 0.00010000 | Time: 8.79s\n",
      "[412/6000] Iteration: 16480 | Loss: 0.0010 | PSNR: 30.1893 | lr: 0.00010000 | Time: 8.80s\n",
      "[413/6000] Iteration: 16490 | Loss: 0.0006 | PSNR: 32.1445 | lr: 0.00010000 | Time: 8.88s\n",
      "[413/6000] Iteration: 16500 | Loss: 0.0013 | PSNR: 28.8065 | lr: 0.00010000 | Time: 8.82s\n",
      "[413/6000] Iteration: 16510 | Loss: 0.0012 | PSNR: 29.2212 | lr: 0.00010000 | Time: 8.83s\n",
      "[413/6000] Iteration: 16520 | Loss: 0.0009 | PSNR: 30.5556 | lr: 0.00010000 | Time: 8.86s\n",
      "[414/6000] Iteration: 16530 | Loss: 0.0009 | PSNR: 30.3311 | lr: 0.00010000 | Time: 8.83s\n",
      "[414/6000] Iteration: 16540 | Loss: 0.0009 | PSNR: 30.3088 | lr: 0.00010000 | Time: 8.85s\n",
      "[414/6000] Iteration: 16550 | Loss: 0.0024 | PSNR: 26.2038 | lr: 0.00010000 | Time: 8.79s\n",
      "[414/6000] Iteration: 16560 | Loss: 0.0014 | PSNR: 28.4516 | lr: 0.00010000 | Time: 8.88s\n",
      "[415/6000] Iteration: 16570 | Loss: 0.0005 | PSNR: 33.1601 | lr: 0.00010000 | Time: 8.86s\n",
      "[415/6000] Iteration: 16580 | Loss: 0.0006 | PSNR: 32.1286 | lr: 0.00010000 | Time: 8.78s\n",
      "[415/6000] Iteration: 16590 | Loss: 0.0013 | PSNR: 28.8994 | lr: 0.00010000 | Time: 8.76s\n",
      "[415/6000] Iteration: 16600 | Loss: 0.0006 | PSNR: 32.0910 | lr: 0.00010000 | Time: 8.86s\n",
      "[416/6000] Iteration: 16610 | Loss: 0.0020 | PSNR: 27.0988 | lr: 0.00010000 | Time: 8.75s\n",
      "[416/6000] Iteration: 16620 | Loss: 0.0010 | PSNR: 29.8234 | lr: 0.00010000 | Time: 8.86s\n",
      "[416/6000] Iteration: 16630 | Loss: 0.0006 | PSNR: 31.9373 | lr: 0.00010000 | Time: 8.96s\n",
      "[416/6000] Iteration: 16640 | Loss: 0.0008 | PSNR: 30.9262 | lr: 0.00010000 | Time: 8.92s\n",
      "[417/6000] Iteration: 16650 | Loss: 0.0015 | PSNR: 28.2312 | lr: 0.00010000 | Time: 8.80s\n",
      "[417/6000] Iteration: 16660 | Loss: 0.0011 | PSNR: 29.6827 | lr: 0.00010000 | Time: 8.78s\n",
      "[417/6000] Iteration: 16670 | Loss: 0.0010 | PSNR: 29.8119 | lr: 0.00010000 | Time: 8.89s\n",
      "[417/6000] Iteration: 16680 | Loss: 0.0008 | PSNR: 31.0264 | lr: 0.00010000 | Time: 8.79s\n",
      "[418/6000] Iteration: 16690 | Loss: 0.0009 | PSNR: 30.5543 | lr: 0.00010000 | Time: 8.76s\n",
      "[418/6000] Iteration: 16700 | Loss: 0.0010 | PSNR: 30.0564 | lr: 0.00010000 | Time: 8.84s\n",
      "[418/6000] Iteration: 16710 | Loss: 0.0012 | PSNR: 29.3823 | lr: 0.00010000 | Time: 8.92s\n",
      "[418/6000] Iteration: 16720 | Loss: 0.0009 | PSNR: 30.2590 | lr: 0.00010000 | Time: 8.77s\n",
      "[419/6000] Iteration: 16730 | Loss: 0.0014 | PSNR: 28.5968 | lr: 0.00010000 | Time: 8.88s\n",
      "[419/6000] Iteration: 16740 | Loss: 0.0010 | PSNR: 30.0551 | lr: 0.00010000 | Time: 8.84s\n",
      "[419/6000] Iteration: 16750 | Loss: 0.0005 | PSNR: 32.7427 | lr: 0.00010000 | Time: 8.80s\n",
      "[419/6000] Iteration: 16760 | Loss: 0.0010 | PSNR: 30.1137 | lr: 0.00010000 | Time: 8.83s\n",
      "[420/6000] Iteration: 16770 | Loss: 0.0023 | PSNR: 26.3528 | lr: 0.00010000 | Time: 8.88s\n",
      "[420/6000] Iteration: 16780 | Loss: 0.0009 | PSNR: 30.2823 | lr: 0.00010000 | Time: 8.88s\n",
      "[420/6000] Iteration: 16790 | Loss: 0.0016 | PSNR: 28.0158 | lr: 0.00010000 | Time: 8.91s\n",
      "[420/6000] Iteration: 16800 | Loss: 0.0010 | PSNR: 30.1738 | lr: 0.00010000 | Time: 8.83s\n",
      "[421/6000] Iteration: 16810 | Loss: 0.0010 | PSNR: 29.9087 | lr: 0.00010000 | Time: 8.86s\n",
      "[421/6000] Iteration: 16820 | Loss: 0.0016 | PSNR: 28.0121 | lr: 0.00010000 | Time: 8.87s\n",
      "[421/6000] Iteration: 16830 | Loss: 0.0009 | PSNR: 30.3610 | lr: 0.00010000 | Time: 8.78s\n",
      "[421/6000] Iteration: 16840 | Loss: 0.0013 | PSNR: 28.9402 | lr: 0.00010000 | Time: 8.82s\n",
      "[422/6000] Iteration: 16850 | Loss: 0.0018 | PSNR: 27.5346 | lr: 0.00010000 | Time: 8.87s\n",
      "[422/6000] Iteration: 16860 | Loss: 0.0012 | PSNR: 29.2028 | lr: 0.00010000 | Time: 8.85s\n",
      "[422/6000] Iteration: 16870 | Loss: 0.0011 | PSNR: 29.7305 | lr: 0.00010000 | Time: 8.89s\n",
      "[422/6000] Iteration: 16880 | Loss: 0.0016 | PSNR: 27.8450 | lr: 0.00010000 | Time: 8.93s\n",
      "[423/6000] Iteration: 16890 | Loss: 0.0009 | PSNR: 30.6629 | lr: 0.00010000 | Time: 8.81s\n",
      "[423/6000] Iteration: 16900 | Loss: 0.0006 | PSNR: 31.9259 | lr: 0.00010000 | Time: 8.89s\n",
      "[423/6000] Iteration: 16910 | Loss: 0.0006 | PSNR: 32.0050 | lr: 0.00010000 | Time: 8.88s\n",
      "[423/6000] Iteration: 16920 | Loss: 0.0008 | PSNR: 31.0576 | lr: 0.00010000 | Time: 8.82s\n",
      "[424/6000] Iteration: 16930 | Loss: 0.0015 | PSNR: 28.2714 | lr: 0.00010000 | Time: 8.79s\n",
      "[424/6000] Iteration: 16940 | Loss: 0.0011 | PSNR: 29.6367 | lr: 0.00010000 | Time: 8.82s\n",
      "[424/6000] Iteration: 16950 | Loss: 0.0007 | PSNR: 31.5441 | lr: 0.00010000 | Time: 8.82s\n",
      "[424/6000] Iteration: 16960 | Loss: 0.0006 | PSNR: 32.0357 | lr: 0.00010000 | Time: 8.85s\n",
      "[425/6000] Iteration: 16970 | Loss: 0.0010 | PSNR: 30.0946 | lr: 0.00010000 | Time: 8.79s\n",
      "[425/6000] Iteration: 16980 | Loss: 0.0011 | PSNR: 29.7015 | lr: 0.00010000 | Time: 8.82s\n",
      "[425/6000] Iteration: 16990 | Loss: 0.0007 | PSNR: 31.5796 | lr: 0.00010000 | Time: 8.88s\n",
      "[425/6000] Iteration: 17000 | Loss: 0.0011 | PSNR: 29.6714 | lr: 0.00010000 | Time: 8.84s\n",
      "[426/6000] Iteration: 17010 | Loss: 0.0008 | PSNR: 31.0369 | lr: 0.00010000 | Time: 8.85s\n",
      "[426/6000] Iteration: 17020 | Loss: 0.0008 | PSNR: 30.7567 | lr: 0.00010000 | Time: 8.84s\n",
      "[426/6000] Iteration: 17030 | Loss: 0.0008 | PSNR: 30.9443 | lr: 0.00010000 | Time: 8.79s\n",
      "[426/6000] Iteration: 17040 | Loss: 0.0008 | PSNR: 30.9671 | lr: 0.00010000 | Time: 8.82s\n",
      "[427/6000] Iteration: 17050 | Loss: 0.0007 | PSNR: 31.5731 | lr: 0.00010000 | Time: 8.83s\n",
      "[427/6000] Iteration: 17060 | Loss: 0.0013 | PSNR: 28.7167 | lr: 0.00010000 | Time: 8.88s\n",
      "[427/6000] Iteration: 17070 | Loss: 0.0013 | PSNR: 28.7808 | lr: 0.00010000 | Time: 8.79s\n",
      "[427/6000] Iteration: 17080 | Loss: 0.0008 | PSNR: 30.8370 | lr: 0.00010000 | Time: 8.85s\n",
      "[428/6000] Iteration: 17090 | Loss: 0.0009 | PSNR: 30.6823 | lr: 0.00010000 | Time: 8.87s\n",
      "[428/6000] Iteration: 17100 | Loss: 0.0008 | PSNR: 30.7596 | lr: 0.00010000 | Time: 8.82s\n",
      "[428/6000] Iteration: 17110 | Loss: 0.0009 | PSNR: 30.3212 | lr: 0.00010000 | Time: 8.91s\n",
      "[428/6000] Iteration: 17120 | Loss: 0.0007 | PSNR: 31.6083 | lr: 0.00010000 | Time: 8.87s\n",
      "[429/6000] Iteration: 17130 | Loss: 0.0007 | PSNR: 31.7534 | lr: 0.00010000 | Time: 8.90s\n",
      "[429/6000] Iteration: 17140 | Loss: 0.0008 | PSNR: 31.1925 | lr: 0.00010000 | Time: 8.78s\n",
      "[429/6000] Iteration: 17150 | Loss: 0.0028 | PSNR: 25.5886 | lr: 0.00010000 | Time: 8.80s\n",
      "[429/6000] Iteration: 17160 | Loss: 0.0010 | PSNR: 30.1636 | lr: 0.00010000 | Time: 8.83s\n",
      "[430/6000] Iteration: 17170 | Loss: 0.0020 | PSNR: 27.0824 | lr: 0.00010000 | Time: 8.82s\n",
      "[430/6000] Iteration: 17180 | Loss: 0.0012 | PSNR: 29.3699 | lr: 0.00010000 | Time: 8.86s\n",
      "[430/6000] Iteration: 17190 | Loss: 0.0006 | PSNR: 32.1147 | lr: 0.00010000 | Time: 8.82s\n",
      "[430/6000] Iteration: 17200 | Loss: 0.0013 | PSNR: 28.9746 | lr: 0.00010000 | Time: 8.82s\n",
      "[431/6000] Iteration: 17210 | Loss: 0.0012 | PSNR: 29.0829 | lr: 0.00010000 | Time: 8.91s\n",
      "[431/6000] Iteration: 17220 | Loss: 0.0014 | PSNR: 28.4121 | lr: 0.00010000 | Time: 8.81s\n",
      "[431/6000] Iteration: 17230 | Loss: 0.0007 | PSNR: 31.4815 | lr: 0.00010000 | Time: 8.81s\n",
      "[431/6000] Iteration: 17240 | Loss: 0.0015 | PSNR: 28.1617 | lr: 0.00010000 | Time: 8.80s\n",
      "[432/6000] Iteration: 17250 | Loss: 0.0010 | PSNR: 29.8356 | lr: 0.00010000 | Time: 8.78s\n",
      "[432/6000] Iteration: 17260 | Loss: 0.0008 | PSNR: 30.9945 | lr: 0.00010000 | Time: 8.80s\n",
      "[432/6000] Iteration: 17270 | Loss: 0.0006 | PSNR: 32.1140 | lr: 0.00010000 | Time: 8.82s\n",
      "[432/6000] Iteration: 17280 | Loss: 0.0006 | PSNR: 32.0515 | lr: 0.00010000 | Time: 8.79s\n",
      "[433/6000] Iteration: 17290 | Loss: 0.0012 | PSNR: 29.3576 | lr: 0.00010000 | Time: 8.79s\n",
      "[433/6000] Iteration: 17300 | Loss: 0.0011 | PSNR: 29.5642 | lr: 0.00010000 | Time: 8.92s\n",
      "[433/6000] Iteration: 17310 | Loss: 0.0010 | PSNR: 29.8938 | lr: 0.00010000 | Time: 8.83s\n",
      "[433/6000] Iteration: 17320 | Loss: 0.0011 | PSNR: 29.6427 | lr: 0.00010000 | Time: 8.81s\n",
      "[434/6000] Iteration: 17330 | Loss: 0.0011 | PSNR: 29.6342 | lr: 0.00010000 | Time: 8.82s\n",
      "[434/6000] Iteration: 17340 | Loss: 0.0011 | PSNR: 29.4699 | lr: 0.00010000 | Time: 8.82s\n",
      "[434/6000] Iteration: 17350 | Loss: 0.0010 | PSNR: 30.0752 | lr: 0.00010000 | Time: 8.82s\n",
      "[434/6000] Iteration: 17360 | Loss: 0.0010 | PSNR: 29.9532 | lr: 0.00010000 | Time: 8.82s\n",
      "[435/6000] Iteration: 17370 | Loss: 0.0011 | PSNR: 29.7414 | lr: 0.00010000 | Time: 8.85s\n",
      "[435/6000] Iteration: 17380 | Loss: 0.0009 | PSNR: 30.6559 | lr: 0.00010000 | Time: 8.79s\n",
      "[435/6000] Iteration: 17390 | Loss: 0.0016 | PSNR: 27.9944 | lr: 0.00010000 | Time: 8.90s\n",
      "[435/6000] Iteration: 17400 | Loss: 0.0010 | PSNR: 29.7961 | lr: 0.00010000 | Time: 8.83s\n",
      "[436/6000] Iteration: 17410 | Loss: 0.0007 | PSNR: 31.3416 | lr: 0.00010000 | Time: 8.90s\n",
      "[436/6000] Iteration: 17420 | Loss: 0.0010 | PSNR: 29.9036 | lr: 0.00010000 | Time: 8.78s\n",
      "[436/6000] Iteration: 17430 | Loss: 0.0005 | PSNR: 32.7710 | lr: 0.00010000 | Time: 8.81s\n",
      "[436/6000] Iteration: 17440 | Loss: 0.0009 | PSNR: 30.3486 | lr: 0.00010000 | Time: 8.89s\n",
      "[437/6000] Iteration: 17450 | Loss: 0.0004 | PSNR: 34.0411 | lr: 0.00010000 | Time: 8.90s\n",
      "[437/6000] Iteration: 17460 | Loss: 0.0008 | PSNR: 31.0225 | lr: 0.00010000 | Time: 8.80s\n",
      "[437/6000] Iteration: 17470 | Loss: 0.0008 | PSNR: 30.7446 | lr: 0.00010000 | Time: 8.78s\n",
      "[437/6000] Iteration: 17480 | Loss: 0.0012 | PSNR: 29.3096 | lr: 0.00010000 | Time: 8.89s\n",
      "[438/6000] Iteration: 17490 | Loss: 0.0010 | PSNR: 29.9835 | lr: 0.00010000 | Time: 8.80s\n",
      "[438/6000] Iteration: 17500 | Loss: 0.0020 | PSNR: 27.0958 | lr: 0.00010000 | Time: 8.82s\n",
      "[438/6000] Iteration: 17510 | Loss: 0.0005 | PSNR: 33.2643 | lr: 0.00010000 | Time: 8.86s\n",
      "[438/6000] Iteration: 17520 | Loss: 0.0009 | PSNR: 30.3087 | lr: 0.00010000 | Time: 8.85s\n",
      "[439/6000] Iteration: 17530 | Loss: 0.0021 | PSNR: 26.8490 | lr: 0.00010000 | Time: 8.77s\n",
      "[439/6000] Iteration: 17540 | Loss: 0.0011 | PSNR: 29.6932 | lr: 0.00010000 | Time: 8.96s\n",
      "[439/6000] Iteration: 17550 | Loss: 0.0016 | PSNR: 27.8520 | lr: 0.00010000 | Time: 8.85s\n",
      "[439/6000] Iteration: 17560 | Loss: 0.0015 | PSNR: 28.2680 | lr: 0.00010000 | Time: 9.80s\n",
      "[440/6000] Iteration: 17570 | Loss: 0.0022 | PSNR: 26.6340 | lr: 0.00010000 | Time: 8.80s\n",
      "[440/6000] Iteration: 17580 | Loss: 0.0009 | PSNR: 30.3077 | lr: 0.00010000 | Time: 8.91s\n",
      "[440/6000] Iteration: 17590 | Loss: 0.0010 | PSNR: 29.9338 | lr: 0.00010000 | Time: 8.80s\n",
      "[440/6000] Iteration: 17600 | Loss: 0.0021 | PSNR: 26.7523 | lr: 0.00010000 | Time: 8.76s\n",
      "[441/6000] Iteration: 17610 | Loss: 0.0010 | PSNR: 29.8730 | lr: 0.00010000 | Time: 8.90s\n",
      "[441/6000] Iteration: 17620 | Loss: 0.0011 | PSNR: 29.7063 | lr: 0.00010000 | Time: 8.87s\n",
      "[441/6000] Iteration: 17630 | Loss: 0.0009 | PSNR: 30.4494 | lr: 0.00010000 | Time: 8.81s\n",
      "[441/6000] Iteration: 17640 | Loss: 0.0012 | PSNR: 29.3356 | lr: 0.00010000 | Time: 8.75s\n",
      "[442/6000] Iteration: 17650 | Loss: 0.0007 | PSNR: 31.6351 | lr: 0.00010000 | Time: 8.86s\n",
      "[442/6000] Iteration: 17660 | Loss: 0.0012 | PSNR: 29.0601 | lr: 0.00010000 | Time: 8.83s\n",
      "[442/6000] Iteration: 17670 | Loss: 0.0005 | PSNR: 33.3675 | lr: 0.00010000 | Time: 8.85s\n",
      "[442/6000] Iteration: 17680 | Loss: 0.0009 | PSNR: 30.2645 | lr: 0.00010000 | Time: 8.91s\n",
      "[443/6000] Iteration: 17690 | Loss: 0.0005 | PSNR: 33.1931 | lr: 0.00010000 | Time: 8.91s\n",
      "[443/6000] Iteration: 17700 | Loss: 0.0024 | PSNR: 26.2443 | lr: 0.00010000 | Time: 8.80s\n",
      "[443/6000] Iteration: 17710 | Loss: 0.0008 | PSNR: 30.7873 | lr: 0.00010000 | Time: 8.91s\n",
      "[443/6000] Iteration: 17720 | Loss: 0.0005 | PSNR: 32.9729 | lr: 0.00010000 | Time: 8.84s\n",
      "[444/6000] Iteration: 17730 | Loss: 0.0009 | PSNR: 30.3068 | lr: 0.00010000 | Time: 8.88s\n",
      "[444/6000] Iteration: 17740 | Loss: 0.0008 | PSNR: 30.8226 | lr: 0.00010000 | Time: 8.85s\n",
      "[444/6000] Iteration: 17750 | Loss: 0.0009 | PSNR: 30.2609 | lr: 0.00010000 | Time: 8.95s\n",
      "[444/6000] Iteration: 17760 | Loss: 0.0010 | PSNR: 29.9650 | lr: 0.00010000 | Time: 8.88s\n",
      "[445/6000] Iteration: 17770 | Loss: 0.0018 | PSNR: 27.5304 | lr: 0.00010000 | Time: 8.84s\n",
      "[445/6000] Iteration: 17780 | Loss: 0.0015 | PSNR: 28.2465 | lr: 0.00010000 | Time: 8.79s\n",
      "[445/6000] Iteration: 17790 | Loss: 0.0010 | PSNR: 29.8657 | lr: 0.00010000 | Time: 9.02s\n",
      "[445/6000] Iteration: 17800 | Loss: 0.0006 | PSNR: 32.3642 | lr: 0.00010000 | Time: 8.85s\n",
      "[446/6000] Iteration: 17810 | Loss: 0.0013 | PSNR: 28.8203 | lr: 0.00010000 | Time: 8.85s\n",
      "[446/6000] Iteration: 17820 | Loss: 0.0008 | PSNR: 31.1089 | lr: 0.00010000 | Time: 10.05s\n",
      "[446/6000] Iteration: 17830 | Loss: 0.0006 | PSNR: 31.8797 | lr: 0.00010000 | Time: 13.97s\n",
      "[446/6000] Iteration: 17840 | Loss: 0.0008 | PSNR: 30.8990 | lr: 0.00010000 | Time: 13.27s\n",
      "[447/6000] Iteration: 17850 | Loss: 0.0010 | PSNR: 29.9064 | lr: 0.00010000 | Time: 13.11s\n",
      "[447/6000] Iteration: 17860 | Loss: 0.0018 | PSNR: 27.5307 | lr: 0.00010000 | Time: 13.23s\n",
      "[447/6000] Iteration: 17870 | Loss: 0.0007 | PSNR: 31.6003 | lr: 0.00010000 | Time: 13.27s\n",
      "[447/6000] Iteration: 17880 | Loss: 0.0010 | PSNR: 29.8642 | lr: 0.00010000 | Time: 13.28s\n",
      "[448/6000] Iteration: 17890 | Loss: 0.0005 | PSNR: 32.8312 | lr: 0.00010000 | Time: 13.36s\n",
      "[448/6000] Iteration: 17900 | Loss: 0.0023 | PSNR: 26.4255 | lr: 0.00010000 | Time: 13.15s\n",
      "[448/6000] Iteration: 17910 | Loss: 0.0016 | PSNR: 28.0035 | lr: 0.00010000 | Time: 13.01s\n",
      "[448/6000] Iteration: 17920 | Loss: 0.0013 | PSNR: 28.8762 | lr: 0.00010000 | Time: 12.89s\n",
      "[449/6000] Iteration: 17930 | Loss: 0.0012 | PSNR: 29.2558 | lr: 0.00010000 | Time: 12.98s\n",
      "[449/6000] Iteration: 17940 | Loss: 0.0023 | PSNR: 26.3411 | lr: 0.00010000 | Time: 13.54s\n",
      "[449/6000] Iteration: 17950 | Loss: 0.0011 | PSNR: 29.4243 | lr: 0.00010000 | Time: 13.01s\n",
      "[449/6000] Iteration: 17960 | Loss: 0.0009 | PSNR: 30.6936 | lr: 0.00010000 | Time: 13.33s\n",
      "[450/6000] Iteration: 17970 | Loss: 0.0009 | PSNR: 30.5086 | lr: 0.00010000 | Time: 12.73s\n",
      "[450/6000] Iteration: 17980 | Loss: 0.0007 | PSNR: 31.6526 | lr: 0.00010000 | Time: 13.36s\n",
      "[450/6000] Iteration: 17990 | Loss: 0.0010 | PSNR: 30.0251 | lr: 0.00010000 | Time: 12.97s\n",
      "[450/6000] Iteration: 18000 | Loss: 0.0011 | PSNR: 29.6172 | lr: 0.00010000 | Time: 13.07s\n",
      "0.png 28.748929977416992\n",
      "1.png 29.736404418945312\n",
      "2.png 27.911413192749023\n",
      "3.png 28.31979751586914\n",
      "4.png 30.341655731201172\n",
      "5.png 29.342023849487305\n",
      "6.png 26.426145553588867\n",
      "7.png 30.44778823852539\n",
      "8.png 20.098207473754883\n",
      "9.png 27.155961990356445\n",
      "10.png 30.713653564453125\n",
      "11.png 24.790241241455078\n",
      "12.png 29.348962783813477\n",
      "13.png 27.132312774658203\n",
      "14.png 26.85938262939453\n",
      "15.png 27.749061584472656\n",
      "16.png 30.088014602661133\n",
      "17.png 26.232460021972656\n",
      "18.png 28.41742515563965\n",
      "19.png 27.410829544067383\n",
      "20.png 24.44605255126953\n",
      "21.png 27.342281341552734\n",
      "22.png 24.5238094329834\n",
      "23.png 24.036972045898438\n",
      "24.png 28.97576141357422\n",
      "25.png 25.83379364013672\n",
      "26.png 30.158864974975586\n",
      "27.png 22.963926315307617\n",
      "28.png 25.734024047851562\n",
      "29.png 24.083097457885742\n",
      "30.png 32.78273010253906\n",
      "31.png 28.743534088134766\n",
      "32.png 26.39083480834961\n",
      "33.png 30.64885711669922\n",
      "34.png 26.98735809326172\n",
      "35.png 27.642620086669922\n",
      "36.png 29.37444305419922\n",
      "37.png 29.338380813598633\n",
      "38.png 27.541568756103516\n",
      "39.png 25.415523529052734\n",
      "Validation PSNR:  27.505877637863158\n",
      "[451/6000] Iteration: 18010 | Loss: 0.0013 | PSNR: 28.7607 | lr: 0.00010000 | Time: 36.78s\n",
      "[451/6000] Iteration: 18020 | Loss: 0.0012 | PSNR: 29.3711 | lr: 0.00010000 | Time: 13.66s\n",
      "[451/6000] Iteration: 18030 | Loss: 0.0008 | PSNR: 31.2439 | lr: 0.00010000 | Time: 13.09s\n",
      "[451/6000] Iteration: 18040 | Loss: 0.0010 | PSNR: 29.9386 | lr: 0.00010000 | Time: 12.82s\n",
      "[452/6000] Iteration: 18050 | Loss: 0.0009 | PSNR: 30.4813 | lr: 0.00010000 | Time: 13.38s\n",
      "[452/6000] Iteration: 18060 | Loss: 0.0014 | PSNR: 28.5344 | lr: 0.00010000 | Time: 13.76s\n",
      "[452/6000] Iteration: 18070 | Loss: 0.0009 | PSNR: 30.2685 | lr: 0.00010000 | Time: 12.97s\n",
      "[452/6000] Iteration: 18080 | Loss: 0.0023 | PSNR: 26.4112 | lr: 0.00010000 | Time: 12.98s\n",
      "[453/6000] Iteration: 18090 | Loss: 0.0009 | PSNR: 30.2664 | lr: 0.00010000 | Time: 13.75s\n",
      "[453/6000] Iteration: 18100 | Loss: 0.0010 | PSNR: 29.8799 | lr: 0.00010000 | Time: 13.04s\n",
      "[453/6000] Iteration: 18110 | Loss: 0.0008 | PSNR: 31.1360 | lr: 0.00010000 | Time: 13.59s\n",
      "[453/6000] Iteration: 18120 | Loss: 0.0008 | PSNR: 31.0059 | lr: 0.00010000 | Time: 13.33s\n",
      "[454/6000] Iteration: 18130 | Loss: 0.0014 | PSNR: 28.6913 | lr: 0.00010000 | Time: 12.80s\n",
      "[454/6000] Iteration: 18140 | Loss: 0.0012 | PSNR: 29.1094 | lr: 0.00010000 | Time: 13.68s\n",
      "[454/6000] Iteration: 18150 | Loss: 0.0007 | PSNR: 31.2653 | lr: 0.00010000 | Time: 13.56s\n",
      "[454/6000] Iteration: 18160 | Loss: 0.0005 | PSNR: 33.0921 | lr: 0.00010000 | Time: 12.92s\n",
      "[455/6000] Iteration: 18170 | Loss: 0.0008 | PSNR: 30.7779 | lr: 0.00010000 | Time: 13.80s\n",
      "[455/6000] Iteration: 18180 | Loss: 0.0015 | PSNR: 28.1639 | lr: 0.00010000 | Time: 13.37s\n",
      "[455/6000] Iteration: 18190 | Loss: 0.0007 | PSNR: 31.3969 | lr: 0.00010000 | Time: 12.86s\n",
      "[455/6000] Iteration: 18200 | Loss: 0.0019 | PSNR: 27.2091 | lr: 0.00010000 | Time: 13.40s\n",
      "[456/6000] Iteration: 18210 | Loss: 0.0015 | PSNR: 28.1829 | lr: 0.00010000 | Time: 13.19s\n",
      "[456/6000] Iteration: 18220 | Loss: 0.0010 | PSNR: 30.1074 | lr: 0.00010000 | Time: 13.43s\n",
      "[456/6000] Iteration: 18230 | Loss: 0.0009 | PSNR: 30.2603 | lr: 0.00010000 | Time: 12.99s\n",
      "[456/6000] Iteration: 18240 | Loss: 0.0006 | PSNR: 32.0612 | lr: 0.00010000 | Time: 13.54s\n",
      "[457/6000] Iteration: 18250 | Loss: 0.0013 | PSNR: 28.8394 | lr: 0.00010000 | Time: 13.19s\n",
      "[457/6000] Iteration: 18260 | Loss: 0.0013 | PSNR: 28.9260 | lr: 0.00010000 | Time: 13.24s\n",
      "[457/6000] Iteration: 18270 | Loss: 0.0009 | PSNR: 30.2277 | lr: 0.00010000 | Time: 13.12s\n",
      "[457/6000] Iteration: 18280 | Loss: 0.0021 | PSNR: 26.7040 | lr: 0.00010000 | Time: 9.08s\n",
      "[458/6000] Iteration: 18290 | Loss: 0.0008 | PSNR: 30.7310 | lr: 0.00010000 | Time: 8.87s\n",
      "[458/6000] Iteration: 18300 | Loss: 0.0020 | PSNR: 26.9042 | lr: 0.00010000 | Time: 8.95s\n",
      "[458/6000] Iteration: 18310 | Loss: 0.0009 | PSNR: 30.2656 | lr: 0.00010000 | Time: 8.93s\n",
      "[458/6000] Iteration: 18320 | Loss: 0.0013 | PSNR: 28.8430 | lr: 0.00010000 | Time: 8.97s\n",
      "[459/6000] Iteration: 18330 | Loss: 0.0011 | PSNR: 29.4265 | lr: 0.00010000 | Time: 9.02s\n",
      "[459/6000] Iteration: 18340 | Loss: 0.0015 | PSNR: 28.3453 | lr: 0.00010000 | Time: 8.87s\n",
      "[459/6000] Iteration: 18350 | Loss: 0.0006 | PSNR: 32.1920 | lr: 0.00010000 | Time: 9.04s\n",
      "[459/6000] Iteration: 18360 | Loss: 0.0018 | PSNR: 27.3955 | lr: 0.00010000 | Time: 8.87s\n",
      "[460/6000] Iteration: 18370 | Loss: 0.0010 | PSNR: 30.0111 | lr: 0.00010000 | Time: 8.85s\n",
      "[460/6000] Iteration: 18380 | Loss: 0.0007 | PSNR: 31.8549 | lr: 0.00010000 | Time: 8.94s\n",
      "[460/6000] Iteration: 18390 | Loss: 0.0016 | PSNR: 28.0417 | lr: 0.00010000 | Time: 8.83s\n",
      "[460/6000] Iteration: 18400 | Loss: 0.0014 | PSNR: 28.4282 | lr: 0.00010000 | Time: 8.90s\n",
      "[461/6000] Iteration: 18410 | Loss: 0.0016 | PSNR: 28.0377 | lr: 0.00010000 | Time: 8.94s\n",
      "[461/6000] Iteration: 18420 | Loss: 0.0008 | PSNR: 31.2414 | lr: 0.00010000 | Time: 8.86s\n",
      "[461/6000] Iteration: 18430 | Loss: 0.0024 | PSNR: 26.1330 | lr: 0.00010000 | Time: 8.88s\n",
      "[461/6000] Iteration: 18440 | Loss: 0.0071 | PSNR: 21.4602 | lr: 0.00010000 | Time: 8.76s\n",
      "[462/6000] Iteration: 18450 | Loss: 0.0013 | PSNR: 29.0111 | lr: 0.00010000 | Time: 8.86s\n",
      "[462/6000] Iteration: 18460 | Loss: 0.0011 | PSNR: 29.7579 | lr: 0.00010000 | Time: 8.77s\n",
      "[462/6000] Iteration: 18470 | Loss: 0.0010 | PSNR: 29.8877 | lr: 0.00010000 | Time: 8.82s\n",
      "[462/6000] Iteration: 18480 | Loss: 0.0010 | PSNR: 29.9824 | lr: 0.00010000 | Time: 9.14s\n",
      "[463/6000] Iteration: 18490 | Loss: 0.0007 | PSNR: 31.6356 | lr: 0.00010000 | Time: 8.98s\n",
      "[463/6000] Iteration: 18500 | Loss: 0.0009 | PSNR: 30.3956 | lr: 0.00010000 | Time: 8.83s\n",
      "[463/6000] Iteration: 18510 | Loss: 0.0014 | PSNR: 28.6322 | lr: 0.00010000 | Time: 8.83s\n",
      "[463/6000] Iteration: 18520 | Loss: 0.0012 | PSNR: 29.1110 | lr: 0.00010000 | Time: 8.82s\n",
      "[464/6000] Iteration: 18530 | Loss: 0.0015 | PSNR: 28.2890 | lr: 0.00010000 | Time: 8.92s\n",
      "[464/6000] Iteration: 18540 | Loss: 0.0010 | PSNR: 29.8337 | lr: 0.00010000 | Time: 8.88s\n",
      "[464/6000] Iteration: 18550 | Loss: 0.0006 | PSNR: 32.1690 | lr: 0.00010000 | Time: 8.80s\n",
      "[464/6000] Iteration: 18560 | Loss: 0.0009 | PSNR: 30.5569 | lr: 0.00010000 | Time: 8.90s\n",
      "[465/6000] Iteration: 18570 | Loss: 0.0009 | PSNR: 30.2233 | lr: 0.00010000 | Time: 8.95s\n",
      "[465/6000] Iteration: 18580 | Loss: 0.0008 | PSNR: 31.0104 | lr: 0.00010000 | Time: 8.88s\n",
      "[465/6000] Iteration: 18590 | Loss: 0.0030 | PSNR: 25.2848 | lr: 0.00010000 | Time: 8.86s\n",
      "[465/6000] Iteration: 18600 | Loss: 0.0012 | PSNR: 29.2060 | lr: 0.00010000 | Time: 8.96s\n",
      "[466/6000] Iteration: 18610 | Loss: 0.0009 | PSNR: 30.2616 | lr: 0.00010000 | Time: 8.81s\n",
      "[466/6000] Iteration: 18620 | Loss: 0.0017 | PSNR: 27.7306 | lr: 0.00010000 | Time: 8.77s\n",
      "[466/6000] Iteration: 18630 | Loss: 0.0012 | PSNR: 29.0886 | lr: 0.00010000 | Time: 8.89s\n",
      "[466/6000] Iteration: 18640 | Loss: 0.0011 | PSNR: 29.5047 | lr: 0.00010000 | Time: 8.79s\n"
     ]
    }
   ],
   "source": [
    "train_main(params, False) # True if training for first time, False if there's already saved ckpt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test(params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ideal Priors training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "params = parse_params(False)\n",
    "params['ckpt_dir'] = './ckptsIdeal'\n",
    "params['eval_out'] = './outputs_ideal'\n",
    "params['stats_dir'] = './stats_ideal'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tue Oct 29 13:48:24 2024       \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 555.42.06              Driver Version: 555.42.06      CUDA Version: 12.5     |\n",
      "|-----------------------------------------+------------------------+----------------------+\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n",
      "|                                         |                        |               MIG M. |\n",
      "|=========================================+========================+======================|\n",
      "|   0  NVIDIA GeForce RTX 3060        Off |   00000000:01:00.0 Off |                  N/A |\n",
      "| 33%   51C    P0             35W /  170W |   10042MiB /  12288MiB |      0%      Default |\n",
      "|                                         |                        |                  N/A |\n",
      "+-----------------------------------------+------------------------+----------------------+\n",
      "                                                                                         \n",
      "+-----------------------------------------------------------------------------------------+\n",
      "| Processes:                                                                              |\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n",
      "|        ID   ID                                                               Usage      |\n",
      "|=========================================================================================|\n",
      "|    0   N/A  N/A      1945      G   /usr/lib/xorg/Xorg                             36MiB |\n",
      "|    0   N/A  N/A      2084    C+G   ...libexec/gnome-remote-desktop-daemon        104MiB |\n",
      "|    0   N/A  N/A    212809      G   /usr/lib/xorg/Xorg                             82MiB |\n",
      "|    0   N/A  N/A    251576      G   /usr/libexec/gnome-shell-portal-helper          2MiB |\n",
      "|    0   N/A  N/A    383240      G   gnome-control-center                            2MiB |\n",
      "|    0   N/A  N/A    384142      G   /usr/lib/xorg/Xorg                            155MiB |\n",
      "|    0   N/A  N/A    384354      G   /usr/bin/gnome-shell                           59MiB |\n",
      "|    0   N/A  N/A    509097      G   ...irefox/4848/usr/lib/firefox/firefox        249MiB |\n",
      "|    0   N/A  N/A    515719      G   ...erProcess --variations-seed-version         46MiB |\n",
      "|    0   N/A  N/A    545750      G   ...irefox/4848/usr/lib/firefox/firefox        115MiB |\n",
      "|    0   N/A  N/A    550249      C   ...anaconda3/envs/rohanpv21/bin/python       8808MiB |\n",
      "+-----------------------------------------------------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training parameters: \n",
      "  cuda = True\n",
      "  ckpt_interval = 600\n",
      "  ckpt_dir = ./ckptsIdeal\n",
      "  stats_dir = ./stats_ideal\n",
      "  epochs = 6000\n",
      "  learning_rate = 0.0001\n",
      "  summary_interval = 10\n",
      "  batch_size = 4\n",
      "  train_data_dir = ./Datasets/Mobile-Spec/train\n",
      "  eval_data_dir = ./Datasets/Mobile-Spec/eval\n",
      "  eval_out = ./outputs_ideal\n",
      "  hdr = True\n",
      "  jdm_predict = False\n",
      "  batch_norm = False\n",
      "  input_res = 256\n",
      "  output_res = (512, 512)\n",
      "  spec_size = 16\n",
      "  spec = True\n",
      "  material_mask = True\n",
      "  debugsave = False\n",
      "\n",
      "epochs  4439\n",
      "Loading: ./ckptsIdeal/epoch_4439_iter_44400.0_ideal.pt\n",
      "prev_epochs  4439\n",
      "[4441/6000] Iteration: 177610 | Loss: 0.0002 | PSNR: 37.0617 | lr: 0.00010000 | Time: 8.96s\n",
      "[4441/6000] Iteration: 177620 | Loss: 0.0008 | PSNR: 31.0328 | lr: 0.00010000 | Time: 8.76s\n",
      "[4441/6000] Iteration: 177630 | Loss: 0.0008 | PSNR: 30.7838 | lr: 0.00010000 | Time: 8.83s\n",
      "[4441/6000] Iteration: 177640 | Loss: 0.0005 | PSNR: 33.4374 | lr: 0.00010000 | Time: 8.74s\n",
      "[4442/6000] Iteration: 177650 | Loss: 0.0005 | PSNR: 33.1460 | lr: 0.00010000 | Time: 8.80s\n",
      "[4442/6000] Iteration: 177660 | Loss: 0.0003 | PSNR: 35.3001 | lr: 0.00010000 | Time: 8.78s\n",
      "[4442/6000] Iteration: 177670 | Loss: 0.0003 | PSNR: 35.5372 | lr: 0.00010000 | Time: 8.81s\n",
      "[4442/6000] Iteration: 177680 | Loss: 0.0009 | PSNR: 30.6726 | lr: 0.00010000 | Time: 8.71s\n",
      "[4443/6000] Iteration: 177690 | Loss: 0.0004 | PSNR: 34.2798 | lr: 0.00010000 | Time: 8.70s\n",
      "[4443/6000] Iteration: 177700 | Loss: 0.0008 | PSNR: 30.9177 | lr: 0.00010000 | Time: 8.74s\n",
      "[4443/6000] Iteration: 177710 | Loss: 0.0010 | PSNR: 30.1492 | lr: 0.00010000 | Time: 8.72s\n",
      "[4443/6000] Iteration: 177720 | Loss: 0.0005 | PSNR: 33.0684 | lr: 0.00010000 | Time: 9.67s\n",
      "[4444/6000] Iteration: 177730 | Loss: 0.0003 | PSNR: 35.4624 | lr: 0.00010000 | Time: 9.25s\n",
      "[4444/6000] Iteration: 177740 | Loss: 0.0011 | PSNR: 29.4791 | lr: 0.00010000 | Time: 8.78s\n",
      "[4444/6000] Iteration: 177750 | Loss: 0.0006 | PSNR: 32.1521 | lr: 0.00010000 | Time: 8.73s\n",
      "[4444/6000] Iteration: 177760 | Loss: 0.0007 | PSNR: 31.3842 | lr: 0.00010000 | Time: 8.71s\n",
      "[4445/6000] Iteration: 177770 | Loss: 0.0004 | PSNR: 33.8853 | lr: 0.00010000 | Time: 8.77s\n",
      "[4445/6000] Iteration: 177780 | Loss: 0.0005 | PSNR: 32.9206 | lr: 0.00010000 | Time: 8.78s\n",
      "[4445/6000] Iteration: 177790 | Loss: 0.0008 | PSNR: 31.0169 | lr: 0.00010000 | Time: 8.72s\n",
      "[4445/6000] Iteration: 177800 | Loss: 0.0005 | PSNR: 32.9088 | lr: 0.00010000 | Time: 8.75s\n",
      "[4446/6000] Iteration: 177810 | Loss: 0.0015 | PSNR: 28.1908 | lr: 0.00010000 | Time: 8.77s\n",
      "[4446/6000] Iteration: 177820 | Loss: 0.0003 | PSNR: 34.9586 | lr: 0.00010000 | Time: 8.76s\n",
      "[4446/6000] Iteration: 177830 | Loss: 0.0004 | PSNR: 34.2835 | lr: 0.00010000 | Time: 8.77s\n",
      "[4446/6000] Iteration: 177840 | Loss: 0.0005 | PSNR: 33.4601 | lr: 0.00010000 | Time: 8.79s\n",
      "[4447/6000] Iteration: 177850 | Loss: 0.0003 | PSNR: 35.0309 | lr: 0.00010000 | Time: 8.76s\n",
      "[4447/6000] Iteration: 177860 | Loss: 0.0006 | PSNR: 31.9971 | lr: 0.00010000 | Time: 8.82s\n",
      "[4447/6000] Iteration: 177870 | Loss: 0.0005 | PSNR: 32.7586 | lr: 0.00010000 | Time: 8.81s\n",
      "[4447/6000] Iteration: 177880 | Loss: 0.0006 | PSNR: 31.9038 | lr: 0.00010000 | Time: 8.76s\n",
      "[4448/6000] Iteration: 177890 | Loss: 0.0009 | PSNR: 30.4163 | lr: 0.00010000 | Time: 8.73s\n",
      "[4448/6000] Iteration: 177900 | Loss: 0.0005 | PSNR: 33.0162 | lr: 0.00010000 | Time: 8.76s\n",
      "[4448/6000] Iteration: 177910 | Loss: 0.0004 | PSNR: 33.5835 | lr: 0.00010000 | Time: 8.76s\n",
      "[4448/6000] Iteration: 177920 | Loss: 0.0009 | PSNR: 30.3175 | lr: 0.00010000 | Time: 8.73s\n",
      "[4449/6000] Iteration: 177930 | Loss: 0.0011 | PSNR: 29.5791 | lr: 0.00010000 | Time: 8.73s\n",
      "[4449/6000] Iteration: 177940 | Loss: 0.0010 | PSNR: 29.9707 | lr: 0.00010000 | Time: 8.76s\n",
      "[4449/6000] Iteration: 177950 | Loss: 0.0003 | PSNR: 35.7885 | lr: 0.00010000 | Time: 8.80s\n",
      "[4449/6000] Iteration: 177960 | Loss: 0.0007 | PSNR: 31.6104 | lr: 0.00010000 | Time: 8.78s\n",
      "[4450/6000] Iteration: 177970 | Loss: 0.0009 | PSNR: 30.4997 | lr: 0.00010000 | Time: 8.76s\n",
      "[4450/6000] Iteration: 177980 | Loss: 0.0005 | PSNR: 32.6048 | lr: 0.00010000 | Time: 8.77s\n",
      "[4450/6000] Iteration: 177990 | Loss: 0.0009 | PSNR: 30.5927 | lr: 0.00010000 | Time: 8.80s\n",
      "[4450/6000] Iteration: 178000 | Loss: 0.0009 | PSNR: 30.5756 | lr: 0.00010000 | Time: 8.75s\n",
      "[4451/6000] Iteration: 178010 | Loss: 0.0008 | PSNR: 31.1677 | lr: 0.00010000 | Time: 8.75s\n",
      "[4451/6000] Iteration: 178020 | Loss: 0.0003 | PSNR: 35.3347 | lr: 0.00010000 | Time: 8.76s\n",
      "[4451/6000] Iteration: 178030 | Loss: 0.0005 | PSNR: 33.2885 | lr: 0.00010000 | Time: 8.74s\n",
      "[4451/6000] Iteration: 178040 | Loss: 0.0003 | PSNR: 34.7153 | lr: 0.00010000 | Time: 8.75s\n",
      "[4452/6000] Iteration: 178050 | Loss: 0.0004 | PSNR: 34.1528 | lr: 0.00010000 | Time: 8.76s\n",
      "[4452/6000] Iteration: 178060 | Loss: 0.0006 | PSNR: 31.9071 | lr: 0.00010000 | Time: 8.76s\n",
      "[4452/6000] Iteration: 178070 | Loss: 0.0003 | PSNR: 35.5910 | lr: 0.00010000 | Time: 8.76s\n",
      "[4452/6000] Iteration: 178080 | Loss: 0.0004 | PSNR: 34.1119 | lr: 0.00010000 | Time: 8.74s\n",
      "[4453/6000] Iteration: 178090 | Loss: 0.0004 | PSNR: 34.2090 | lr: 0.00010000 | Time: 8.77s\n",
      "[4453/6000] Iteration: 178100 | Loss: 0.0003 | PSNR: 35.5530 | lr: 0.00010000 | Time: 8.72s\n",
      "[4453/6000] Iteration: 178110 | Loss: 0.0005 | PSNR: 32.6407 | lr: 0.00010000 | Time: 8.77s\n",
      "[4453/6000] Iteration: 178120 | Loss: 0.0004 | PSNR: 33.6332 | lr: 0.00010000 | Time: 8.74s\n",
      "[4454/6000] Iteration: 178130 | Loss: 0.0004 | PSNR: 33.5399 | lr: 0.00010000 | Time: 8.76s\n",
      "[4454/6000] Iteration: 178140 | Loss: 0.0004 | PSNR: 33.4969 | lr: 0.00010000 | Time: 8.72s\n",
      "[4454/6000] Iteration: 178150 | Loss: 0.0006 | PSNR: 32.0971 | lr: 0.00010000 | Time: 8.75s\n",
      "[4454/6000] Iteration: 178160 | Loss: 0.0006 | PSNR: 32.4013 | lr: 0.00010000 | Time: 8.76s\n",
      "[4455/6000] Iteration: 178170 | Loss: 0.0003 | PSNR: 35.7197 | lr: 0.00010000 | Time: 8.72s\n",
      "[4455/6000] Iteration: 178180 | Loss: 0.0002 | PSNR: 36.2837 | lr: 0.00010000 | Time: 8.69s\n",
      "[4455/6000] Iteration: 178190 | Loss: 0.0003 | PSNR: 34.8788 | lr: 0.00010000 | Time: 8.71s\n",
      "[4455/6000] Iteration: 178200 | Loss: 0.0003 | PSNR: 34.6490 | lr: 0.00010000 | Time: 8.80s\n",
      "0.png 27.729846954345703\n",
      "1.png 30.08629608154297\n",
      "2.png 33.22199249267578\n",
      "3.png 32.37466812133789\n",
      "4.png 30.183713912963867\n",
      "5.png 31.619239807128906\n",
      "6.png 26.458507537841797\n",
      "7.png 33.219112396240234\n",
      "8.png 22.634658813476562\n",
      "9.png 28.809646606445312\n",
      "10.png 29.79658317565918\n",
      "11.png 27.946012496948242\n",
      "12.png 29.190446853637695\n",
      "13.png 24.221284866333008\n",
      "14.png 27.142086029052734\n",
      "15.png 25.75263214111328\n",
      "16.png 29.870615005493164\n",
      "17.png 31.063356399536133\n",
      "18.png 30.24114227294922\n",
      "19.png 28.791349411010742\n",
      "20.png 26.729148864746094\n",
      "21.png 26.73628044128418\n",
      "22.png 24.67668342590332\n",
      "23.png 28.21993637084961\n",
      "24.png 26.3992919921875\n",
      "25.png 26.604175567626953\n",
      "26.png 31.82451629638672\n",
      "27.png 31.28583526611328\n",
      "28.png 26.295677185058594\n",
      "29.png 29.75214958190918\n",
      "30.png 29.84479522705078\n",
      "31.png 29.860328674316406\n",
      "32.png 28.673866271972656\n",
      "33.png 31.964569091796875\n",
      "34.png 30.8170166015625\n",
      "35.png 28.056753158569336\n",
      "36.png 31.126192092895508\n",
      "37.png 29.03167724609375\n",
      "38.png 30.58966636657715\n",
      "39.png 27.039226531982422\n",
      "Validation PSNR:  28.89702444076538\n",
      "[4456/6000] Iteration: 178210 | Loss: 0.0005 | PSNR: 32.8752 | lr: 0.00010000 | Time: 29.09s\n",
      "[4456/6000] Iteration: 178220 | Loss: 0.0003 | PSNR: 34.7100 | lr: 0.00010000 | Time: 8.76s\n",
      "[4456/6000] Iteration: 178230 | Loss: 0.0003 | PSNR: 35.6600 | lr: 0.00010000 | Time: 8.75s\n",
      "[4456/6000] Iteration: 178240 | Loss: 0.0003 | PSNR: 35.4015 | lr: 0.00010000 | Time: 8.77s\n",
      "[4457/6000] Iteration: 178250 | Loss: 0.0003 | PSNR: 35.1009 | lr: 0.00010000 | Time: 8.74s\n",
      "[4457/6000] Iteration: 178260 | Loss: 0.0004 | PSNR: 33.4860 | lr: 0.00010000 | Time: 8.79s\n",
      "[4457/6000] Iteration: 178270 | Loss: 0.0002 | PSNR: 36.5904 | lr: 0.00010000 | Time: 8.73s\n",
      "[4457/6000] Iteration: 178280 | Loss: 0.0005 | PSNR: 32.6437 | lr: 0.00010000 | Time: 8.72s\n",
      "[4458/6000] Iteration: 178290 | Loss: 0.0003 | PSNR: 35.1455 | lr: 0.00010000 | Time: 8.72s\n",
      "[4458/6000] Iteration: 178300 | Loss: 0.0003 | PSNR: 34.8335 | lr: 0.00010000 | Time: 8.75s\n",
      "[4458/6000] Iteration: 178310 | Loss: 0.0006 | PSNR: 32.5244 | lr: 0.00010000 | Time: 8.72s\n",
      "[4458/6000] Iteration: 178320 | Loss: 0.0003 | PSNR: 35.7103 | lr: 0.00010000 | Time: 8.76s\n",
      "[4459/6000] Iteration: 178330 | Loss: 0.0003 | PSNR: 35.5613 | lr: 0.00010000 | Time: 8.76s\n",
      "[4459/6000] Iteration: 178340 | Loss: 0.0003 | PSNR: 35.1087 | lr: 0.00010000 | Time: 8.73s\n",
      "[4459/6000] Iteration: 178350 | Loss: 0.0004 | PSNR: 33.4690 | lr: 0.00010000 | Time: 8.74s\n",
      "[4459/6000] Iteration: 178360 | Loss: 0.0003 | PSNR: 35.2927 | lr: 0.00010000 | Time: 8.73s\n",
      "[4460/6000] Iteration: 178370 | Loss: 0.0002 | PSNR: 36.1890 | lr: 0.00010000 | Time: 8.75s\n",
      "[4460/6000] Iteration: 178380 | Loss: 0.0006 | PSNR: 32.4609 | lr: 0.00010000 | Time: 8.79s\n",
      "[4460/6000] Iteration: 178390 | Loss: 0.0004 | PSNR: 34.3734 | lr: 0.00010000 | Time: 8.77s\n",
      "[4460/6000] Iteration: 178400 | Loss: 0.0004 | PSNR: 34.4252 | lr: 0.00010000 | Time: 8.70s\n",
      "[4461/6000] Iteration: 178410 | Loss: 0.0002 | PSNR: 37.7187 | lr: 0.00010000 | Time: 8.70s\n",
      "[4461/6000] Iteration: 178420 | Loss: 0.0001 | PSNR: 38.4369 | lr: 0.00010000 | Time: 8.75s\n",
      "[4461/6000] Iteration: 178430 | Loss: 0.0004 | PSNR: 34.5034 | lr: 0.00010000 | Time: 8.73s\n",
      "[4461/6000] Iteration: 178440 | Loss: 0.0003 | PSNR: 34.7448 | lr: 0.00010000 | Time: 8.80s\n",
      "[4462/6000] Iteration: 178450 | Loss: 0.0003 | PSNR: 34.8232 | lr: 0.00010000 | Time: 8.70s\n",
      "[4462/6000] Iteration: 178460 | Loss: 0.0005 | PSNR: 32.7029 | lr: 0.00010000 | Time: 8.75s\n",
      "[4462/6000] Iteration: 178470 | Loss: 0.0004 | PSNR: 33.5184 | lr: 0.00010000 | Time: 8.79s\n",
      "[4462/6000] Iteration: 178480 | Loss: 0.0005 | PSNR: 33.3111 | lr: 0.00010000 | Time: 8.72s\n",
      "[4463/6000] Iteration: 178490 | Loss: 0.0005 | PSNR: 33.1035 | lr: 0.00010000 | Time: 8.75s\n",
      "[4463/6000] Iteration: 178500 | Loss: 0.0003 | PSNR: 36.0198 | lr: 0.00010000 | Time: 8.73s\n",
      "[4463/6000] Iteration: 178510 | Loss: 0.0004 | PSNR: 34.2819 | lr: 0.00010000 | Time: 8.72s\n",
      "[4463/6000] Iteration: 178520 | Loss: 0.0003 | PSNR: 35.4565 | lr: 0.00010000 | Time: 8.78s\n",
      "[4464/6000] Iteration: 178530 | Loss: 0.0005 | PSNR: 33.2570 | lr: 0.00010000 | Time: 8.77s\n",
      "[4464/6000] Iteration: 178540 | Loss: 0.0003 | PSNR: 34.8741 | lr: 0.00010000 | Time: 8.79s\n",
      "[4464/6000] Iteration: 178550 | Loss: 0.0007 | PSNR: 31.6310 | lr: 0.00010000 | Time: 8.75s\n",
      "[4464/6000] Iteration: 178560 | Loss: 0.0005 | PSNR: 33.1059 | lr: 0.00010000 | Time: 8.78s\n",
      "[4465/6000] Iteration: 178570 | Loss: 0.0004 | PSNR: 34.0962 | lr: 0.00010000 | Time: 8.69s\n",
      "[4465/6000] Iteration: 178580 | Loss: 0.0007 | PSNR: 31.5455 | lr: 0.00010000 | Time: 8.76s\n",
      "[4465/6000] Iteration: 178590 | Loss: 0.0007 | PSNR: 31.5378 | lr: 0.00010000 | Time: 8.77s\n",
      "[4465/6000] Iteration: 178600 | Loss: 0.0007 | PSNR: 31.2819 | lr: 0.00010000 | Time: 8.74s\n",
      "[4466/6000] Iteration: 178610 | Loss: 0.0004 | PSNR: 33.8477 | lr: 0.00010000 | Time: 8.78s\n",
      "[4466/6000] Iteration: 178620 | Loss: 0.0006 | PSNR: 32.4165 | lr: 0.00010000 | Time: 8.73s\n",
      "[4466/6000] Iteration: 178630 | Loss: 0.0004 | PSNR: 34.5032 | lr: 0.00010000 | Time: 8.79s\n",
      "[4466/6000] Iteration: 178640 | Loss: 0.0008 | PSNR: 30.7819 | lr: 0.00010000 | Time: 8.76s\n",
      "[4467/6000] Iteration: 178650 | Loss: 0.0005 | PSNR: 32.9384 | lr: 0.00010000 | Time: 8.77s\n",
      "[4467/6000] Iteration: 178660 | Loss: 0.0003 | PSNR: 34.9002 | lr: 0.00010000 | Time: 8.75s\n",
      "[4467/6000] Iteration: 178670 | Loss: 0.0004 | PSNR: 34.1254 | lr: 0.00010000 | Time: 8.87s\n",
      "[4467/6000] Iteration: 178680 | Loss: 0.0012 | PSNR: 29.2055 | lr: 0.00010000 | Time: 8.74s\n",
      "[4468/6000] Iteration: 178690 | Loss: 0.0008 | PSNR: 30.7179 | lr: 0.00010000 | Time: 8.67s\n",
      "[4468/6000] Iteration: 178700 | Loss: 0.0005 | PSNR: 32.8783 | lr: 0.00010000 | Time: 8.74s\n",
      "[4468/6000] Iteration: 178710 | Loss: 0.0005 | PSNR: 33.1110 | lr: 0.00010000 | Time: 8.77s\n",
      "[4468/6000] Iteration: 178720 | Loss: 0.0016 | PSNR: 27.8328 | lr: 0.00010000 | Time: 8.77s\n",
      "[4469/6000] Iteration: 178730 | Loss: 0.0012 | PSNR: 29.2048 | lr: 0.00010000 | Time: 8.76s\n",
      "[4469/6000] Iteration: 178740 | Loss: 0.0006 | PSNR: 32.1080 | lr: 0.00010000 | Time: 8.75s\n",
      "[4469/6000] Iteration: 178750 | Loss: 0.0016 | PSNR: 27.9014 | lr: 0.00010000 | Time: 8.77s\n",
      "[4469/6000] Iteration: 178760 | Loss: 0.0011 | PSNR: 29.5148 | lr: 0.00010000 | Time: 8.72s\n",
      "[4470/6000] Iteration: 178770 | Loss: 0.0011 | PSNR: 29.7519 | lr: 0.00010000 | Time: 8.81s\n",
      "[4470/6000] Iteration: 178780 | Loss: 0.0028 | PSNR: 25.4598 | lr: 0.00010000 | Time: 8.79s\n",
      "[4470/6000] Iteration: 178790 | Loss: 0.0032 | PSNR: 24.9733 | lr: 0.00010000 | Time: 8.83s\n",
      "[4470/6000] Iteration: 178800 | Loss: 0.0012 | PSNR: 29.2382 | lr: 0.00010000 | Time: 8.71s\n",
      "0.png 27.557979583740234\n",
      "1.png 29.099790573120117\n",
      "2.png 25.819711685180664\n",
      "3.png 27.403078079223633\n",
      "4.png 32.58891296386719\n",
      "5.png 30.33380699157715\n",
      "6.png 27.529638290405273\n",
      "7.png 26.941795349121094\n",
      "8.png 21.324365615844727\n",
      "9.png 27.990081787109375\n",
      "10.png 32.993492126464844\n",
      "11.png 30.313146591186523\n",
      "12.png 29.30349349975586\n",
      "13.png 26.18313980102539\n",
      "14.png 20.67694091796875\n",
      "15.png 24.717037200927734\n",
      "16.png 33.953128814697266\n",
      "17.png 23.253524780273438\n",
      "18.png 26.775548934936523\n",
      "19.png 29.869029998779297\n",
      "20.png 30.636083602905273\n",
      "21.png 25.12026596069336\n",
      "22.png 22.278827667236328\n",
      "23.png 21.60313606262207\n",
      "24.png 23.646835327148438\n",
      "25.png 26.173389434814453\n",
      "26.png 26.782190322875977\n",
      "27.png 29.701480865478516\n",
      "28.png 29.856929779052734\n",
      "29.png 23.652191162109375\n",
      "30.png 26.494163513183594\n",
      "31.png 32.981842041015625\n",
      "32.png 25.059864044189453\n",
      "33.png 28.239395141601562\n",
      "34.png 30.605287551879883\n",
      "35.png 28.823139190673828\n",
      "36.png 32.07899475097656\n",
      "37.png 30.03180694580078\n",
      "38.png 24.72377586364746\n",
      "39.png 23.42217445373535\n",
      "Validation PSNR:  27.41348543167114\n",
      "[4471/6000] Iteration: 178810 | Loss: 0.0012 | PSNR: 29.3761 | lr: 0.00010000 | Time: 28.38s\n",
      "[4471/6000] Iteration: 178820 | Loss: 0.0015 | PSNR: 28.3582 | lr: 0.00010000 | Time: 8.71s\n",
      "[4471/6000] Iteration: 178830 | Loss: 0.0009 | PSNR: 30.3381 | lr: 0.00010000 | Time: 8.76s\n",
      "[4471/6000] Iteration: 178840 | Loss: 0.0015 | PSNR: 28.1501 | lr: 0.00010000 | Time: 8.72s\n",
      "[4472/6000] Iteration: 178850 | Loss: 0.0007 | PSNR: 31.2603 | lr: 0.00010000 | Time: 8.75s\n",
      "[4472/6000] Iteration: 178860 | Loss: 0.0009 | PSNR: 30.2427 | lr: 0.00010000 | Time: 8.74s\n",
      "[4472/6000] Iteration: 178870 | Loss: 0.0009 | PSNR: 30.6594 | lr: 0.00010000 | Time: 8.74s\n",
      "[4472/6000] Iteration: 178880 | Loss: 0.0011 | PSNR: 29.5749 | lr: 0.00010000 | Time: 8.68s\n",
      "[4473/6000] Iteration: 178890 | Loss: 0.0007 | PSNR: 31.5193 | lr: 0.00010000 | Time: 8.73s\n",
      "[4473/6000] Iteration: 178900 | Loss: 0.0011 | PSNR: 29.7262 | lr: 0.00010000 | Time: 8.76s\n",
      "[4473/6000] Iteration: 178910 | Loss: 0.0006 | PSNR: 31.8988 | lr: 0.00010000 | Time: 8.75s\n",
      "[4473/6000] Iteration: 178920 | Loss: 0.0007 | PSNR: 31.5844 | lr: 0.00010000 | Time: 8.72s\n",
      "[4474/6000] Iteration: 178930 | Loss: 0.0013 | PSNR: 29.0160 | lr: 0.00010000 | Time: 8.79s\n",
      "[4474/6000] Iteration: 178940 | Loss: 0.0004 | PSNR: 33.6617 | lr: 0.00010000 | Time: 8.72s\n",
      "[4474/6000] Iteration: 178950 | Loss: 0.0006 | PSNR: 32.3779 | lr: 0.00010000 | Time: 8.77s\n",
      "[4474/6000] Iteration: 178960 | Loss: 0.0014 | PSNR: 28.4002 | lr: 0.00010000 | Time: 8.73s\n",
      "[4475/6000] Iteration: 178970 | Loss: 0.0005 | PSNR: 33.0677 | lr: 0.00010000 | Time: 8.72s\n",
      "[4475/6000] Iteration: 178980 | Loss: 0.0010 | PSNR: 29.9835 | lr: 0.00010000 | Time: 8.82s\n",
      "[4475/6000] Iteration: 178990 | Loss: 0.0004 | PSNR: 34.2155 | lr: 0.00010000 | Time: 8.70s\n",
      "[4475/6000] Iteration: 179000 | Loss: 0.0007 | PSNR: 31.6697 | lr: 0.00010000 | Time: 8.74s\n",
      "[4476/6000] Iteration: 179010 | Loss: 0.0005 | PSNR: 32.7060 | lr: 0.00010000 | Time: 8.71s\n",
      "[4476/6000] Iteration: 179020 | Loss: 0.0012 | PSNR: 29.1651 | lr: 0.00010000 | Time: 8.77s\n",
      "[4476/6000] Iteration: 179030 | Loss: 0.0003 | PSNR: 35.4163 | lr: 0.00010000 | Time: 8.75s\n",
      "[4476/6000] Iteration: 179040 | Loss: 0.0004 | PSNR: 33.8960 | lr: 0.00010000 | Time: 8.79s\n",
      "[4477/6000] Iteration: 179050 | Loss: 0.0004 | PSNR: 33.7430 | lr: 0.00010000 | Time: 8.73s\n",
      "[4477/6000] Iteration: 179060 | Loss: 0.0002 | PSNR: 36.0719 | lr: 0.00010000 | Time: 8.78s\n",
      "[4477/6000] Iteration: 179070 | Loss: 0.0005 | PSNR: 32.8270 | lr: 0.00010000 | Time: 8.79s\n",
      "[4477/6000] Iteration: 179080 | Loss: 0.0004 | PSNR: 33.5982 | lr: 0.00010000 | Time: 8.80s\n",
      "[4478/6000] Iteration: 179090 | Loss: 0.0006 | PSNR: 32.3745 | lr: 0.00010000 | Time: 8.67s\n",
      "[4478/6000] Iteration: 179100 | Loss: 0.0004 | PSNR: 34.4911 | lr: 0.00010000 | Time: 8.74s\n",
      "[4478/6000] Iteration: 179110 | Loss: 0.0004 | PSNR: 33.9279 | lr: 0.00010000 | Time: 8.73s\n",
      "[4478/6000] Iteration: 179120 | Loss: 0.0003 | PSNR: 34.6952 | lr: 0.00010000 | Time: 8.75s\n",
      "[4479/6000] Iteration: 179130 | Loss: 0.0004 | PSNR: 34.2604 | lr: 0.00010000 | Time: 8.70s\n",
      "[4479/6000] Iteration: 179140 | Loss: 0.0002 | PSNR: 36.2947 | lr: 0.00010000 | Time: 8.80s\n",
      "[4479/6000] Iteration: 179150 | Loss: 0.0002 | PSNR: 36.0417 | lr: 0.00010000 | Time: 8.77s\n",
      "[4479/6000] Iteration: 179160 | Loss: 0.0006 | PSNR: 31.9250 | lr: 0.00010000 | Time: 8.70s\n",
      "[4480/6000] Iteration: 179170 | Loss: 0.0004 | PSNR: 33.6099 | lr: 0.00010000 | Time: 8.72s\n",
      "[4480/6000] Iteration: 179180 | Loss: 0.0005 | PSNR: 33.0466 | lr: 0.00010000 | Time: 8.83s\n",
      "[4480/6000] Iteration: 179190 | Loss: 0.0003 | PSNR: 35.1838 | lr: 0.00010000 | Time: 8.77s\n",
      "[4480/6000] Iteration: 179200 | Loss: 0.0004 | PSNR: 34.5222 | lr: 0.00010000 | Time: 8.78s\n",
      "[4481/6000] Iteration: 179210 | Loss: 0.0004 | PSNR: 34.0234 | lr: 0.00010000 | Time: 8.76s\n",
      "[4481/6000] Iteration: 179220 | Loss: 0.0007 | PSNR: 31.8035 | lr: 0.00010000 | Time: 8.76s\n",
      "[4481/6000] Iteration: 179230 | Loss: 0.0007 | PSNR: 31.4812 | lr: 0.00010000 | Time: 8.77s\n",
      "[4481/6000] Iteration: 179240 | Loss: 0.0004 | PSNR: 34.4750 | lr: 0.00010000 | Time: 8.68s\n",
      "[4482/6000] Iteration: 179250 | Loss: 0.0006 | PSNR: 32.3788 | lr: 0.00010000 | Time: 8.76s\n",
      "[4482/6000] Iteration: 179260 | Loss: 0.0004 | PSNR: 34.4582 | lr: 0.00010000 | Time: 8.71s\n",
      "[4482/6000] Iteration: 179270 | Loss: 0.0002 | PSNR: 37.3429 | lr: 0.00010000 | Time: 8.76s\n",
      "[4482/6000] Iteration: 179280 | Loss: 0.0003 | PSNR: 34.6726 | lr: 0.00010000 | Time: 8.73s\n",
      "[4483/6000] Iteration: 179290 | Loss: 0.0003 | PSNR: 34.6211 | lr: 0.00010000 | Time: 8.72s\n",
      "[4483/6000] Iteration: 179300 | Loss: 0.0004 | PSNR: 34.0299 | lr: 0.00010000 | Time: 8.70s\n",
      "[4483/6000] Iteration: 179310 | Loss: 0.0003 | PSNR: 35.4931 | lr: 0.00010000 | Time: 8.80s\n",
      "[4483/6000] Iteration: 179320 | Loss: 0.0003 | PSNR: 34.7015 | lr: 0.00010000 | Time: 8.76s\n",
      "[4484/6000] Iteration: 179330 | Loss: 0.0005 | PSNR: 33.1604 | lr: 0.00010000 | Time: 8.69s\n",
      "[4484/6000] Iteration: 179340 | Loss: 0.0004 | PSNR: 33.8730 | lr: 0.00010000 | Time: 8.72s\n",
      "[4484/6000] Iteration: 179350 | Loss: 0.0006 | PSNR: 32.3033 | lr: 0.00010000 | Time: 8.77s\n",
      "[4484/6000] Iteration: 179360 | Loss: 0.0004 | PSNR: 34.0728 | lr: 0.00010000 | Time: 8.77s\n",
      "[4485/6000] Iteration: 179370 | Loss: 0.0003 | PSNR: 35.5718 | lr: 0.00010000 | Time: 8.75s\n",
      "[4485/6000] Iteration: 179380 | Loss: 0.0007 | PSNR: 31.7116 | lr: 0.00010000 | Time: 8.75s\n",
      "[4485/6000] Iteration: 179390 | Loss: 0.0004 | PSNR: 33.9025 | lr: 0.00010000 | Time: 8.79s\n",
      "[4485/6000] Iteration: 179400 | Loss: 0.0003 | PSNR: 35.1366 | lr: 0.00010000 | Time: 8.76s\n",
      "0.png 26.139219284057617\n",
      "1.png 28.29897117614746\n",
      "2.png 31.616945266723633\n",
      "3.png 31.58200454711914\n",
      "4.png 33.92527770996094\n",
      "5.png 32.06689453125\n",
      "6.png 28.184900283813477\n",
      "7.png 30.3189754486084\n",
      "8.png 22.926063537597656\n",
      "9.png 28.69290542602539\n",
      "10.png 31.042842864990234\n",
      "11.png 28.98012351989746\n",
      "12.png 29.866140365600586\n",
      "13.png 25.109825134277344\n",
      "14.png 24.313222885131836\n",
      "15.png 26.976905822753906\n",
      "16.png 34.06084060668945\n",
      "17.png 26.501461029052734\n",
      "18.png 30.552898406982422\n",
      "19.png 31.303455352783203\n",
      "20.png 26.624980926513672\n",
      "21.png 26.41909408569336\n",
      "22.png 25.066585540771484\n",
      "23.png 26.65762710571289\n",
      "24.png 25.796010971069336\n",
      "25.png 28.453510284423828\n",
      "26.png 32.640560150146484\n",
      "27.png 30.526552200317383\n",
      "28.png 23.19200325012207\n",
      "29.png 27.2578125\n",
      "30.png 31.56757164001465\n",
      "31.png 32.14801788330078\n",
      "32.png 28.10769271850586\n",
      "33.png 33.600830078125\n",
      "34.png 31.15045928955078\n",
      "35.png 29.606019973754883\n",
      "36.png 32.2905158996582\n",
      "37.png 32.73230743408203\n",
      "38.png 30.652393341064453\n",
      "39.png 24.423599243164062\n",
      "Validation PSNR:  29.034350442886353\n",
      "[4486/6000] Iteration: 179410 | Loss: 0.0008 | PSNR: 31.0327 | lr: 0.00010000 | Time: 28.51s\n",
      "[4486/6000] Iteration: 179420 | Loss: 0.0002 | PSNR: 36.1802 | lr: 0.00010000 | Time: 8.75s\n",
      "[4486/6000] Iteration: 179430 | Loss: 0.0005 | PSNR: 32.7006 | lr: 0.00010000 | Time: 8.76s\n",
      "[4486/6000] Iteration: 179440 | Loss: 0.0003 | PSNR: 35.7416 | lr: 0.00010000 | Time: 8.71s\n",
      "[4487/6000] Iteration: 179450 | Loss: 0.0003 | PSNR: 35.0133 | lr: 0.00010000 | Time: 8.74s\n",
      "[4487/6000] Iteration: 179460 | Loss: 0.0004 | PSNR: 33.7318 | lr: 0.00010000 | Time: 8.77s\n",
      "[4487/6000] Iteration: 179470 | Loss: 0.0007 | PSNR: 31.7441 | lr: 0.00010000 | Time: 8.73s\n",
      "[4487/6000] Iteration: 179480 | Loss: 0.0002 | PSNR: 36.3746 | lr: 0.00010000 | Time: 8.71s\n",
      "[4488/6000] Iteration: 179490 | Loss: 0.0002 | PSNR: 37.7074 | lr: 0.00010000 | Time: 8.72s\n",
      "[4488/6000] Iteration: 179500 | Loss: 0.0002 | PSNR: 37.7556 | lr: 0.00010000 | Time: 8.78s\n",
      "[4488/6000] Iteration: 179510 | Loss: 0.0009 | PSNR: 30.5117 | lr: 0.00010000 | Time: 8.74s\n",
      "[4488/6000] Iteration: 179520 | Loss: 0.0005 | PSNR: 33.0306 | lr: 0.00010000 | Time: 8.73s\n",
      "[4489/6000] Iteration: 179530 | Loss: 0.0005 | PSNR: 32.9118 | lr: 0.00010000 | Time: 8.73s\n",
      "[4489/6000] Iteration: 179540 | Loss: 0.0003 | PSNR: 34.6949 | lr: 0.00010000 | Time: 8.74s\n",
      "[4489/6000] Iteration: 179550 | Loss: 0.0004 | PSNR: 34.1824 | lr: 0.00010000 | Time: 8.75s\n",
      "[4489/6000] Iteration: 179560 | Loss: 0.0004 | PSNR: 33.5064 | lr: 0.00010000 | Time: 8.69s\n",
      "[4490/6000] Iteration: 179570 | Loss: 0.0005 | PSNR: 33.2952 | lr: 0.00010000 | Time: 8.80s\n",
      "[4490/6000] Iteration: 179580 | Loss: 0.0003 | PSNR: 35.9200 | lr: 0.00010000 | Time: 8.72s\n",
      "[4490/6000] Iteration: 179590 | Loss: 0.0005 | PSNR: 32.7755 | lr: 0.00010000 | Time: 8.77s\n",
      "[4490/6000] Iteration: 179600 | Loss: 0.0005 | PSNR: 33.4182 | lr: 0.00010000 | Time: 8.73s\n",
      "[4491/6000] Iteration: 179610 | Loss: 0.0005 | PSNR: 32.8752 | lr: 0.00010000 | Time: 8.73s\n",
      "[4491/6000] Iteration: 179620 | Loss: 0.0005 | PSNR: 32.9697 | lr: 0.00010000 | Time: 8.80s\n",
      "[4491/6000] Iteration: 179630 | Loss: 0.0003 | PSNR: 35.4477 | lr: 0.00010000 | Time: 8.74s\n",
      "[4491/6000] Iteration: 179640 | Loss: 0.0007 | PSNR: 31.5051 | lr: 0.00010000 | Time: 8.66s\n",
      "[4492/6000] Iteration: 179650 | Loss: 0.0005 | PSNR: 33.2306 | lr: 0.00010000 | Time: 8.77s\n",
      "[4492/6000] Iteration: 179660 | Loss: 0.0003 | PSNR: 34.7409 | lr: 0.00010000 | Time: 8.81s\n",
      "[4492/6000] Iteration: 179670 | Loss: 0.0004 | PSNR: 34.0727 | lr: 0.00010000 | Time: 8.76s\n",
      "[4492/6000] Iteration: 179680 | Loss: 0.0003 | PSNR: 35.0796 | lr: 0.00010000 | Time: 8.75s\n",
      "[4493/6000] Iteration: 179690 | Loss: 0.0009 | PSNR: 30.4599 | lr: 0.00010000 | Time: 8.74s\n",
      "[4493/6000] Iteration: 179700 | Loss: 0.0003 | PSNR: 34.8105 | lr: 0.00010000 | Time: 8.75s\n",
      "[4493/6000] Iteration: 179710 | Loss: 0.0007 | PSNR: 31.3502 | lr: 0.00010000 | Time: 8.74s\n",
      "[4493/6000] Iteration: 179720 | Loss: 0.0003 | PSNR: 35.1158 | lr: 0.00010000 | Time: 8.72s\n",
      "[4494/6000] Iteration: 179730 | Loss: 0.0003 | PSNR: 35.2273 | lr: 0.00010000 | Time: 8.75s\n",
      "[4494/6000] Iteration: 179740 | Loss: 0.0004 | PSNR: 33.7595 | lr: 0.00010000 | Time: 8.77s\n",
      "[4494/6000] Iteration: 179750 | Loss: 0.0003 | PSNR: 35.4139 | lr: 0.00010000 | Time: 8.76s\n",
      "[4494/6000] Iteration: 179760 | Loss: 0.0004 | PSNR: 34.2398 | lr: 0.00010000 | Time: 8.72s\n",
      "[4495/6000] Iteration: 179770 | Loss: 0.0003 | PSNR: 34.7990 | lr: 0.00010000 | Time: 8.79s\n",
      "[4495/6000] Iteration: 179780 | Loss: 0.0006 | PSNR: 31.9161 | lr: 0.00010000 | Time: 8.72s\n",
      "[4495/6000] Iteration: 179790 | Loss: 0.0004 | PSNR: 34.4717 | lr: 0.00010000 | Time: 8.80s\n",
      "[4495/6000] Iteration: 179800 | Loss: 0.0002 | PSNR: 36.5447 | lr: 0.00010000 | Time: 8.77s\n",
      "[4496/6000] Iteration: 179810 | Loss: 0.0004 | PSNR: 33.6477 | lr: 0.00010000 | Time: 8.73s\n",
      "[4496/6000] Iteration: 179820 | Loss: 0.0006 | PSNR: 32.4265 | lr: 0.00010000 | Time: 8.75s\n",
      "[4496/6000] Iteration: 179830 | Loss: 0.0003 | PSNR: 34.8147 | lr: 0.00010000 | Time: 8.81s\n",
      "[4496/6000] Iteration: 179840 | Loss: 0.0005 | PSNR: 33.1003 | lr: 0.00010000 | Time: 8.75s\n",
      "[4497/6000] Iteration: 179850 | Loss: 0.0004 | PSNR: 33.7120 | lr: 0.00010000 | Time: 8.74s\n",
      "[4497/6000] Iteration: 179860 | Loss: 0.0006 | PSNR: 31.9420 | lr: 0.00010000 | Time: 8.77s\n",
      "[4497/6000] Iteration: 179870 | Loss: 0.0003 | PSNR: 34.5653 | lr: 0.00010000 | Time: 8.79s\n",
      "[4497/6000] Iteration: 179880 | Loss: 0.0003 | PSNR: 35.3204 | lr: 0.00010000 | Time: 8.78s\n",
      "[4498/6000] Iteration: 179890 | Loss: 0.0004 | PSNR: 34.1695 | lr: 0.00010000 | Time: 8.73s\n",
      "[4498/6000] Iteration: 179900 | Loss: 0.0005 | PSNR: 33.4678 | lr: 0.00010000 | Time: 8.76s\n",
      "[4498/6000] Iteration: 179910 | Loss: 0.0004 | PSNR: 34.3648 | lr: 0.00010000 | Time: 8.72s\n",
      "[4498/6000] Iteration: 179920 | Loss: 0.0005 | PSNR: 32.6660 | lr: 0.00010000 | Time: 8.74s\n",
      "[4499/6000] Iteration: 179930 | Loss: 0.0002 | PSNR: 36.2823 | lr: 0.00010000 | Time: 8.71s\n",
      "[4499/6000] Iteration: 179940 | Loss: 0.0003 | PSNR: 35.8646 | lr: 0.00010000 | Time: 8.79s\n",
      "[4499/6000] Iteration: 179950 | Loss: 0.0004 | PSNR: 33.6920 | lr: 0.00010000 | Time: 8.79s\n",
      "[4499/6000] Iteration: 179960 | Loss: 0.0006 | PSNR: 32.3592 | lr: 0.00010000 | Time: 8.71s\n",
      "[4500/6000] Iteration: 179970 | Loss: 0.0003 | PSNR: 34.6701 | lr: 0.00010000 | Time: 8.74s\n",
      "[4500/6000] Iteration: 179980 | Loss: 0.0002 | PSNR: 37.1635 | lr: 0.00010000 | Time: 8.82s\n",
      "[4500/6000] Iteration: 179990 | Loss: 0.0006 | PSNR: 32.1472 | lr: 0.00010000 | Time: 8.73s\n",
      "[4500/6000] Iteration: 180000 | Loss: 0.0004 | PSNR: 34.4725 | lr: 0.00010000 | Time: 8.73s\n",
      "0.png 27.32122802734375\n",
      "1.png 29.625324249267578\n",
      "2.png 33.6507682800293\n",
      "3.png 30.906885147094727\n",
      "4.png 33.61521911621094\n",
      "5.png 31.182767868041992\n",
      "6.png 27.801179885864258\n",
      "7.png 30.94508171081543\n",
      "8.png 24.035890579223633\n",
      "9.png 28.059127807617188\n",
      "10.png 29.657764434814453\n",
      "11.png 28.205493927001953\n",
      "12.png 28.692350387573242\n",
      "13.png 24.165260314941406\n",
      "14.png 24.44658660888672\n",
      "15.png 31.294158935546875\n",
      "16.png 32.56121063232422\n",
      "17.png 28.025646209716797\n",
      "18.png 30.448261260986328\n",
      "19.png 28.28730010986328\n",
      "20.png 25.0864200592041\n",
      "21.png 27.312206268310547\n",
      "22.png 26.436325073242188\n",
      "23.png 29.315994262695312\n",
      "24.png 30.21373748779297\n",
      "25.png 28.18904685974121\n",
      "26.png 32.376220703125\n",
      "27.png 31.24340057373047\n",
      "28.png 26.068294525146484\n",
      "29.png 25.874040603637695\n",
      "30.png 33.76292037963867\n",
      "31.png 31.395673751831055\n",
      "32.png 28.539710998535156\n",
      "33.png 33.36735534667969\n",
      "34.png 30.504253387451172\n",
      "35.png 27.450748443603516\n",
      "36.png 31.99730110168457\n",
      "37.png 31.153873443603516\n",
      "38.png 29.01767349243164\n",
      "39.png 28.811731338500977\n",
      "Validation PSNR:  29.27611083984375\n",
      "[4501/6000] Iteration: 180010 | Loss: 0.0004 | PSNR: 34.4650 | lr: 0.00010000 | Time: 28.49s\n",
      "[4501/6000] Iteration: 180020 | Loss: 0.0003 | PSNR: 35.5613 | lr: 0.00010000 | Time: 8.75s\n",
      "[4501/6000] Iteration: 180030 | Loss: 0.0002 | PSNR: 36.1252 | lr: 0.00010000 | Time: 8.78s\n",
      "[4501/6000] Iteration: 180040 | Loss: 0.0006 | PSNR: 32.2199 | lr: 0.00010000 | Time: 8.79s\n",
      "[4502/6000] Iteration: 180050 | Loss: 0.0001 | PSNR: 39.0485 | lr: 0.00010000 | Time: 8.75s\n",
      "[4502/6000] Iteration: 180060 | Loss: 0.0004 | PSNR: 33.5374 | lr: 0.00010000 | Time: 8.77s\n",
      "[4502/6000] Iteration: 180070 | Loss: 0.0003 | PSNR: 34.9470 | lr: 0.00010000 | Time: 8.70s\n",
      "[4502/6000] Iteration: 180080 | Loss: 0.0002 | PSNR: 36.8324 | lr: 0.00010000 | Time: 8.76s\n",
      "[4503/6000] Iteration: 180090 | Loss: 0.0004 | PSNR: 33.6853 | lr: 0.00010000 | Time: 8.72s\n",
      "[4503/6000] Iteration: 180100 | Loss: 0.0005 | PSNR: 32.9973 | lr: 0.00010000 | Time: 8.79s\n",
      "[4503/6000] Iteration: 180110 | Loss: 0.0004 | PSNR: 33.9839 | lr: 0.00010000 | Time: 8.81s\n",
      "[4503/6000] Iteration: 180120 | Loss: 0.0003 | PSNR: 35.4876 | lr: 0.00010000 | Time: 8.84s\n",
      "[4504/6000] Iteration: 180130 | Loss: 0.0003 | PSNR: 35.6972 | lr: 0.00010000 | Time: 8.71s\n",
      "[4504/6000] Iteration: 180140 | Loss: 0.0004 | PSNR: 34.5069 | lr: 0.00010000 | Time: 8.81s\n",
      "[4504/6000] Iteration: 180150 | Loss: 0.0006 | PSNR: 32.2046 | lr: 0.00010000 | Time: 8.74s\n",
      "[4504/6000] Iteration: 180160 | Loss: 0.0002 | PSNR: 36.1361 | lr: 0.00010000 | Time: 8.77s\n",
      "[4505/6000] Iteration: 180170 | Loss: 0.0003 | PSNR: 35.7508 | lr: 0.00010000 | Time: 8.82s\n",
      "[4505/6000] Iteration: 180180 | Loss: 0.0003 | PSNR: 35.9345 | lr: 0.00010000 | Time: 8.80s\n",
      "[4505/6000] Iteration: 180190 | Loss: 0.0002 | PSNR: 36.8678 | lr: 0.00010000 | Time: 8.72s\n",
      "[4505/6000] Iteration: 180200 | Loss: 0.0002 | PSNR: 36.6336 | lr: 0.00010000 | Time: 8.75s\n",
      "[4506/6000] Iteration: 180210 | Loss: 0.0003 | PSNR: 35.1287 | lr: 0.00010000 | Time: 8.75s\n",
      "[4506/6000] Iteration: 180220 | Loss: 0.0006 | PSNR: 32.0824 | lr: 0.00010000 | Time: 8.77s\n",
      "[4506/6000] Iteration: 180230 | Loss: 0.0005 | PSNR: 33.3732 | lr: 0.00010000 | Time: 8.82s\n",
      "[4506/6000] Iteration: 180240 | Loss: 0.0009 | PSNR: 30.2936 | lr: 0.00010000 | Time: 8.82s\n",
      "[4507/6000] Iteration: 180250 | Loss: 0.0006 | PSNR: 32.2891 | lr: 0.00010000 | Time: 8.73s\n",
      "[4507/6000] Iteration: 180260 | Loss: 0.0005 | PSNR: 33.3758 | lr: 0.00010000 | Time: 8.75s\n",
      "[4507/6000] Iteration: 180270 | Loss: 0.0008 | PSNR: 30.8250 | lr: 0.00010000 | Time: 8.72s\n",
      "[4507/6000] Iteration: 180280 | Loss: 0.0005 | PSNR: 33.3192 | lr: 0.00010000 | Time: 8.72s\n",
      "[4508/6000] Iteration: 180290 | Loss: 0.0010 | PSNR: 30.1819 | lr: 0.00010000 | Time: 8.73s\n",
      "[4508/6000] Iteration: 180300 | Loss: 0.0004 | PSNR: 34.2136 | lr: 0.00010000 | Time: 8.71s\n",
      "[4508/6000] Iteration: 180310 | Loss: 0.0007 | PSNR: 31.5992 | lr: 0.00010000 | Time: 8.82s\n",
      "[4508/6000] Iteration: 180320 | Loss: 0.0006 | PSNR: 32.5829 | lr: 0.00010000 | Time: 8.71s\n",
      "[4509/6000] Iteration: 180330 | Loss: 0.0004 | PSNR: 33.6207 | lr: 0.00010000 | Time: 8.71s\n",
      "[4509/6000] Iteration: 180340 | Loss: 0.0008 | PSNR: 30.7970 | lr: 0.00010000 | Time: 8.77s\n",
      "[4509/6000] Iteration: 180350 | Loss: 0.0003 | PSNR: 34.6951 | lr: 0.00010000 | Time: 8.71s\n",
      "[4509/6000] Iteration: 180360 | Loss: 0.0005 | PSNR: 33.1279 | lr: 0.00010000 | Time: 8.74s\n",
      "[4510/6000] Iteration: 180370 | Loss: 0.0004 | PSNR: 33.6021 | lr: 0.00010000 | Time: 8.78s\n",
      "[4510/6000] Iteration: 180380 | Loss: 0.0003 | PSNR: 34.7110 | lr: 0.00010000 | Time: 8.77s\n",
      "[4510/6000] Iteration: 180390 | Loss: 0.0005 | PSNR: 33.2114 | lr: 0.00010000 | Time: 8.75s\n",
      "[4510/6000] Iteration: 180400 | Loss: 0.0003 | PSNR: 35.6570 | lr: 0.00010000 | Time: 8.78s\n",
      "[4511/6000] Iteration: 180410 | Loss: 0.0003 | PSNR: 35.2635 | lr: 0.00010000 | Time: 8.77s\n",
      "[4511/6000] Iteration: 180420 | Loss: 0.0007 | PSNR: 31.3000 | lr: 0.00010000 | Time: 8.71s\n",
      "[4511/6000] Iteration: 180430 | Loss: 0.0005 | PSNR: 33.0033 | lr: 0.00010000 | Time: 8.74s\n",
      "[4511/6000] Iteration: 180440 | Loss: 0.0005 | PSNR: 33.1706 | lr: 0.00010000 | Time: 8.69s\n",
      "[4512/6000] Iteration: 180450 | Loss: 0.0006 | PSNR: 32.1005 | lr: 0.00010000 | Time: 8.77s\n",
      "[4512/6000] Iteration: 180460 | Loss: 0.0005 | PSNR: 33.3362 | lr: 0.00010000 | Time: 8.74s\n",
      "[4512/6000] Iteration: 180470 | Loss: 0.0004 | PSNR: 34.0986 | lr: 0.00010000 | Time: 8.72s\n",
      "[4512/6000] Iteration: 180480 | Loss: 0.0003 | PSNR: 34.8589 | lr: 0.00010000 | Time: 8.68s\n",
      "[4513/6000] Iteration: 180490 | Loss: 0.0003 | PSNR: 35.6904 | lr: 0.00010000 | Time: 8.74s\n",
      "[4513/6000] Iteration: 180500 | Loss: 0.0007 | PSNR: 31.6231 | lr: 0.00010000 | Time: 8.84s\n",
      "[4513/6000] Iteration: 180510 | Loss: 0.0006 | PSNR: 32.3731 | lr: 0.00010000 | Time: 8.75s\n",
      "[4513/6000] Iteration: 180520 | Loss: 0.0005 | PSNR: 33.1925 | lr: 0.00010000 | Time: 8.71s\n",
      "[4514/6000] Iteration: 180530 | Loss: 0.0004 | PSNR: 34.1680 | lr: 0.00010000 | Time: 8.69s\n",
      "[4514/6000] Iteration: 180540 | Loss: 0.0007 | PSNR: 31.7330 | lr: 0.00010000 | Time: 8.79s\n",
      "[4514/6000] Iteration: 180550 | Loss: 0.0007 | PSNR: 31.5034 | lr: 0.00010000 | Time: 8.75s\n",
      "[4514/6000] Iteration: 180560 | Loss: 0.0005 | PSNR: 33.4288 | lr: 0.00010000 | Time: 8.73s\n",
      "[4515/6000] Iteration: 180570 | Loss: 0.0004 | PSNR: 34.4847 | lr: 0.00010000 | Time: 8.75s\n",
      "[4515/6000] Iteration: 180580 | Loss: 0.0006 | PSNR: 32.5352 | lr: 0.00010000 | Time: 8.77s\n",
      "[4515/6000] Iteration: 180590 | Loss: 0.0003 | PSNR: 34.9113 | lr: 0.00010000 | Time: 8.72s\n",
      "[4515/6000] Iteration: 180600 | Loss: 0.0007 | PSNR: 31.5118 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 26.69420623779297\n",
      "1.png 28.775232315063477\n",
      "2.png 29.309694290161133\n",
      "3.png 30.009037017822266\n",
      "4.png 34.31697082519531\n",
      "5.png 32.221107482910156\n",
      "6.png 26.635780334472656\n",
      "7.png 31.63827133178711\n",
      "8.png 25.167640686035156\n",
      "9.png 29.49741554260254\n",
      "10.png 30.77613639831543\n",
      "11.png 28.944625854492188\n",
      "12.png 28.540367126464844\n",
      "13.png 25.242156982421875\n",
      "14.png 24.099178314208984\n",
      "15.png 26.178760528564453\n",
      "16.png 34.44457244873047\n",
      "17.png 28.096248626708984\n",
      "18.png 29.436115264892578\n",
      "19.png 30.941486358642578\n",
      "20.png 27.76818084716797\n",
      "21.png 27.47945785522461\n",
      "22.png 26.694095611572266\n",
      "23.png 26.27814292907715\n",
      "24.png 29.50688362121582\n",
      "25.png 28.067806243896484\n",
      "26.png 34.135009765625\n",
      "27.png 30.744041442871094\n",
      "28.png 25.922637939453125\n",
      "29.png 27.883188247680664\n",
      "30.png 33.252052307128906\n",
      "31.png 34.279903411865234\n",
      "32.png 30.587600708007812\n",
      "33.png 34.06526184082031\n",
      "34.png 31.614219665527344\n",
      "35.png 28.583724975585938\n",
      "36.png 31.995420455932617\n",
      "37.png 30.42873764038086\n",
      "38.png 30.378894805908203\n",
      "39.png 26.119770050048828\n",
      "Validation PSNR:  29.418750858306886\n",
      "[4516/6000] Iteration: 180610 | Loss: 0.0004 | PSNR: 34.2422 | lr: 0.00010000 | Time: 28.42s\n",
      "[4516/6000] Iteration: 180620 | Loss: 0.0008 | PSNR: 31.1199 | lr: 0.00010000 | Time: 8.72s\n",
      "[4516/6000] Iteration: 180630 | Loss: 0.0005 | PSNR: 32.6152 | lr: 0.00010000 | Time: 8.70s\n",
      "[4516/6000] Iteration: 180640 | Loss: 0.0006 | PSNR: 32.4063 | lr: 0.00010000 | Time: 8.75s\n",
      "[4517/6000] Iteration: 180650 | Loss: 0.0005 | PSNR: 32.6044 | lr: 0.00010000 | Time: 8.73s\n",
      "[4517/6000] Iteration: 180660 | Loss: 0.0005 | PSNR: 33.4035 | lr: 0.00010000 | Time: 8.73s\n",
      "[4517/6000] Iteration: 180670 | Loss: 0.0004 | PSNR: 34.3966 | lr: 0.00010000 | Time: 8.76s\n",
      "[4517/6000] Iteration: 180680 | Loss: 0.0007 | PSNR: 31.3456 | lr: 0.00010000 | Time: 8.74s\n",
      "[4518/6000] Iteration: 180690 | Loss: 0.0005 | PSNR: 33.2287 | lr: 0.00010000 | Time: 8.73s\n",
      "[4518/6000] Iteration: 180700 | Loss: 0.0004 | PSNR: 33.6072 | lr: 0.00010000 | Time: 8.73s\n",
      "[4518/6000] Iteration: 180710 | Loss: 0.0006 | PSNR: 32.5416 | lr: 0.00010000 | Time: 8.76s\n",
      "[4518/6000] Iteration: 180720 | Loss: 0.0014 | PSNR: 28.6566 | lr: 0.00010000 | Time: 8.77s\n",
      "[4519/6000] Iteration: 180730 | Loss: 0.0004 | PSNR: 34.0481 | lr: 0.00010000 | Time: 8.72s\n",
      "[4519/6000] Iteration: 180740 | Loss: 0.0004 | PSNR: 34.1890 | lr: 0.00010000 | Time: 8.70s\n",
      "[4519/6000] Iteration: 180750 | Loss: 0.0008 | PSNR: 30.8822 | lr: 0.00010000 | Time: 8.70s\n",
      "[4519/6000] Iteration: 180760 | Loss: 0.0006 | PSNR: 32.2962 | lr: 0.00010000 | Time: 8.76s\n",
      "[4520/6000] Iteration: 180770 | Loss: 0.0004 | PSNR: 33.5120 | lr: 0.00010000 | Time: 8.75s\n",
      "[4520/6000] Iteration: 180780 | Loss: 0.0007 | PSNR: 31.6810 | lr: 0.00010000 | Time: 8.78s\n",
      "[4520/6000] Iteration: 180790 | Loss: 0.0006 | PSNR: 32.1409 | lr: 0.00010000 | Time: 8.71s\n",
      "[4520/6000] Iteration: 180800 | Loss: 0.0005 | PSNR: 32.7540 | lr: 0.00010000 | Time: 8.73s\n",
      "[4521/6000] Iteration: 180810 | Loss: 0.0010 | PSNR: 30.1774 | lr: 0.00010000 | Time: 8.77s\n",
      "[4521/6000] Iteration: 180820 | Loss: 0.0006 | PSNR: 32.1265 | lr: 0.00010000 | Time: 8.73s\n",
      "[4521/6000] Iteration: 180830 | Loss: 0.0007 | PSNR: 31.5464 | lr: 0.00010000 | Time: 8.81s\n",
      "[4521/6000] Iteration: 180840 | Loss: 0.0003 | PSNR: 35.6134 | lr: 0.00010000 | Time: 8.67s\n",
      "[4522/6000] Iteration: 180850 | Loss: 0.0008 | PSNR: 30.7730 | lr: 0.00010000 | Time: 8.75s\n",
      "[4522/6000] Iteration: 180860 | Loss: 0.0008 | PSNR: 31.0957 | lr: 0.00010000 | Time: 8.75s\n",
      "[4522/6000] Iteration: 180870 | Loss: 0.0004 | PSNR: 33.9209 | lr: 0.00010000 | Time: 8.72s\n",
      "[4522/6000] Iteration: 180880 | Loss: 0.0009 | PSNR: 30.5961 | lr: 0.00010000 | Time: 8.68s\n",
      "[4523/6000] Iteration: 180890 | Loss: 0.0004 | PSNR: 33.4992 | lr: 0.00010000 | Time: 8.83s\n",
      "[4523/6000] Iteration: 180900 | Loss: 0.0004 | PSNR: 34.1330 | lr: 0.00010000 | Time: 8.76s\n",
      "[4523/6000] Iteration: 180910 | Loss: 0.0004 | PSNR: 33.4739 | lr: 0.00010000 | Time: 8.72s\n",
      "[4523/6000] Iteration: 180920 | Loss: 0.0007 | PSNR: 31.3050 | lr: 0.00010000 | Time: 8.71s\n",
      "[4524/6000] Iteration: 180930 | Loss: 0.0009 | PSNR: 30.2956 | lr: 0.00010000 | Time: 8.75s\n",
      "[4524/6000] Iteration: 180940 | Loss: 0.0004 | PSNR: 34.0308 | lr: 0.00010000 | Time: 8.74s\n",
      "[4524/6000] Iteration: 180950 | Loss: 0.0019 | PSNR: 27.1606 | lr: 0.00010000 | Time: 8.75s\n",
      "[4524/6000] Iteration: 180960 | Loss: 0.0012 | PSNR: 29.0812 | lr: 0.00010000 | Time: 8.75s\n",
      "[4525/6000] Iteration: 180970 | Loss: 0.0004 | PSNR: 33.8516 | lr: 0.00010000 | Time: 8.76s\n",
      "[4525/6000] Iteration: 180980 | Loss: 0.0004 | PSNR: 33.5877 | lr: 0.00010000 | Time: 8.70s\n",
      "[4525/6000] Iteration: 180990 | Loss: 0.0004 | PSNR: 33.8234 | lr: 0.00010000 | Time: 8.72s\n",
      "[4525/6000] Iteration: 181000 | Loss: 0.0012 | PSNR: 29.0478 | lr: 0.00010000 | Time: 8.74s\n",
      "[4526/6000] Iteration: 181010 | Loss: 0.0013 | PSNR: 28.9659 | lr: 0.00010000 | Time: 8.76s\n",
      "[4526/6000] Iteration: 181020 | Loss: 0.0007 | PSNR: 31.6785 | lr: 0.00010000 | Time: 8.74s\n",
      "[4526/6000] Iteration: 181030 | Loss: 0.0019 | PSNR: 27.2717 | lr: 0.00010000 | Time: 8.77s\n",
      "[4526/6000] Iteration: 181040 | Loss: 0.0005 | PSNR: 33.1762 | lr: 0.00010000 | Time: 8.74s\n",
      "[4527/6000] Iteration: 181050 | Loss: 0.0016 | PSNR: 27.8946 | lr: 0.00010000 | Time: 8.76s\n",
      "[4527/6000] Iteration: 181060 | Loss: 0.0006 | PSNR: 32.2336 | lr: 0.00010000 | Time: 8.68s\n",
      "[4527/6000] Iteration: 181070 | Loss: 0.0006 | PSNR: 32.2834 | lr: 0.00010000 | Time: 8.77s\n",
      "[4527/6000] Iteration: 181080 | Loss: 0.0015 | PSNR: 28.3830 | lr: 0.00010000 | Time: 8.72s\n",
      "[4528/6000] Iteration: 181090 | Loss: 0.0006 | PSNR: 31.9439 | lr: 0.00010000 | Time: 8.75s\n",
      "[4528/6000] Iteration: 181100 | Loss: 0.0007 | PSNR: 31.7856 | lr: 0.00010000 | Time: 8.73s\n",
      "[4528/6000] Iteration: 181110 | Loss: 0.0011 | PSNR: 29.4553 | lr: 0.00010000 | Time: 8.76s\n",
      "[4528/6000] Iteration: 181120 | Loss: 0.0012 | PSNR: 29.2774 | lr: 0.00010000 | Time: 8.67s\n",
      "[4529/6000] Iteration: 181130 | Loss: 0.0007 | PSNR: 31.4246 | lr: 0.00010000 | Time: 8.68s\n",
      "[4529/6000] Iteration: 181140 | Loss: 0.0004 | PSNR: 33.5498 | lr: 0.00010000 | Time: 8.81s\n",
      "[4529/6000] Iteration: 181150 | Loss: 0.0008 | PSNR: 31.0413 | lr: 0.00010000 | Time: 8.75s\n",
      "[4529/6000] Iteration: 181160 | Loss: 0.0003 | PSNR: 34.9426 | lr: 0.00010000 | Time: 8.65s\n",
      "[4530/6000] Iteration: 181170 | Loss: 0.0004 | PSNR: 33.9594 | lr: 0.00010000 | Time: 8.69s\n",
      "[4530/6000] Iteration: 181180 | Loss: 0.0004 | PSNR: 33.8053 | lr: 0.00010000 | Time: 8.78s\n",
      "[4530/6000] Iteration: 181190 | Loss: 0.0004 | PSNR: 34.3720 | lr: 0.00010000 | Time: 8.73s\n",
      "[4530/6000] Iteration: 181200 | Loss: 0.0005 | PSNR: 33.0779 | lr: 0.00010000 | Time: 8.67s\n",
      "0.png 26.077228546142578\n",
      "1.png 30.08285903930664\n",
      "2.png 31.9764347076416\n",
      "3.png 31.41191864013672\n",
      "4.png 35.123313903808594\n",
      "5.png 30.75741195678711\n",
      "6.png 25.49121856689453\n",
      "7.png 32.50876998901367\n",
      "8.png 25.90874481201172\n",
      "9.png 28.405860900878906\n",
      "10.png 28.71293067932129\n",
      "11.png 28.553470611572266\n",
      "12.png 27.835372924804688\n",
      "13.png 26.554988861083984\n",
      "14.png 22.227691650390625\n",
      "15.png 26.92123794555664\n",
      "16.png 33.38889694213867\n",
      "17.png 28.17295265197754\n",
      "18.png 30.876834869384766\n",
      "19.png 29.725971221923828\n",
      "20.png 26.96782112121582\n",
      "21.png 28.284704208374023\n",
      "22.png 24.801116943359375\n",
      "23.png 25.614646911621094\n",
      "24.png 27.64045524597168\n",
      "25.png 28.6961727142334\n",
      "26.png 34.65629577636719\n",
      "27.png 31.506288528442383\n",
      "28.png 27.579896926879883\n",
      "29.png 29.6669864654541\n",
      "30.png 31.681936264038086\n",
      "31.png 31.744796752929688\n",
      "32.png 29.814302444458008\n",
      "33.png 32.62560272216797\n",
      "34.png 32.847389221191406\n",
      "35.png 29.500362396240234\n",
      "36.png 32.43196105957031\n",
      "37.png 30.14581871032715\n",
      "38.png 31.94096565246582\n",
      "39.png 27.853796005249023\n",
      "Validation PSNR:  29.417885637283327\n",
      "[4531/6000] Iteration: 181210 | Loss: 0.0008 | PSNR: 31.0143 | lr: 0.00010000 | Time: 28.29s\n",
      "[4531/6000] Iteration: 181220 | Loss: 0.0005 | PSNR: 32.9440 | lr: 0.00010000 | Time: 8.76s\n",
      "[4531/6000] Iteration: 181230 | Loss: 0.0003 | PSNR: 34.5905 | lr: 0.00010000 | Time: 8.72s\n",
      "[4531/6000] Iteration: 181240 | Loss: 0.0009 | PSNR: 30.6540 | lr: 0.00010000 | Time: 8.74s\n",
      "[4532/6000] Iteration: 181250 | Loss: 0.0004 | PSNR: 33.9552 | lr: 0.00010000 | Time: 8.72s\n",
      "[4532/6000] Iteration: 181260 | Loss: 0.0006 | PSNR: 32.2730 | lr: 0.00010000 | Time: 8.80s\n",
      "[4532/6000] Iteration: 181270 | Loss: 0.0007 | PSNR: 31.7437 | lr: 0.00010000 | Time: 8.74s\n",
      "[4532/6000] Iteration: 181280 | Loss: 0.0003 | PSNR: 35.2135 | lr: 0.00010000 | Time: 8.73s\n",
      "[4533/6000] Iteration: 181290 | Loss: 0.0005 | PSNR: 33.4148 | lr: 0.00010000 | Time: 8.70s\n",
      "[4533/6000] Iteration: 181300 | Loss: 0.0003 | PSNR: 35.9367 | lr: 0.00010000 | Time: 8.72s\n",
      "[4533/6000] Iteration: 181310 | Loss: 0.0004 | PSNR: 33.7762 | lr: 0.00010000 | Time: 8.69s\n",
      "[4533/6000] Iteration: 181320 | Loss: 0.0003 | PSNR: 34.8844 | lr: 0.00010000 | Time: 8.72s\n",
      "[4534/6000] Iteration: 181330 | Loss: 0.0003 | PSNR: 35.1571 | lr: 0.00010000 | Time: 8.77s\n",
      "[4534/6000] Iteration: 181340 | Loss: 0.0002 | PSNR: 36.2572 | lr: 0.00010000 | Time: 8.75s\n",
      "[4534/6000] Iteration: 181350 | Loss: 0.0004 | PSNR: 34.1374 | lr: 0.00010000 | Time: 8.71s\n",
      "[4534/6000] Iteration: 181360 | Loss: 0.0004 | PSNR: 34.1666 | lr: 0.00010000 | Time: 8.73s\n",
      "[4535/6000] Iteration: 181370 | Loss: 0.0005 | PSNR: 33.3879 | lr: 0.00010000 | Time: 8.71s\n",
      "[4535/6000] Iteration: 181380 | Loss: 0.0003 | PSNR: 34.8612 | lr: 0.00010000 | Time: 8.75s\n",
      "[4535/6000] Iteration: 181390 | Loss: 0.0007 | PSNR: 31.8587 | lr: 0.00010000 | Time: 8.71s\n",
      "[4535/6000] Iteration: 181400 | Loss: 0.0004 | PSNR: 33.7241 | lr: 0.00010000 | Time: 8.71s\n",
      "[4536/6000] Iteration: 181410 | Loss: 0.0009 | PSNR: 30.4768 | lr: 0.00010000 | Time: 8.73s\n",
      "[4536/6000] Iteration: 181420 | Loss: 0.0009 | PSNR: 30.5658 | lr: 0.00010000 | Time: 8.76s\n",
      "[4536/6000] Iteration: 181430 | Loss: 0.0002 | PSNR: 36.0788 | lr: 0.00010000 | Time: 8.71s\n",
      "[4536/6000] Iteration: 181440 | Loss: 0.0004 | PSNR: 34.3920 | lr: 0.00010000 | Time: 8.72s\n",
      "[4537/6000] Iteration: 181450 | Loss: 0.0002 | PSNR: 36.7088 | lr: 0.00010000 | Time: 8.71s\n",
      "[4537/6000] Iteration: 181460 | Loss: 0.0004 | PSNR: 33.8204 | lr: 0.00010000 | Time: 8.72s\n",
      "[4537/6000] Iteration: 181470 | Loss: 0.0004 | PSNR: 34.4441 | lr: 0.00010000 | Time: 8.78s\n",
      "[4537/6000] Iteration: 181480 | Loss: 0.0003 | PSNR: 34.7697 | lr: 0.00010000 | Time: 8.72s\n",
      "[4538/6000] Iteration: 181490 | Loss: 0.0003 | PSNR: 34.5951 | lr: 0.00010000 | Time: 8.75s\n",
      "[4538/6000] Iteration: 181500 | Loss: 0.0003 | PSNR: 34.6726 | lr: 0.00010000 | Time: 8.76s\n",
      "[4538/6000] Iteration: 181510 | Loss: 0.0002 | PSNR: 36.4475 | lr: 0.00010000 | Time: 8.72s\n",
      "[4538/6000] Iteration: 181520 | Loss: 0.0004 | PSNR: 33.9098 | lr: 0.00010000 | Time: 8.75s\n",
      "[4539/6000] Iteration: 181530 | Loss: 0.0005 | PSNR: 33.1412 | lr: 0.00010000 | Time: 8.74s\n",
      "[4539/6000] Iteration: 181540 | Loss: 0.0003 | PSNR: 35.6328 | lr: 0.00010000 | Time: 8.73s\n",
      "[4539/6000] Iteration: 181550 | Loss: 0.0002 | PSNR: 36.2688 | lr: 0.00010000 | Time: 8.78s\n",
      "[4539/6000] Iteration: 181560 | Loss: 0.0002 | PSNR: 37.5873 | lr: 0.00010000 | Time: 8.79s\n",
      "[4540/6000] Iteration: 181570 | Loss: 0.0002 | PSNR: 36.4239 | lr: 0.00010000 | Time: 8.74s\n",
      "[4540/6000] Iteration: 181580 | Loss: 0.0003 | PSNR: 35.9583 | lr: 0.00010000 | Time: 8.78s\n",
      "[4540/6000] Iteration: 181590 | Loss: 0.0002 | PSNR: 36.9457 | lr: 0.00010000 | Time: 8.74s\n",
      "[4540/6000] Iteration: 181600 | Loss: 0.0003 | PSNR: 34.9739 | lr: 0.00010000 | Time: 8.69s\n",
      "[4541/6000] Iteration: 181610 | Loss: 0.0002 | PSNR: 36.0978 | lr: 0.00010000 | Time: 8.78s\n",
      "[4541/6000] Iteration: 181620 | Loss: 0.0003 | PSNR: 35.5502 | lr: 0.00010000 | Time: 8.75s\n",
      "[4541/6000] Iteration: 181630 | Loss: 0.0002 | PSNR: 37.3728 | lr: 0.00010000 | Time: 8.71s\n",
      "[4541/6000] Iteration: 181640 | Loss: 0.0003 | PSNR: 35.1082 | lr: 0.00010000 | Time: 8.69s\n",
      "[4542/6000] Iteration: 181650 | Loss: 0.0002 | PSNR: 37.4405 | lr: 0.00010000 | Time: 8.72s\n",
      "[4542/6000] Iteration: 181660 | Loss: 0.0004 | PSNR: 33.7381 | lr: 0.00010000 | Time: 8.75s\n",
      "[4542/6000] Iteration: 181670 | Loss: 0.0003 | PSNR: 34.8179 | lr: 0.00010000 | Time: 8.71s\n",
      "[4542/6000] Iteration: 181680 | Loss: 0.0003 | PSNR: 35.1777 | lr: 0.00010000 | Time: 8.71s\n",
      "[4543/6000] Iteration: 181690 | Loss: 0.0004 | PSNR: 34.0236 | lr: 0.00010000 | Time: 8.78s\n",
      "[4543/6000] Iteration: 181700 | Loss: 0.0005 | PSNR: 33.2163 | lr: 0.00010000 | Time: 8.76s\n",
      "[4543/6000] Iteration: 181710 | Loss: 0.0006 | PSNR: 31.9207 | lr: 0.00010000 | Time: 8.69s\n",
      "[4543/6000] Iteration: 181720 | Loss: 0.0004 | PSNR: 34.2156 | lr: 0.00010000 | Time: 8.82s\n",
      "[4544/6000] Iteration: 181730 | Loss: 0.0002 | PSNR: 36.2683 | lr: 0.00010000 | Time: 8.69s\n",
      "[4544/6000] Iteration: 181740 | Loss: 0.0002 | PSNR: 36.6142 | lr: 0.00010000 | Time: 8.76s\n",
      "[4544/6000] Iteration: 181750 | Loss: 0.0003 | PSNR: 35.4957 | lr: 0.00010000 | Time: 8.72s\n",
      "[4544/6000] Iteration: 181760 | Loss: 0.0005 | PSNR: 33.1231 | lr: 0.00010000 | Time: 8.73s\n",
      "[4545/6000] Iteration: 181770 | Loss: 0.0008 | PSNR: 30.9372 | lr: 0.00010000 | Time: 8.72s\n",
      "[4545/6000] Iteration: 181780 | Loss: 0.0004 | PSNR: 34.0702 | lr: 0.00010000 | Time: 8.75s\n",
      "[4545/6000] Iteration: 181790 | Loss: 0.0003 | PSNR: 34.8667 | lr: 0.00010000 | Time: 8.75s\n",
      "[4545/6000] Iteration: 181800 | Loss: 0.0003 | PSNR: 34.7465 | lr: 0.00010000 | Time: 8.74s\n",
      "0.png 26.69048309326172\n",
      "1.png 27.90087127685547\n",
      "2.png 30.51022720336914\n",
      "3.png 30.08965301513672\n",
      "4.png 33.58148193359375\n",
      "5.png 32.458473205566406\n",
      "6.png 26.461750030517578\n",
      "7.png 30.99317169189453\n",
      "8.png 21.312149047851562\n",
      "9.png 28.982925415039062\n",
      "10.png 30.157024383544922\n",
      "11.png 26.56195068359375\n",
      "12.png 31.48749542236328\n",
      "13.png 25.593074798583984\n",
      "14.png 23.84078598022461\n",
      "15.png 26.683971405029297\n",
      "16.png 32.692626953125\n",
      "17.png 26.24810791015625\n",
      "18.png 30.68607521057129\n",
      "19.png 30.606060028076172\n",
      "20.png 27.26459503173828\n",
      "21.png 25.061843872070312\n",
      "22.png 23.295177459716797\n",
      "23.png 28.416231155395508\n",
      "24.png 24.135528564453125\n",
      "25.png 27.712360382080078\n",
      "26.png 34.76420974731445\n",
      "27.png 28.138351440429688\n",
      "28.png 25.423288345336914\n",
      "29.png 27.904285430908203\n",
      "30.png 30.5490779876709\n",
      "31.png 33.50246047973633\n",
      "32.png 28.743486404418945\n",
      "33.png 34.143978118896484\n",
      "34.png 31.858802795410156\n",
      "35.png 30.450706481933594\n",
      "36.png 31.994535446166992\n",
      "37.png 29.4681396484375\n",
      "38.png 29.102323532104492\n",
      "39.png 26.354997634887695\n",
      "Validation PSNR:  28.795568466186523\n",
      "[4546/6000] Iteration: 181810 | Loss: 0.0004 | PSNR: 34.3992 | lr: 0.00010000 | Time: 28.37s\n",
      "[4546/6000] Iteration: 181820 | Loss: 0.0003 | PSNR: 34.5860 | lr: 0.00010000 | Time: 8.68s\n",
      "[4546/6000] Iteration: 181830 | Loss: 0.0005 | PSNR: 32.8877 | lr: 0.00010000 | Time: 8.76s\n",
      "[4546/6000] Iteration: 181840 | Loss: 0.0004 | PSNR: 34.1768 | lr: 0.00010000 | Time: 8.77s\n",
      "[4547/6000] Iteration: 181850 | Loss: 0.0004 | PSNR: 33.5191 | lr: 0.00010000 | Time: 8.69s\n",
      "[4547/6000] Iteration: 181860 | Loss: 0.0002 | PSNR: 36.4256 | lr: 0.00010000 | Time: 8.73s\n",
      "[4547/6000] Iteration: 181870 | Loss: 0.0005 | PSNR: 32.8338 | lr: 0.00010000 | Time: 8.72s\n",
      "[4547/6000] Iteration: 181880 | Loss: 0.0011 | PSNR: 29.7235 | lr: 0.00010000 | Time: 8.75s\n",
      "[4548/6000] Iteration: 181890 | Loss: 0.0003 | PSNR: 34.7038 | lr: 0.00010000 | Time: 8.73s\n",
      "[4548/6000] Iteration: 181900 | Loss: 0.0003 | PSNR: 34.9325 | lr: 0.00010000 | Time: 8.71s\n",
      "[4548/6000] Iteration: 181910 | Loss: 0.0003 | PSNR: 35.4219 | lr: 0.00010000 | Time: 8.68s\n",
      "[4548/6000] Iteration: 181920 | Loss: 0.0008 | PSNR: 30.8990 | lr: 0.00010000 | Time: 8.75s\n",
      "[4549/6000] Iteration: 181930 | Loss: 0.0003 | PSNR: 35.6672 | lr: 0.00010000 | Time: 8.75s\n",
      "[4549/6000] Iteration: 181940 | Loss: 0.0003 | PSNR: 35.5657 | lr: 0.00010000 | Time: 8.68s\n",
      "[4549/6000] Iteration: 181950 | Loss: 0.0005 | PSNR: 33.1221 | lr: 0.00010000 | Time: 8.74s\n",
      "[4549/6000] Iteration: 181960 | Loss: 0.0005 | PSNR: 33.2514 | lr: 0.00010000 | Time: 8.77s\n",
      "[4550/6000] Iteration: 181970 | Loss: 0.0003 | PSNR: 34.7474 | lr: 0.00010000 | Time: 8.74s\n",
      "[4550/6000] Iteration: 181980 | Loss: 0.0005 | PSNR: 32.8311 | lr: 0.00010000 | Time: 8.70s\n",
      "[4550/6000] Iteration: 181990 | Loss: 0.0004 | PSNR: 33.8040 | lr: 0.00010000 | Time: 8.70s\n",
      "[4550/6000] Iteration: 182000 | Loss: 0.0004 | PSNR: 34.0986 | lr: 0.00010000 | Time: 8.69s\n",
      "[4551/6000] Iteration: 182010 | Loss: 0.0006 | PSNR: 32.2067 | lr: 0.00010000 | Time: 8.74s\n",
      "[4551/6000] Iteration: 182020 | Loss: 0.0006 | PSNR: 32.5932 | lr: 0.00010000 | Time: 8.67s\n",
      "[4551/6000] Iteration: 182030 | Loss: 0.0003 | PSNR: 34.8687 | lr: 0.00010000 | Time: 8.75s\n",
      "[4551/6000] Iteration: 182040 | Loss: 0.0003 | PSNR: 34.7008 | lr: 0.00010000 | Time: 8.75s\n",
      "[4552/6000] Iteration: 182050 | Loss: 0.0005 | PSNR: 32.7308 | lr: 0.00010000 | Time: 8.76s\n",
      "[4552/6000] Iteration: 182060 | Loss: 0.0011 | PSNR: 29.7213 | lr: 0.00010000 | Time: 8.78s\n",
      "[4552/6000] Iteration: 182070 | Loss: 0.0006 | PSNR: 32.4660 | lr: 0.00010000 | Time: 8.71s\n",
      "[4552/6000] Iteration: 182080 | Loss: 0.0004 | PSNR: 34.1901 | lr: 0.00010000 | Time: 8.67s\n",
      "[4553/6000] Iteration: 182090 | Loss: 0.0003 | PSNR: 34.5913 | lr: 0.00010000 | Time: 8.80s\n",
      "[4553/6000] Iteration: 182100 | Loss: 0.0003 | PSNR: 34.9809 | lr: 0.00010000 | Time: 8.72s\n",
      "[4553/6000] Iteration: 182110 | Loss: 0.0003 | PSNR: 34.9415 | lr: 0.00010000 | Time: 8.72s\n",
      "[4553/6000] Iteration: 182120 | Loss: 0.0006 | PSNR: 32.3710 | lr: 0.00010000 | Time: 8.67s\n",
      "[4554/6000] Iteration: 182130 | Loss: 0.0008 | PSNR: 31.2249 | lr: 0.00010000 | Time: 8.72s\n",
      "[4554/6000] Iteration: 182140 | Loss: 0.0004 | PSNR: 34.1038 | lr: 0.00010000 | Time: 8.77s\n",
      "[4554/6000] Iteration: 182150 | Loss: 0.0009 | PSNR: 30.6270 | lr: 0.00010000 | Time: 8.66s\n",
      "[4554/6000] Iteration: 182160 | Loss: 0.0006 | PSNR: 32.2076 | lr: 0.00010000 | Time: 8.71s\n",
      "[4555/6000] Iteration: 182170 | Loss: 0.0003 | PSNR: 35.9586 | lr: 0.00010000 | Time: 8.76s\n",
      "[4555/6000] Iteration: 182180 | Loss: 0.0007 | PSNR: 31.6849 | lr: 0.00010000 | Time: 8.74s\n",
      "[4555/6000] Iteration: 182190 | Loss: 0.0005 | PSNR: 33.2036 | lr: 0.00010000 | Time: 8.67s\n",
      "[4555/6000] Iteration: 182200 | Loss: 0.0005 | PSNR: 33.2127 | lr: 0.00010000 | Time: 8.74s\n",
      "[4556/6000] Iteration: 182210 | Loss: 0.0013 | PSNR: 28.8493 | lr: 0.00010000 | Time: 8.72s\n",
      "[4556/6000] Iteration: 182220 | Loss: 0.0004 | PSNR: 34.0856 | lr: 0.00010000 | Time: 8.74s\n",
      "[4556/6000] Iteration: 182230 | Loss: 0.0006 | PSNR: 32.0871 | lr: 0.00010000 | Time: 8.72s\n",
      "[4556/6000] Iteration: 182240 | Loss: 0.0010 | PSNR: 30.1293 | lr: 0.00010000 | Time: 8.70s\n",
      "[4557/6000] Iteration: 182250 | Loss: 0.0004 | PSNR: 33.5102 | lr: 0.00010000 | Time: 8.72s\n",
      "[4557/6000] Iteration: 182260 | Loss: 0.0005 | PSNR: 33.2162 | lr: 0.00010000 | Time: 8.74s\n",
      "[4557/6000] Iteration: 182270 | Loss: 0.0007 | PSNR: 31.2953 | lr: 0.00010000 | Time: 8.75s\n",
      "[4557/6000] Iteration: 182280 | Loss: 0.0003 | PSNR: 35.3365 | lr: 0.00010000 | Time: 8.77s\n",
      "[4558/6000] Iteration: 182290 | Loss: 0.0004 | PSNR: 34.3836 | lr: 0.00010000 | Time: 8.70s\n",
      "[4558/6000] Iteration: 182300 | Loss: 0.0006 | PSNR: 32.0501 | lr: 0.00010000 | Time: 8.73s\n",
      "[4558/6000] Iteration: 182310 | Loss: 0.0004 | PSNR: 34.0158 | lr: 0.00010000 | Time: 8.73s\n",
      "[4558/6000] Iteration: 182320 | Loss: 0.0003 | PSNR: 35.2717 | lr: 0.00010000 | Time: 8.72s\n",
      "[4559/6000] Iteration: 182330 | Loss: 0.0004 | PSNR: 33.5033 | lr: 0.00010000 | Time: 8.68s\n",
      "[4559/6000] Iteration: 182340 | Loss: 0.0006 | PSNR: 32.5356 | lr: 0.00010000 | Time: 8.76s\n",
      "[4559/6000] Iteration: 182350 | Loss: 0.0013 | PSNR: 28.7553 | lr: 0.00010000 | Time: 8.77s\n",
      "[4559/6000] Iteration: 182360 | Loss: 0.0004 | PSNR: 33.4876 | lr: 0.00010000 | Time: 8.74s\n",
      "[4560/6000] Iteration: 182370 | Loss: 0.0003 | PSNR: 35.5909 | lr: 0.00010000 | Time: 8.72s\n",
      "[4560/6000] Iteration: 182380 | Loss: 0.0004 | PSNR: 34.5334 | lr: 0.00010000 | Time: 8.73s\n",
      "[4560/6000] Iteration: 182390 | Loss: 0.0007 | PSNR: 31.5258 | lr: 0.00010000 | Time: 8.70s\n",
      "[4560/6000] Iteration: 182400 | Loss: 0.0011 | PSNR: 29.4833 | lr: 0.00010000 | Time: 8.73s\n",
      "0.png 27.003623962402344\n",
      "1.png 30.389629364013672\n",
      "2.png 32.49960708618164\n",
      "3.png 32.40947341918945\n",
      "4.png 34.17109680175781\n",
      "5.png 29.631576538085938\n",
      "6.png 29.282550811767578\n",
      "7.png 32.5098762512207\n",
      "8.png 22.441312789916992\n",
      "9.png 28.853271484375\n",
      "10.png 28.080738067626953\n",
      "11.png 27.26914405822754\n",
      "12.png 29.664106369018555\n",
      "13.png 22.370786666870117\n",
      "14.png 27.364498138427734\n",
      "15.png 28.98470115661621\n",
      "16.png 33.613380432128906\n",
      "17.png 30.226348876953125\n",
      "18.png 29.614294052124023\n",
      "19.png 28.77798080444336\n",
      "20.png 26.305866241455078\n",
      "21.png 27.607711791992188\n",
      "22.png 26.685802459716797\n",
      "23.png 27.646615982055664\n",
      "24.png 27.497283935546875\n",
      "25.png 25.759700775146484\n",
      "26.png 28.7032413482666\n",
      "27.png 31.35686492919922\n",
      "28.png 28.12983512878418\n",
      "29.png 24.516132354736328\n",
      "30.png 32.00925827026367\n",
      "31.png 32.550201416015625\n",
      "32.png 31.462764739990234\n",
      "33.png 32.44747543334961\n",
      "34.png 31.451187133789062\n",
      "35.png 29.355804443359375\n",
      "36.png 31.7142333984375\n",
      "37.png 31.47559356689453\n",
      "38.png 29.18376922607422\n",
      "39.png 28.983840942382812\n",
      "Validation PSNR:  29.250029516220092\n",
      "[4561/6000] Iteration: 182410 | Loss: 0.0009 | PSNR: 30.3257 | lr: 0.00010000 | Time: 28.47s\n",
      "[4561/6000] Iteration: 182420 | Loss: 0.0007 | PSNR: 31.5548 | lr: 0.00010000 | Time: 8.70s\n",
      "[4561/6000] Iteration: 182430 | Loss: 0.0006 | PSNR: 32.2826 | lr: 0.00010000 | Time: 8.70s\n",
      "[4561/6000] Iteration: 182440 | Loss: 0.0004 | PSNR: 34.2194 | lr: 0.00010000 | Time: 8.70s\n",
      "[4562/6000] Iteration: 182450 | Loss: 0.0003 | PSNR: 34.7174 | lr: 0.00010000 | Time: 8.75s\n",
      "[4562/6000] Iteration: 182460 | Loss: 0.0004 | PSNR: 34.0208 | lr: 0.00010000 | Time: 8.71s\n",
      "[4562/6000] Iteration: 182470 | Loss: 0.0004 | PSNR: 33.5336 | lr: 0.00010000 | Time: 8.78s\n",
      "[4562/6000] Iteration: 182480 | Loss: 0.0003 | PSNR: 35.8278 | lr: 0.00010000 | Time: 8.72s\n",
      "[4563/6000] Iteration: 182490 | Loss: 0.0005 | PSNR: 33.2058 | lr: 0.00010000 | Time: 8.73s\n",
      "[4563/6000] Iteration: 182500 | Loss: 0.0005 | PSNR: 33.1174 | lr: 0.00010000 | Time: 8.77s\n",
      "[4563/6000] Iteration: 182510 | Loss: 0.0009 | PSNR: 30.3831 | lr: 0.00010000 | Time: 8.70s\n",
      "[4563/6000] Iteration: 182520 | Loss: 0.0003 | PSNR: 36.0117 | lr: 0.00010000 | Time: 8.73s\n",
      "[4564/6000] Iteration: 182530 | Loss: 0.0006 | PSNR: 32.1053 | lr: 0.00010000 | Time: 8.80s\n",
      "[4564/6000] Iteration: 182540 | Loss: 0.0005 | PSNR: 33.3561 | lr: 0.00010000 | Time: 8.72s\n",
      "[4564/6000] Iteration: 182550 | Loss: 0.0004 | PSNR: 34.3404 | lr: 0.00010000 | Time: 8.69s\n",
      "[4564/6000] Iteration: 182560 | Loss: 0.0005 | PSNR: 33.0158 | lr: 0.00010000 | Time: 8.70s\n",
      "[4565/6000] Iteration: 182570 | Loss: 0.0003 | PSNR: 35.2456 | lr: 0.00010000 | Time: 8.76s\n",
      "[4565/6000] Iteration: 182580 | Loss: 0.0004 | PSNR: 34.4933 | lr: 0.00010000 | Time: 8.71s\n",
      "[4565/6000] Iteration: 182590 | Loss: 0.0004 | PSNR: 33.4794 | lr: 0.00010000 | Time: 8.70s\n",
      "[4565/6000] Iteration: 182600 | Loss: 0.0004 | PSNR: 34.4064 | lr: 0.00010000 | Time: 8.74s\n",
      "[4566/6000] Iteration: 182610 | Loss: 0.0005 | PSNR: 33.2580 | lr: 0.00010000 | Time: 8.73s\n",
      "[4566/6000] Iteration: 182620 | Loss: 0.0004 | PSNR: 34.2737 | lr: 0.00010000 | Time: 8.75s\n",
      "[4566/6000] Iteration: 182630 | Loss: 0.0006 | PSNR: 32.5600 | lr: 0.00010000 | Time: 8.70s\n",
      "[4566/6000] Iteration: 182640 | Loss: 0.0003 | PSNR: 34.7034 | lr: 0.00010000 | Time: 8.75s\n",
      "[4567/6000] Iteration: 182650 | Loss: 0.0007 | PSNR: 31.8548 | lr: 0.00010000 | Time: 8.69s\n",
      "[4567/6000] Iteration: 182660 | Loss: 0.0010 | PSNR: 30.1416 | lr: 0.00010000 | Time: 8.71s\n",
      "[4567/6000] Iteration: 182670 | Loss: 0.0005 | PSNR: 33.0285 | lr: 0.00010000 | Time: 8.69s\n",
      "[4567/6000] Iteration: 182680 | Loss: 0.0006 | PSNR: 32.3090 | lr: 0.00010000 | Time: 8.73s\n",
      "[4568/6000] Iteration: 182690 | Loss: 0.0004 | PSNR: 34.3995 | lr: 0.00010000 | Time: 8.73s\n",
      "[4568/6000] Iteration: 182700 | Loss: 0.0004 | PSNR: 34.1177 | lr: 0.00010000 | Time: 8.74s\n",
      "[4568/6000] Iteration: 182710 | Loss: 0.0003 | PSNR: 35.0314 | lr: 0.00010000 | Time: 8.75s\n",
      "[4568/6000] Iteration: 182720 | Loss: 0.0001 | PSNR: 39.0028 | lr: 0.00010000 | Time: 8.83s\n",
      "[4569/6000] Iteration: 182730 | Loss: 0.0003 | PSNR: 34.9398 | lr: 0.00010000 | Time: 8.78s\n",
      "[4569/6000] Iteration: 182740 | Loss: 0.0007 | PSNR: 31.6761 | lr: 0.00010000 | Time: 8.74s\n",
      "[4569/6000] Iteration: 182750 | Loss: 0.0010 | PSNR: 29.8427 | lr: 0.00010000 | Time: 8.78s\n",
      "[4569/6000] Iteration: 182760 | Loss: 0.0003 | PSNR: 35.5892 | lr: 0.00010000 | Time: 8.73s\n",
      "[4570/6000] Iteration: 182770 | Loss: 0.0005 | PSNR: 33.3311 | lr: 0.00010000 | Time: 8.73s\n",
      "[4570/6000] Iteration: 182780 | Loss: 0.0006 | PSNR: 32.2112 | lr: 0.00010000 | Time: 8.74s\n",
      "[4570/6000] Iteration: 182790 | Loss: 0.0004 | PSNR: 34.1161 | lr: 0.00010000 | Time: 8.67s\n",
      "[4570/6000] Iteration: 182800 | Loss: 0.0011 | PSNR: 29.3970 | lr: 0.00010000 | Time: 8.71s\n",
      "[4571/6000] Iteration: 182810 | Loss: 0.0005 | PSNR: 32.6574 | lr: 0.00010000 | Time: 8.72s\n",
      "[4571/6000] Iteration: 182820 | Loss: 0.0010 | PSNR: 29.9737 | lr: 0.00010000 | Time: 8.72s\n",
      "[4571/6000] Iteration: 182830 | Loss: 0.0005 | PSNR: 32.9570 | lr: 0.00010000 | Time: 8.70s\n",
      "[4571/6000] Iteration: 182840 | Loss: 0.0007 | PSNR: 31.8155 | lr: 0.00010000 | Time: 8.72s\n",
      "[4572/6000] Iteration: 182850 | Loss: 0.0012 | PSNR: 29.2356 | lr: 0.00010000 | Time: 8.70s\n",
      "[4572/6000] Iteration: 182860 | Loss: 0.0010 | PSNR: 29.9662 | lr: 0.00010000 | Time: 8.78s\n",
      "[4572/6000] Iteration: 182870 | Loss: 0.0006 | PSNR: 32.1152 | lr: 0.00010000 | Time: 8.69s\n",
      "[4572/6000] Iteration: 182880 | Loss: 0.0004 | PSNR: 33.8169 | lr: 0.00010000 | Time: 8.71s\n",
      "[4573/6000] Iteration: 182890 | Loss: 0.0005 | PSNR: 33.2411 | lr: 0.00010000 | Time: 8.74s\n",
      "[4573/6000] Iteration: 182900 | Loss: 0.0011 | PSNR: 29.4927 | lr: 0.00010000 | Time: 8.78s\n",
      "[4573/6000] Iteration: 182910 | Loss: 0.0013 | PSNR: 28.9274 | lr: 0.00010000 | Time: 8.74s\n",
      "[4573/6000] Iteration: 182920 | Loss: 0.0009 | PSNR: 30.5274 | lr: 0.00010000 | Time: 8.73s\n",
      "[4574/6000] Iteration: 182930 | Loss: 0.0010 | PSNR: 29.8316 | lr: 0.00010000 | Time: 8.73s\n",
      "[4574/6000] Iteration: 182940 | Loss: 0.0007 | PSNR: 31.6566 | lr: 0.00010000 | Time: 8.80s\n",
      "[4574/6000] Iteration: 182950 | Loss: 0.0003 | PSNR: 35.5302 | lr: 0.00010000 | Time: 8.75s\n",
      "[4574/6000] Iteration: 182960 | Loss: 0.0003 | PSNR: 35.2286 | lr: 0.00010000 | Time: 8.72s\n",
      "[4575/6000] Iteration: 182970 | Loss: 0.0005 | PSNR: 33.0058 | lr: 0.00010000 | Time: 8.76s\n",
      "[4575/6000] Iteration: 182980 | Loss: 0.0006 | PSNR: 31.8908 | lr: 0.00010000 | Time: 8.76s\n",
      "[4575/6000] Iteration: 182990 | Loss: 0.0003 | PSNR: 34.6076 | lr: 0.00010000 | Time: 8.71s\n",
      "[4575/6000] Iteration: 183000 | Loss: 0.0004 | PSNR: 33.7224 | lr: 0.00010000 | Time: 8.73s\n",
      "0.png 27.851421356201172\n",
      "1.png 30.481443405151367\n",
      "2.png 33.91620635986328\n",
      "3.png 31.529071807861328\n",
      "4.png 31.79753303527832\n",
      "5.png 32.353919982910156\n",
      "6.png 28.57407569885254\n",
      "7.png 32.59003448486328\n",
      "8.png 24.417861938476562\n",
      "9.png 28.491432189941406\n",
      "10.png 29.105043411254883\n",
      "11.png 27.1041202545166\n",
      "12.png 28.865020751953125\n",
      "13.png 24.683116912841797\n",
      "14.png 31.5423583984375\n",
      "15.png 31.913005828857422\n",
      "16.png 28.86239242553711\n",
      "17.png 29.977590560913086\n",
      "18.png 29.06930160522461\n",
      "19.png 27.634523391723633\n",
      "20.png 24.420764923095703\n",
      "21.png 27.614076614379883\n",
      "22.png 23.86145782470703\n",
      "23.png 31.52549934387207\n",
      "24.png 26.760541915893555\n",
      "25.png 25.525102615356445\n",
      "26.png 34.59922790527344\n",
      "27.png 31.915843963623047\n",
      "28.png 29.735078811645508\n",
      "29.png 26.70053482055664\n",
      "30.png 33.77517318725586\n",
      "31.png 31.804786682128906\n",
      "32.png 29.685386657714844\n",
      "33.png 32.953392028808594\n",
      "34.png 29.34532356262207\n",
      "35.png 30.467525482177734\n",
      "36.png 32.37326431274414\n",
      "37.png 32.36488723754883\n",
      "38.png 27.011430740356445\n",
      "39.png 29.30636215209961\n",
      "Validation PSNR:  29.56262836456299\n",
      "[4576/6000] Iteration: 183010 | Loss: 0.0003 | PSNR: 35.5622 | lr: 0.00010000 | Time: 28.44s\n",
      "[4576/6000] Iteration: 183020 | Loss: 0.0004 | PSNR: 34.3461 | lr: 0.00010000 | Time: 8.79s\n",
      "[4576/6000] Iteration: 183030 | Loss: 0.0006 | PSNR: 32.5896 | lr: 0.00010000 | Time: 8.77s\n",
      "[4576/6000] Iteration: 183040 | Loss: 0.0004 | PSNR: 34.5348 | lr: 0.00010000 | Time: 8.81s\n",
      "[4577/6000] Iteration: 183050 | Loss: 0.0006 | PSNR: 32.0322 | lr: 0.00010000 | Time: 8.81s\n",
      "[4577/6000] Iteration: 183060 | Loss: 0.0006 | PSNR: 31.9669 | lr: 0.00010000 | Time: 8.72s\n",
      "[4577/6000] Iteration: 183070 | Loss: 0.0006 | PSNR: 32.0641 | lr: 0.00010000 | Time: 8.71s\n",
      "[4577/6000] Iteration: 183080 | Loss: 0.0003 | PSNR: 34.8840 | lr: 0.00010000 | Time: 8.75s\n",
      "[4578/6000] Iteration: 183090 | Loss: 0.0008 | PSNR: 30.9298 | lr: 0.00010000 | Time: 8.70s\n",
      "[4578/6000] Iteration: 183100 | Loss: 0.0014 | PSNR: 28.4548 | lr: 0.00010000 | Time: 8.76s\n",
      "[4578/6000] Iteration: 183110 | Loss: 0.0004 | PSNR: 33.5584 | lr: 0.00010000 | Time: 8.77s\n",
      "[4578/6000] Iteration: 183120 | Loss: 0.0005 | PSNR: 33.3168 | lr: 0.00010000 | Time: 8.82s\n",
      "[4579/6000] Iteration: 183130 | Loss: 0.0003 | PSNR: 35.3110 | lr: 0.00010000 | Time: 8.76s\n",
      "[4579/6000] Iteration: 183140 | Loss: 0.0002 | PSNR: 36.3728 | lr: 0.00010000 | Time: 8.76s\n",
      "[4579/6000] Iteration: 183150 | Loss: 0.0004 | PSNR: 33.7939 | lr: 0.00010000 | Time: 8.70s\n",
      "[4579/6000] Iteration: 183160 | Loss: 0.0004 | PSNR: 33.8474 | lr: 0.00010000 | Time: 8.74s\n",
      "[4580/6000] Iteration: 183170 | Loss: 0.0006 | PSNR: 32.0295 | lr: 0.00010000 | Time: 8.69s\n",
      "[4580/6000] Iteration: 183180 | Loss: 0.0004 | PSNR: 33.6269 | lr: 0.00010000 | Time: 8.67s\n",
      "[4580/6000] Iteration: 183190 | Loss: 0.0004 | PSNR: 34.2579 | lr: 0.00010000 | Time: 8.74s\n",
      "[4580/6000] Iteration: 183200 | Loss: 0.0002 | PSNR: 36.3130 | lr: 0.00010000 | Time: 8.80s\n",
      "[4581/6000] Iteration: 183210 | Loss: 0.0003 | PSNR: 34.7209 | lr: 0.00010000 | Time: 8.72s\n",
      "[4581/6000] Iteration: 183220 | Loss: 0.0005 | PSNR: 33.2330 | lr: 0.00010000 | Time: 8.75s\n",
      "[4581/6000] Iteration: 183230 | Loss: 0.0002 | PSNR: 36.1412 | lr: 0.00010000 | Time: 8.73s\n",
      "[4581/6000] Iteration: 183240 | Loss: 0.0006 | PSNR: 32.2667 | lr: 0.00010000 | Time: 8.70s\n",
      "[4582/6000] Iteration: 183250 | Loss: 0.0004 | PSNR: 33.6553 | lr: 0.00010000 | Time: 8.76s\n",
      "[4582/6000] Iteration: 183260 | Loss: 0.0003 | PSNR: 35.1219 | lr: 0.00010000 | Time: 8.70s\n",
      "[4582/6000] Iteration: 183270 | Loss: 0.0002 | PSNR: 38.0412 | lr: 0.00010000 | Time: 8.70s\n",
      "[4582/6000] Iteration: 183280 | Loss: 0.0014 | PSNR: 28.6657 | lr: 0.00010000 | Time: 8.73s\n",
      "[4583/6000] Iteration: 183290 | Loss: 0.0002 | PSNR: 37.2518 | lr: 0.00010000 | Time: 8.77s\n",
      "[4583/6000] Iteration: 183300 | Loss: 0.0004 | PSNR: 33.5022 | lr: 0.00010000 | Time: 8.67s\n",
      "[4583/6000] Iteration: 183310 | Loss: 0.0002 | PSNR: 36.5698 | lr: 0.00010000 | Time: 8.66s\n",
      "[4583/6000] Iteration: 183320 | Loss: 0.0003 | PSNR: 34.6664 | lr: 0.00010000 | Time: 8.70s\n",
      "[4584/6000] Iteration: 183330 | Loss: 0.0002 | PSNR: 36.0452 | lr: 0.00010000 | Time: 8.70s\n",
      "[4584/6000] Iteration: 183340 | Loss: 0.0003 | PSNR: 35.1623 | lr: 0.00010000 | Time: 8.78s\n",
      "[4584/6000] Iteration: 183350 | Loss: 0.0003 | PSNR: 34.6257 | lr: 0.00010000 | Time: 8.70s\n",
      "[4584/6000] Iteration: 183360 | Loss: 0.0004 | PSNR: 33.7879 | lr: 0.00010000 | Time: 8.72s\n",
      "[4585/6000] Iteration: 183370 | Loss: 0.0004 | PSNR: 33.9029 | lr: 0.00010000 | Time: 8.70s\n",
      "[4585/6000] Iteration: 183380 | Loss: 0.0005 | PSNR: 33.4557 | lr: 0.00010000 | Time: 8.73s\n",
      "[4585/6000] Iteration: 183390 | Loss: 0.0002 | PSNR: 36.9428 | lr: 0.00010000 | Time: 8.72s\n",
      "[4585/6000] Iteration: 183400 | Loss: 0.0004 | PSNR: 34.3786 | lr: 0.00010000 | Time: 8.74s\n",
      "[4586/6000] Iteration: 183410 | Loss: 0.0003 | PSNR: 35.5802 | lr: 0.00010000 | Time: 8.74s\n",
      "[4586/6000] Iteration: 183420 | Loss: 0.0003 | PSNR: 35.4423 | lr: 0.00010000 | Time: 8.68s\n",
      "[4586/6000] Iteration: 183430 | Loss: 0.0004 | PSNR: 33.6889 | lr: 0.00010000 | Time: 8.74s\n",
      "[4586/6000] Iteration: 183440 | Loss: 0.0004 | PSNR: 34.5165 | lr: 0.00010000 | Time: 8.72s\n",
      "[4587/6000] Iteration: 183450 | Loss: 0.0010 | PSNR: 30.1374 | lr: 0.00010000 | Time: 8.73s\n",
      "[4587/6000] Iteration: 183460 | Loss: 0.0004 | PSNR: 33.5208 | lr: 0.00010000 | Time: 8.73s\n",
      "[4587/6000] Iteration: 183470 | Loss: 0.0003 | PSNR: 34.9253 | lr: 0.00010000 | Time: 8.76s\n",
      "[4587/6000] Iteration: 183480 | Loss: 0.0002 | PSNR: 36.6209 | lr: 0.00010000 | Time: 8.70s\n",
      "[4588/6000] Iteration: 183490 | Loss: 0.0002 | PSNR: 36.5136 | lr: 0.00010000 | Time: 8.73s\n",
      "[4588/6000] Iteration: 183500 | Loss: 0.0005 | PSNR: 32.6504 | lr: 0.00010000 | Time: 8.69s\n",
      "[4588/6000] Iteration: 183510 | Loss: 0.0004 | PSNR: 34.4113 | lr: 0.00010000 | Time: 8.73s\n",
      "[4588/6000] Iteration: 183520 | Loss: 0.0003 | PSNR: 34.6596 | lr: 0.00010000 | Time: 8.72s\n",
      "[4589/6000] Iteration: 183530 | Loss: 0.0003 | PSNR: 34.6661 | lr: 0.00010000 | Time: 8.72s\n",
      "[4589/6000] Iteration: 183540 | Loss: 0.0003 | PSNR: 34.8658 | lr: 0.00010000 | Time: 8.76s\n",
      "[4589/6000] Iteration: 183550 | Loss: 0.0005 | PSNR: 33.2633 | lr: 0.00010000 | Time: 8.71s\n",
      "[4589/6000] Iteration: 183560 | Loss: 0.0003 | PSNR: 34.5942 | lr: 0.00010000 | Time: 8.67s\n",
      "[4590/6000] Iteration: 183570 | Loss: 0.0003 | PSNR: 35.7697 | lr: 0.00010000 | Time: 8.71s\n",
      "[4590/6000] Iteration: 183580 | Loss: 0.0003 | PSNR: 34.7725 | lr: 0.00010000 | Time: 8.78s\n",
      "[4590/6000] Iteration: 183590 | Loss: 0.0003 | PSNR: 34.7507 | lr: 0.00010000 | Time: 8.70s\n",
      "[4590/6000] Iteration: 183600 | Loss: 0.0002 | PSNR: 37.0353 | lr: 0.00010000 | Time: 8.69s\n",
      "0.png 26.45791244506836\n",
      "1.png 29.104700088500977\n",
      "2.png 29.893085479736328\n",
      "3.png 29.56009292602539\n",
      "4.png 33.31608200073242\n",
      "5.png 31.888267517089844\n",
      "6.png 24.798004150390625\n",
      "7.png 32.72324752807617\n",
      "8.png 23.444673538208008\n",
      "9.png 29.42950439453125\n",
      "10.png 30.211048126220703\n",
      "11.png 29.425155639648438\n",
      "12.png 31.33308219909668\n",
      "13.png 26.76274299621582\n",
      "14.png 24.080963134765625\n",
      "15.png 26.536550521850586\n",
      "16.png 31.819631576538086\n",
      "17.png 25.75170135498047\n",
      "18.png 30.03036117553711\n",
      "19.png 30.836280822753906\n",
      "20.png 28.531187057495117\n",
      "21.png 26.490137100219727\n",
      "22.png 23.718982696533203\n",
      "23.png 27.376384735107422\n",
      "24.png 23.9207763671875\n",
      "25.png 29.646360397338867\n",
      "26.png 31.791841506958008\n",
      "27.png 28.299964904785156\n",
      "28.png 24.933395385742188\n",
      "29.png 29.545120239257812\n",
      "30.png 30.799386978149414\n",
      "31.png 33.463165283203125\n",
      "32.png 30.35953140258789\n",
      "33.png 34.351348876953125\n",
      "34.png 32.02894592285156\n",
      "35.png 29.485004425048828\n",
      "36.png 30.96844482421875\n",
      "37.png 29.493133544921875\n",
      "38.png 30.475231170654297\n",
      "39.png 24.643169403076172\n",
      "Validation PSNR:  28.94311499595642\n",
      "[4591/6000] Iteration: 183610 | Loss: 0.0010 | PSNR: 29.9564 | lr: 0.00010000 | Time: 28.34s\n",
      "[4591/6000] Iteration: 183620 | Loss: 0.0003 | PSNR: 35.2809 | lr: 0.00010000 | Time: 8.75s\n",
      "[4591/6000] Iteration: 183630 | Loss: 0.0005 | PSNR: 32.6317 | lr: 0.00010000 | Time: 8.72s\n",
      "[4591/6000] Iteration: 183640 | Loss: 0.0003 | PSNR: 35.3618 | lr: 0.00010000 | Time: 8.68s\n",
      "[4592/6000] Iteration: 183650 | Loss: 0.0002 | PSNR: 36.8912 | lr: 0.00010000 | Time: 8.72s\n",
      "[4592/6000] Iteration: 183660 | Loss: 0.0004 | PSNR: 33.5679 | lr: 0.00010000 | Time: 8.74s\n",
      "[4592/6000] Iteration: 183670 | Loss: 0.0003 | PSNR: 35.1613 | lr: 0.00010000 | Time: 8.75s\n",
      "[4592/6000] Iteration: 183680 | Loss: 0.0004 | PSNR: 34.3997 | lr: 0.00010000 | Time: 8.71s\n",
      "[4593/6000] Iteration: 183690 | Loss: 0.0007 | PSNR: 31.7727 | lr: 0.00010000 | Time: 8.71s\n",
      "[4593/6000] Iteration: 183700 | Loss: 0.0002 | PSNR: 36.1809 | lr: 0.00010000 | Time: 8.73s\n",
      "[4593/6000] Iteration: 183710 | Loss: 0.0007 | PSNR: 31.5316 | lr: 0.00010000 | Time: 8.70s\n",
      "[4593/6000] Iteration: 183720 | Loss: 0.0003 | PSNR: 35.5636 | lr: 0.00010000 | Time: 8.77s\n",
      "[4594/6000] Iteration: 183730 | Loss: 0.0003 | PSNR: 35.1516 | lr: 0.00010000 | Time: 8.74s\n",
      "[4594/6000] Iteration: 183740 | Loss: 0.0006 | PSNR: 32.4432 | lr: 0.00010000 | Time: 8.72s\n",
      "[4594/6000] Iteration: 183750 | Loss: 0.0004 | PSNR: 34.1048 | lr: 0.00010000 | Time: 8.75s\n",
      "[4594/6000] Iteration: 183760 | Loss: 0.0007 | PSNR: 31.5858 | lr: 0.00010000 | Time: 8.74s\n",
      "[4595/6000] Iteration: 183770 | Loss: 0.0009 | PSNR: 30.4476 | lr: 0.00010000 | Time: 8.76s\n",
      "[4595/6000] Iteration: 183780 | Loss: 0.0002 | PSNR: 36.6037 | lr: 0.00010000 | Time: 8.70s\n",
      "[4595/6000] Iteration: 183790 | Loss: 0.0006 | PSNR: 31.9981 | lr: 0.00010000 | Time: 8.71s\n",
      "[4595/6000] Iteration: 183800 | Loss: 0.0006 | PSNR: 32.2174 | lr: 0.00010000 | Time: 8.80s\n",
      "[4596/6000] Iteration: 183810 | Loss: 0.0009 | PSNR: 30.3251 | lr: 0.00010000 | Time: 8.77s\n",
      "[4596/6000] Iteration: 183820 | Loss: 0.0003 | PSNR: 34.9836 | lr: 0.00010000 | Time: 8.69s\n",
      "[4596/6000] Iteration: 183830 | Loss: 0.0010 | PSNR: 30.0176 | lr: 0.00010000 | Time: 8.70s\n",
      "[4596/6000] Iteration: 183840 | Loss: 0.0004 | PSNR: 33.7015 | lr: 0.00010000 | Time: 8.73s\n",
      "[4597/6000] Iteration: 183850 | Loss: 0.0004 | PSNR: 33.9579 | lr: 0.00010000 | Time: 8.73s\n",
      "[4597/6000] Iteration: 183860 | Loss: 0.0004 | PSNR: 34.4289 | lr: 0.00010000 | Time: 8.71s\n",
      "[4597/6000] Iteration: 183870 | Loss: 0.0006 | PSNR: 32.4849 | lr: 0.00010000 | Time: 8.71s\n",
      "[4597/6000] Iteration: 183880 | Loss: 0.0004 | PSNR: 34.2777 | lr: 0.00010000 | Time: 8.73s\n",
      "[4598/6000] Iteration: 183890 | Loss: 0.0004 | PSNR: 34.2843 | lr: 0.00010000 | Time: 8.73s\n",
      "[4598/6000] Iteration: 183900 | Loss: 0.0006 | PSNR: 32.4079 | lr: 0.00010000 | Time: 8.73s\n",
      "[4598/6000] Iteration: 183910 | Loss: 0.0008 | PSNR: 30.9248 | lr: 0.00010000 | Time: 8.73s\n",
      "[4598/6000] Iteration: 183920 | Loss: 0.0005 | PSNR: 33.0326 | lr: 0.00010000 | Time: 8.75s\n",
      "[4599/6000] Iteration: 183930 | Loss: 0.0005 | PSNR: 33.0517 | lr: 0.00010000 | Time: 8.73s\n",
      "[4599/6000] Iteration: 183940 | Loss: 0.0006 | PSNR: 32.3591 | lr: 0.00010000 | Time: 8.73s\n",
      "[4599/6000] Iteration: 183950 | Loss: 0.0005 | PSNR: 33.4622 | lr: 0.00010000 | Time: 8.78s\n",
      "[4599/6000] Iteration: 183960 | Loss: 0.0004 | PSNR: 34.1523 | lr: 0.00010000 | Time: 8.69s\n",
      "[4600/6000] Iteration: 183970 | Loss: 0.0003 | PSNR: 34.7638 | lr: 0.00010000 | Time: 8.77s\n",
      "[4600/6000] Iteration: 183980 | Loss: 0.0002 | PSNR: 36.7894 | lr: 0.00010000 | Time: 8.82s\n",
      "[4600/6000] Iteration: 183990 | Loss: 0.0007 | PSNR: 31.7046 | lr: 0.00010000 | Time: 8.75s\n",
      "[4600/6000] Iteration: 184000 | Loss: 0.0011 | PSNR: 29.6871 | lr: 0.00010000 | Time: 8.76s\n",
      "[4601/6000] Iteration: 184010 | Loss: 0.0014 | PSNR: 28.4326 | lr: 0.00010000 | Time: 8.73s\n",
      "[4601/6000] Iteration: 184020 | Loss: 0.0005 | PSNR: 33.3780 | lr: 0.00010000 | Time: 8.71s\n",
      "[4601/6000] Iteration: 184030 | Loss: 0.0014 | PSNR: 28.4535 | lr: 0.00010000 | Time: 8.67s\n",
      "[4601/6000] Iteration: 184040 | Loss: 0.0006 | PSNR: 32.4157 | lr: 0.00010000 | Time: 8.67s\n",
      "[4602/6000] Iteration: 184050 | Loss: 0.0010 | PSNR: 29.8618 | lr: 0.00010000 | Time: 8.69s\n",
      "[4602/6000] Iteration: 184060 | Loss: 0.0006 | PSNR: 32.3146 | lr: 0.00010000 | Time: 8.68s\n",
      "[4602/6000] Iteration: 184070 | Loss: 0.0008 | PSNR: 31.2366 | lr: 0.00010000 | Time: 8.71s\n",
      "[4602/6000] Iteration: 184080 | Loss: 0.0004 | PSNR: 33.9396 | lr: 0.00010000 | Time: 8.66s\n",
      "[4603/6000] Iteration: 184090 | Loss: 0.0005 | PSNR: 33.2774 | lr: 0.00010000 | Time: 8.73s\n",
      "[4603/6000] Iteration: 184100 | Loss: 0.0007 | PSNR: 31.6977 | lr: 0.00010000 | Time: 8.69s\n",
      "[4603/6000] Iteration: 184110 | Loss: 0.0004 | PSNR: 34.4937 | lr: 0.00010000 | Time: 8.73s\n",
      "[4603/6000] Iteration: 184120 | Loss: 0.0007 | PSNR: 31.6748 | lr: 0.00010000 | Time: 8.73s\n",
      "[4604/6000] Iteration: 184130 | Loss: 0.0003 | PSNR: 35.1486 | lr: 0.00010000 | Time: 8.72s\n",
      "[4604/6000] Iteration: 184140 | Loss: 0.0004 | PSNR: 33.6457 | lr: 0.00010000 | Time: 8.72s\n",
      "[4604/6000] Iteration: 184150 | Loss: 0.0010 | PSNR: 30.2225 | lr: 0.00010000 | Time: 8.75s\n",
      "[4604/6000] Iteration: 184160 | Loss: 0.0009 | PSNR: 30.5025 | lr: 0.00010000 | Time: 8.73s\n",
      "[4605/6000] Iteration: 184170 | Loss: 0.0005 | PSNR: 32.6021 | lr: 0.00010000 | Time: 8.70s\n",
      "[4605/6000] Iteration: 184180 | Loss: 0.0008 | PSNR: 30.7626 | lr: 0.00010000 | Time: 8.75s\n",
      "[4605/6000] Iteration: 184190 | Loss: 0.0005 | PSNR: 33.0890 | lr: 0.00010000 | Time: 8.68s\n",
      "[4605/6000] Iteration: 184200 | Loss: 0.0003 | PSNR: 35.0239 | lr: 0.00010000 | Time: 8.79s\n",
      "0.png 28.23523712158203\n",
      "1.png 28.378841400146484\n",
      "2.png 31.0390567779541\n",
      "3.png 30.55361557006836\n",
      "4.png 33.46906280517578\n",
      "5.png 30.444286346435547\n",
      "6.png 26.925586700439453\n",
      "7.png 32.066246032714844\n",
      "8.png 22.658645629882812\n",
      "9.png 29.2724609375\n",
      "10.png 31.946765899658203\n",
      "11.png 30.66204071044922\n",
      "12.png 28.75075340270996\n",
      "13.png 30.149192810058594\n",
      "14.png 29.513513565063477\n",
      "15.png 26.654239654541016\n",
      "16.png 31.371896743774414\n",
      "17.png 28.769832611083984\n",
      "18.png 31.317052841186523\n",
      "19.png 30.673311233520508\n",
      "20.png 26.36123275756836\n",
      "21.png 24.821876525878906\n",
      "22.png 23.976316452026367\n",
      "23.png 28.090988159179688\n",
      "24.png 25.782512664794922\n",
      "25.png 27.745044708251953\n",
      "26.png 29.201061248779297\n",
      "27.png 28.570255279541016\n",
      "28.png 22.496740341186523\n",
      "29.png 27.790672302246094\n",
      "30.png 31.3245849609375\n",
      "31.png 34.49150466918945\n",
      "32.png 29.519039154052734\n",
      "33.png 31.03207778930664\n",
      "34.png 31.693931579589844\n",
      "35.png 29.76341438293457\n",
      "36.png 31.676654815673828\n",
      "37.png 32.79363250732422\n",
      "38.png 29.374248504638672\n",
      "39.png 26.519899368286133\n",
      "Validation PSNR:  29.146933174133302\n",
      "[4606/6000] Iteration: 184210 | Loss: 0.0008 | PSNR: 31.2296 | lr: 0.00010000 | Time: 28.50s\n",
      "[4606/6000] Iteration: 184220 | Loss: 0.0009 | PSNR: 30.5465 | lr: 0.00010000 | Time: 8.72s\n",
      "[4606/6000] Iteration: 184230 | Loss: 0.0004 | PSNR: 33.4977 | lr: 0.00010000 | Time: 8.71s\n",
      "[4606/6000] Iteration: 184240 | Loss: 0.0008 | PSNR: 30.8452 | lr: 0.00010000 | Time: 8.80s\n",
      "[4607/6000] Iteration: 184250 | Loss: 0.0004 | PSNR: 34.3510 | lr: 0.00010000 | Time: 8.72s\n",
      "[4607/6000] Iteration: 184260 | Loss: 0.0011 | PSNR: 29.5751 | lr: 0.00010000 | Time: 8.73s\n",
      "[4607/6000] Iteration: 184270 | Loss: 0.0003 | PSNR: 35.6548 | lr: 0.00010000 | Time: 8.73s\n",
      "[4607/6000] Iteration: 184280 | Loss: 0.0003 | PSNR: 35.8199 | lr: 0.00010000 | Time: 8.73s\n",
      "[4608/6000] Iteration: 184290 | Loss: 0.0004 | PSNR: 34.5164 | lr: 0.00010000 | Time: 8.77s\n",
      "[4608/6000] Iteration: 184300 | Loss: 0.0006 | PSNR: 32.4280 | lr: 0.00010000 | Time: 8.72s\n",
      "[4608/6000] Iteration: 184310 | Loss: 0.0003 | PSNR: 35.1653 | lr: 0.00010000 | Time: 8.69s\n",
      "[4608/6000] Iteration: 184320 | Loss: 0.0005 | PSNR: 33.3114 | lr: 0.00010000 | Time: 8.82s\n",
      "[4609/6000] Iteration: 184330 | Loss: 0.0005 | PSNR: 32.7197 | lr: 0.00010000 | Time: 8.74s\n",
      "[4609/6000] Iteration: 184340 | Loss: 0.0004 | PSNR: 34.4050 | lr: 0.00010000 | Time: 8.71s\n",
      "[4609/6000] Iteration: 184350 | Loss: 0.0005 | PSNR: 33.4479 | lr: 0.00010000 | Time: 8.73s\n",
      "[4609/6000] Iteration: 184360 | Loss: 0.0006 | PSNR: 32.4877 | lr: 0.00010000 | Time: 8.71s\n",
      "[4610/6000] Iteration: 184370 | Loss: 0.0005 | PSNR: 32.7395 | lr: 0.00010000 | Time: 8.74s\n",
      "[4610/6000] Iteration: 184380 | Loss: 0.0003 | PSNR: 35.6470 | lr: 0.00010000 | Time: 8.69s\n",
      "[4610/6000] Iteration: 184390 | Loss: 0.0003 | PSNR: 35.2021 | lr: 0.00010000 | Time: 8.72s\n",
      "[4610/6000] Iteration: 184400 | Loss: 0.0003 | PSNR: 34.9519 | lr: 0.00010000 | Time: 8.74s\n",
      "[4611/6000] Iteration: 184410 | Loss: 0.0004 | PSNR: 33.7036 | lr: 0.00010000 | Time: 8.69s\n",
      "[4611/6000] Iteration: 184420 | Loss: 0.0006 | PSNR: 32.5290 | lr: 0.00010000 | Time: 8.76s\n",
      "[4611/6000] Iteration: 184430 | Loss: 0.0003 | PSNR: 35.7473 | lr: 0.00010000 | Time: 8.73s\n",
      "[4611/6000] Iteration: 184440 | Loss: 0.0005 | PSNR: 33.4127 | lr: 0.00010000 | Time: 8.75s\n",
      "[4612/6000] Iteration: 184450 | Loss: 0.0002 | PSNR: 36.7214 | lr: 0.00010000 | Time: 8.72s\n",
      "[4612/6000] Iteration: 184460 | Loss: 0.0002 | PSNR: 36.1453 | lr: 0.00010000 | Time: 8.73s\n",
      "[4612/6000] Iteration: 184470 | Loss: 0.0007 | PSNR: 31.7169 | lr: 0.00010000 | Time: 8.70s\n",
      "[4612/6000] Iteration: 184480 | Loss: 0.0003 | PSNR: 35.1119 | lr: 0.00010000 | Time: 8.76s\n",
      "[4613/6000] Iteration: 184490 | Loss: 0.0005 | PSNR: 32.7836 | lr: 0.00010000 | Time: 8.72s\n",
      "[4613/6000] Iteration: 184500 | Loss: 0.0005 | PSNR: 33.1736 | lr: 0.00010000 | Time: 8.74s\n",
      "[4613/6000] Iteration: 184510 | Loss: 0.0002 | PSNR: 36.5312 | lr: 0.00010000 | Time: 8.75s\n",
      "[4613/6000] Iteration: 184520 | Loss: 0.0004 | PSNR: 33.6286 | lr: 0.00010000 | Time: 8.72s\n",
      "[4614/6000] Iteration: 184530 | Loss: 0.0003 | PSNR: 35.6963 | lr: 0.00010000 | Time: 8.77s\n",
      "[4614/6000] Iteration: 184540 | Loss: 0.0008 | PSNR: 30.7186 | lr: 0.00010000 | Time: 8.82s\n",
      "[4614/6000] Iteration: 184550 | Loss: 0.0003 | PSNR: 35.7248 | lr: 0.00010000 | Time: 8.74s\n",
      "[4614/6000] Iteration: 184560 | Loss: 0.0004 | PSNR: 34.3597 | lr: 0.00010000 | Time: 8.74s\n",
      "[4615/6000] Iteration: 184570 | Loss: 0.0003 | PSNR: 35.8859 | lr: 0.00010000 | Time: 8.81s\n",
      "[4615/6000] Iteration: 184580 | Loss: 0.0007 | PSNR: 31.6222 | lr: 0.00010000 | Time: 8.74s\n",
      "[4615/6000] Iteration: 184590 | Loss: 0.0004 | PSNR: 33.9220 | lr: 0.00010000 | Time: 8.69s\n",
      "[4615/6000] Iteration: 184600 | Loss: 0.0004 | PSNR: 33.7075 | lr: 0.00010000 | Time: 8.80s\n",
      "[4616/6000] Iteration: 184610 | Loss: 0.0003 | PSNR: 35.1162 | lr: 0.00010000 | Time: 8.77s\n",
      "[4616/6000] Iteration: 184620 | Loss: 0.0005 | PSNR: 32.7535 | lr: 0.00010000 | Time: 8.70s\n",
      "[4616/6000] Iteration: 184630 | Loss: 0.0004 | PSNR: 33.6452 | lr: 0.00010000 | Time: 8.70s\n",
      "[4616/6000] Iteration: 184640 | Loss: 0.0004 | PSNR: 34.2030 | lr: 0.00010000 | Time: 8.79s\n",
      "[4617/6000] Iteration: 184650 | Loss: 0.0006 | PSNR: 32.1341 | lr: 0.00010000 | Time: 8.79s\n",
      "[4617/6000] Iteration: 184660 | Loss: 0.0005 | PSNR: 33.2066 | lr: 0.00010000 | Time: 8.72s\n",
      "[4617/6000] Iteration: 184670 | Loss: 0.0003 | PSNR: 35.4903 | lr: 0.00010000 | Time: 8.77s\n",
      "[4617/6000] Iteration: 184680 | Loss: 0.0005 | PSNR: 32.8803 | lr: 0.00010000 | Time: 8.71s\n",
      "[4618/6000] Iteration: 184690 | Loss: 0.0004 | PSNR: 33.9267 | lr: 0.00010000 | Time: 8.71s\n",
      "[4618/6000] Iteration: 184700 | Loss: 0.0004 | PSNR: 34.0497 | lr: 0.00010000 | Time: 8.72s\n",
      "[4618/6000] Iteration: 184710 | Loss: 0.0005 | PSNR: 32.8544 | lr: 0.00010000 | Time: 8.76s\n",
      "[4618/6000] Iteration: 184720 | Loss: 0.0003 | PSNR: 35.2540 | lr: 0.00010000 | Time: 8.70s\n",
      "[4619/6000] Iteration: 184730 | Loss: 0.0004 | PSNR: 33.5815 | lr: 0.00010000 | Time: 8.73s\n",
      "[4619/6000] Iteration: 184740 | Loss: 0.0004 | PSNR: 33.9116 | lr: 0.00010000 | Time: 8.70s\n",
      "[4619/6000] Iteration: 184750 | Loss: 0.0005 | PSNR: 33.1364 | lr: 0.00010000 | Time: 8.74s\n",
      "[4619/6000] Iteration: 184760 | Loss: 0.0007 | PSNR: 31.3619 | lr: 0.00010000 | Time: 8.72s\n",
      "[4620/6000] Iteration: 184770 | Loss: 0.0004 | PSNR: 33.9644 | lr: 0.00010000 | Time: 8.70s\n",
      "[4620/6000] Iteration: 184780 | Loss: 0.0003 | PSNR: 35.3114 | lr: 0.00010000 | Time: 8.77s\n",
      "[4620/6000] Iteration: 184790 | Loss: 0.0005 | PSNR: 32.7315 | lr: 0.00010000 | Time: 8.73s\n",
      "[4620/6000] Iteration: 184800 | Loss: 0.0016 | PSNR: 27.9912 | lr: 0.00010000 | Time: 8.67s\n",
      "0.png 27.66158676147461\n",
      "1.png 26.114471435546875\n",
      "2.png 28.165769577026367\n",
      "3.png 27.659482955932617\n",
      "4.png 32.313514709472656\n",
      "5.png 30.325653076171875\n",
      "6.png 25.99968719482422\n",
      "7.png 32.469970703125\n",
      "8.png 22.724720001220703\n",
      "9.png 28.42572784423828\n",
      "10.png 31.487157821655273\n",
      "11.png 29.238285064697266\n",
      "12.png 27.20218276977539\n",
      "13.png 25.57125473022461\n",
      "14.png 26.677427291870117\n",
      "15.png 28.039438247680664\n",
      "16.png 33.04117965698242\n",
      "17.png 22.717063903808594\n",
      "18.png 26.36447525024414\n",
      "19.png 29.296979904174805\n",
      "20.png 30.562793731689453\n",
      "21.png 24.28757095336914\n",
      "22.png 21.491281509399414\n",
      "23.png 26.725505828857422\n",
      "24.png 21.450891494750977\n",
      "25.png 25.919673919677734\n",
      "26.png 27.84593963623047\n",
      "27.png 28.933504104614258\n",
      "28.png 22.357494354248047\n",
      "29.png 28.498600006103516\n",
      "30.png 29.498592376708984\n",
      "31.png 33.749267578125\n",
      "32.png 26.848587036132812\n",
      "33.png 33.27131652832031\n",
      "34.png 32.2342643737793\n",
      "35.png 30.185791015625\n",
      "36.png 30.284461975097656\n",
      "37.png 27.161466598510742\n",
      "38.png 30.816743850708008\n",
      "39.png 23.111093521118164\n",
      "Validation PSNR:  27.91827173233032\n",
      "[4621/6000] Iteration: 184810 | Loss: 0.0009 | PSNR: 30.3561 | lr: 0.00010000 | Time: 28.41s\n",
      "[4621/6000] Iteration: 184820 | Loss: 0.0012 | PSNR: 29.2015 | lr: 0.00010000 | Time: 8.74s\n",
      "[4621/6000] Iteration: 184830 | Loss: 0.0012 | PSNR: 29.3394 | lr: 0.00010000 | Time: 8.83s\n",
      "[4621/6000] Iteration: 184840 | Loss: 0.0012 | PSNR: 29.2070 | lr: 0.00010000 | Time: 8.77s\n",
      "[4622/6000] Iteration: 184850 | Loss: 0.0008 | PSNR: 30.8908 | lr: 0.00010000 | Time: 8.74s\n",
      "[4622/6000] Iteration: 184860 | Loss: 0.0014 | PSNR: 28.6476 | lr: 0.00010000 | Time: 8.79s\n",
      "[4622/6000] Iteration: 184870 | Loss: 0.0011 | PSNR: 29.7793 | lr: 0.00010000 | Time: 8.81s\n",
      "[4622/6000] Iteration: 184880 | Loss: 0.0006 | PSNR: 32.1501 | lr: 0.00010000 | Time: 8.79s\n",
      "[4623/6000] Iteration: 184890 | Loss: 0.0006 | PSNR: 31.9540 | lr: 0.00010000 | Time: 8.76s\n",
      "[4623/6000] Iteration: 184900 | Loss: 0.0008 | PSNR: 30.7264 | lr: 0.00010000 | Time: 8.82s\n",
      "[4623/6000] Iteration: 184910 | Loss: 0.0005 | PSNR: 32.6651 | lr: 0.00010000 | Time: 8.77s\n",
      "[4623/6000] Iteration: 184920 | Loss: 0.0006 | PSNR: 32.2929 | lr: 0.00010000 | Time: 8.73s\n",
      "[4624/6000] Iteration: 184930 | Loss: 0.0006 | PSNR: 31.9988 | lr: 0.00010000 | Time: 8.75s\n",
      "[4624/6000] Iteration: 184940 | Loss: 0.0005 | PSNR: 33.0910 | lr: 0.00010000 | Time: 8.69s\n",
      "[4624/6000] Iteration: 184950 | Loss: 0.0025 | PSNR: 26.0387 | lr: 0.00010000 | Time: 8.72s\n",
      "[4624/6000] Iteration: 184960 | Loss: 0.0006 | PSNR: 31.9826 | lr: 0.00010000 | Time: 8.79s\n",
      "[4625/6000] Iteration: 184970 | Loss: 0.0006 | PSNR: 32.4339 | lr: 0.00010000 | Time: 8.73s\n",
      "[4625/6000] Iteration: 184980 | Loss: 0.0006 | PSNR: 32.2094 | lr: 0.00010000 | Time: 8.76s\n",
      "[4625/6000] Iteration: 184990 | Loss: 0.0008 | PSNR: 31.0600 | lr: 0.00010000 | Time: 8.71s\n",
      "[4625/6000] Iteration: 185000 | Loss: 0.0011 | PSNR: 29.7043 | lr: 0.00010000 | Time: 8.74s\n",
      "[4626/6000] Iteration: 185010 | Loss: 0.0004 | PSNR: 33.9510 | lr: 0.00010000 | Time: 8.80s\n",
      "[4626/6000] Iteration: 185020 | Loss: 0.0009 | PSNR: 30.3068 | lr: 0.00010000 | Time: 8.77s\n",
      "[4626/6000] Iteration: 185030 | Loss: 0.0008 | PSNR: 31.2289 | lr: 0.00010000 | Time: 8.74s\n",
      "[4626/6000] Iteration: 185040 | Loss: 0.0005 | PSNR: 33.0110 | lr: 0.00010000 | Time: 8.73s\n",
      "[4627/6000] Iteration: 185050 | Loss: 0.0010 | PSNR: 30.0636 | lr: 0.00010000 | Time: 8.74s\n",
      "[4627/6000] Iteration: 185060 | Loss: 0.0006 | PSNR: 32.1154 | lr: 0.00010000 | Time: 8.77s\n",
      "[4627/6000] Iteration: 185070 | Loss: 0.0010 | PSNR: 30.1002 | lr: 0.00010000 | Time: 8.73s\n",
      "[4627/6000] Iteration: 185080 | Loss: 0.0004 | PSNR: 34.0897 | lr: 0.00010000 | Time: 8.76s\n",
      "[4628/6000] Iteration: 185090 | Loss: 0.0005 | PSNR: 32.6637 | lr: 0.00010000 | Time: 8.73s\n",
      "[4628/6000] Iteration: 185100 | Loss: 0.0005 | PSNR: 33.0772 | lr: 0.00010000 | Time: 8.70s\n",
      "[4628/6000] Iteration: 185110 | Loss: 0.0008 | PSNR: 30.8302 | lr: 0.00010000 | Time: 8.75s\n",
      "[4628/6000] Iteration: 185120 | Loss: 0.0006 | PSNR: 32.3204 | lr: 0.00010000 | Time: 8.79s\n",
      "[4629/6000] Iteration: 185130 | Loss: 0.0004 | PSNR: 34.5356 | lr: 0.00010000 | Time: 8.72s\n",
      "[4629/6000] Iteration: 185140 | Loss: 0.0009 | PSNR: 30.6763 | lr: 0.00010000 | Time: 8.73s\n",
      "[4629/6000] Iteration: 185150 | Loss: 0.0009 | PSNR: 30.3076 | lr: 0.00010000 | Time: 8.74s\n",
      "[4629/6000] Iteration: 185160 | Loss: 0.0006 | PSNR: 32.4074 | lr: 0.00010000 | Time: 8.75s\n",
      "[4630/6000] Iteration: 185170 | Loss: 0.0008 | PSNR: 30.9552 | lr: 0.00010000 | Time: 8.75s\n",
      "[4630/6000] Iteration: 185180 | Loss: 0.0007 | PSNR: 31.7212 | lr: 0.00010000 | Time: 8.73s\n",
      "[4630/6000] Iteration: 185190 | Loss: 0.0007 | PSNR: 31.5720 | lr: 0.00010000 | Time: 8.69s\n",
      "[4630/6000] Iteration: 185200 | Loss: 0.0008 | PSNR: 30.8597 | lr: 0.00010000 | Time: 8.71s\n",
      "[4631/6000] Iteration: 185210 | Loss: 0.0007 | PSNR: 31.2558 | lr: 0.00010000 | Time: 8.76s\n",
      "[4631/6000] Iteration: 185220 | Loss: 0.0005 | PSNR: 33.2772 | lr: 0.00010000 | Time: 8.69s\n",
      "[4631/6000] Iteration: 185230 | Loss: 0.0004 | PSNR: 33.5715 | lr: 0.00010000 | Time: 8.69s\n",
      "[4631/6000] Iteration: 185240 | Loss: 0.0013 | PSNR: 28.9743 | lr: 0.00010000 | Time: 8.68s\n",
      "[4632/6000] Iteration: 185250 | Loss: 0.0014 | PSNR: 28.4418 | lr: 0.00010000 | Time: 8.74s\n",
      "[4632/6000] Iteration: 185260 | Loss: 0.0008 | PSNR: 30.8505 | lr: 0.00010000 | Time: 8.76s\n",
      "[4632/6000] Iteration: 185270 | Loss: 0.0004 | PSNR: 33.8361 | lr: 0.00010000 | Time: 8.81s\n",
      "[4632/6000] Iteration: 185280 | Loss: 0.0003 | PSNR: 34.9460 | lr: 0.00010000 | Time: 8.71s\n",
      "[4633/6000] Iteration: 185290 | Loss: 0.0004 | PSNR: 33.5933 | lr: 0.00010000 | Time: 8.76s\n",
      "[4633/6000] Iteration: 185300 | Loss: 0.0004 | PSNR: 34.0616 | lr: 0.00010000 | Time: 8.72s\n",
      "[4633/6000] Iteration: 185310 | Loss: 0.0003 | PSNR: 35.6414 | lr: 0.00010000 | Time: 8.79s\n",
      "[4633/6000] Iteration: 185320 | Loss: 0.0006 | PSNR: 32.2715 | lr: 0.00010000 | Time: 8.72s\n",
      "[4634/6000] Iteration: 185330 | Loss: 0.0007 | PSNR: 31.5648 | lr: 0.00010000 | Time: 8.76s\n",
      "[4634/6000] Iteration: 185340 | Loss: 0.0008 | PSNR: 31.1147 | lr: 0.00010000 | Time: 8.76s\n",
      "[4634/6000] Iteration: 185350 | Loss: 0.0004 | PSNR: 33.9094 | lr: 0.00010000 | Time: 8.71s\n",
      "[4634/6000] Iteration: 185360 | Loss: 0.0004 | PSNR: 34.0344 | lr: 0.00010000 | Time: 8.74s\n",
      "[4635/6000] Iteration: 185370 | Loss: 0.0003 | PSNR: 35.5314 | lr: 0.00010000 | Time: 8.73s\n",
      "[4635/6000] Iteration: 185380 | Loss: 0.0005 | PSNR: 33.1532 | lr: 0.00010000 | Time: 8.81s\n",
      "[4635/6000] Iteration: 185390 | Loss: 0.0003 | PSNR: 35.9478 | lr: 0.00010000 | Time: 8.72s\n",
      "[4635/6000] Iteration: 185400 | Loss: 0.0003 | PSNR: 35.7944 | lr: 0.00010000 | Time: 8.71s\n",
      "0.png 26.910140991210938\n",
      "1.png 29.69969940185547\n",
      "2.png 32.04758834838867\n",
      "3.png 31.380157470703125\n",
      "4.png 34.03937530517578\n",
      "5.png 31.288368225097656\n",
      "6.png 27.530670166015625\n",
      "7.png 31.287057876586914\n",
      "8.png 25.572669982910156\n",
      "9.png 29.383441925048828\n",
      "10.png 30.97088050842285\n",
      "11.png 30.649442672729492\n",
      "12.png 29.239261627197266\n",
      "13.png 25.529659271240234\n",
      "14.png 24.12886619567871\n",
      "15.png 27.78274154663086\n",
      "16.png 34.053836822509766\n",
      "17.png 29.262271881103516\n",
      "18.png 29.339962005615234\n",
      "19.png 30.162687301635742\n",
      "20.png 26.601669311523438\n",
      "21.png 28.916961669921875\n",
      "22.png 24.403362274169922\n",
      "23.png 27.704483032226562\n",
      "24.png 26.046005249023438\n",
      "25.png 28.272384643554688\n",
      "26.png 33.3066520690918\n",
      "27.png 28.930694580078125\n",
      "28.png 26.486169815063477\n",
      "29.png 25.95461082458496\n",
      "30.png 30.503740310668945\n",
      "31.png 34.04454040527344\n",
      "32.png 30.5440673828125\n",
      "33.png 31.874916076660156\n",
      "34.png 31.003877639770508\n",
      "35.png 28.962890625\n",
      "36.png 32.55669021606445\n",
      "37.png 31.02660369873047\n",
      "38.png 30.2542667388916\n",
      "39.png 29.276287078857422\n",
      "Validation PSNR:  29.423241329193115\n",
      "[4636/6000] Iteration: 185410 | Loss: 0.0002 | PSNR: 36.3184 | lr: 0.00010000 | Time: 28.50s\n",
      "[4636/6000] Iteration: 185420 | Loss: 0.0003 | PSNR: 35.3729 | lr: 0.00010000 | Time: 8.75s\n",
      "[4636/6000] Iteration: 185430 | Loss: 0.0002 | PSNR: 36.0721 | lr: 0.00010000 | Time: 8.73s\n",
      "[4636/6000] Iteration: 185440 | Loss: 0.0005 | PSNR: 32.9317 | lr: 0.00010000 | Time: 8.71s\n",
      "[4637/6000] Iteration: 185450 | Loss: 0.0003 | PSNR: 35.0469 | lr: 0.00010000 | Time: 8.70s\n",
      "[4637/6000] Iteration: 185460 | Loss: 0.0005 | PSNR: 32.6326 | lr: 0.00010000 | Time: 8.71s\n",
      "[4637/6000] Iteration: 185470 | Loss: 0.0005 | PSNR: 33.2635 | lr: 0.00010000 | Time: 8.72s\n",
      "[4637/6000] Iteration: 185480 | Loss: 0.0005 | PSNR: 32.6692 | lr: 0.00010000 | Time: 8.76s\n",
      "[4638/6000] Iteration: 185490 | Loss: 0.0004 | PSNR: 34.4153 | lr: 0.00010000 | Time: 8.79s\n",
      "[4638/6000] Iteration: 185500 | Loss: 0.0004 | PSNR: 33.4754 | lr: 0.00010000 | Time: 8.68s\n",
      "[4638/6000] Iteration: 185510 | Loss: 0.0005 | PSNR: 32.7263 | lr: 0.00010000 | Time: 8.73s\n",
      "[4638/6000] Iteration: 185520 | Loss: 0.0002 | PSNR: 36.1954 | lr: 0.00010000 | Time: 8.78s\n",
      "[4639/6000] Iteration: 185530 | Loss: 0.0003 | PSNR: 34.7365 | lr: 0.00010000 | Time: 8.79s\n",
      "[4639/6000] Iteration: 185540 | Loss: 0.0004 | PSNR: 34.1460 | lr: 0.00010000 | Time: 8.74s\n",
      "[4639/6000] Iteration: 185550 | Loss: 0.0004 | PSNR: 33.7550 | lr: 0.00010000 | Time: 8.74s\n",
      "[4639/6000] Iteration: 185560 | Loss: 0.0006 | PSNR: 31.9298 | lr: 0.00010000 | Time: 8.73s\n",
      "[4640/6000] Iteration: 185570 | Loss: 0.0007 | PSNR: 31.8415 | lr: 0.00010000 | Time: 8.72s\n",
      "[4640/6000] Iteration: 185580 | Loss: 0.0003 | PSNR: 35.0762 | lr: 0.00010000 | Time: 8.71s\n",
      "[4640/6000] Iteration: 185590 | Loss: 0.0003 | PSNR: 35.6365 | lr: 0.00010000 | Time: 8.74s\n",
      "[4640/6000] Iteration: 185600 | Loss: 0.0005 | PSNR: 32.6662 | lr: 0.00010000 | Time: 8.75s\n",
      "[4641/6000] Iteration: 185610 | Loss: 0.0003 | PSNR: 34.6869 | lr: 0.00010000 | Time: 8.68s\n",
      "[4641/6000] Iteration: 185620 | Loss: 0.0004 | PSNR: 34.1687 | lr: 0.00010000 | Time: 8.70s\n",
      "[4641/6000] Iteration: 185630 | Loss: 0.0004 | PSNR: 34.0675 | lr: 0.00010000 | Time: 8.73s\n",
      "[4641/6000] Iteration: 185640 | Loss: 0.0003 | PSNR: 35.6348 | lr: 0.00010000 | Time: 8.69s\n",
      "[4642/6000] Iteration: 185650 | Loss: 0.0006 | PSNR: 32.2813 | lr: 0.00010000 | Time: 8.72s\n",
      "[4642/6000] Iteration: 185660 | Loss: 0.0004 | PSNR: 34.3978 | lr: 0.00010000 | Time: 8.76s\n",
      "[4642/6000] Iteration: 185670 | Loss: 0.0005 | PSNR: 33.2813 | lr: 0.00010000 | Time: 8.72s\n",
      "[4642/6000] Iteration: 185680 | Loss: 0.0004 | PSNR: 34.1591 | lr: 0.00010000 | Time: 8.80s\n",
      "[4643/6000] Iteration: 185690 | Loss: 0.0003 | PSNR: 35.8251 | lr: 0.00010000 | Time: 8.75s\n",
      "[4643/6000] Iteration: 185700 | Loss: 0.0004 | PSNR: 34.3656 | lr: 0.00010000 | Time: 8.72s\n",
      "[4643/6000] Iteration: 185710 | Loss: 0.0004 | PSNR: 34.3830 | lr: 0.00010000 | Time: 8.73s\n",
      "[4643/6000] Iteration: 185720 | Loss: 0.0003 | PSNR: 35.4149 | lr: 0.00010000 | Time: 8.68s\n",
      "[4644/6000] Iteration: 185730 | Loss: 0.0007 | PSNR: 31.8647 | lr: 0.00010000 | Time: 8.74s\n",
      "[4644/6000] Iteration: 185740 | Loss: 0.0003 | PSNR: 35.2023 | lr: 0.00010000 | Time: 8.69s\n",
      "[4644/6000] Iteration: 185750 | Loss: 0.0005 | PSNR: 32.6034 | lr: 0.00010000 | Time: 8.69s\n",
      "[4644/6000] Iteration: 185760 | Loss: 0.0004 | PSNR: 34.5100 | lr: 0.00010000 | Time: 8.69s\n",
      "[4645/6000] Iteration: 185770 | Loss: 0.0005 | PSNR: 32.6223 | lr: 0.00010000 | Time: 8.72s\n",
      "[4645/6000] Iteration: 185780 | Loss: 0.0005 | PSNR: 33.3786 | lr: 0.00010000 | Time: 8.66s\n",
      "[4645/6000] Iteration: 185790 | Loss: 0.0005 | PSNR: 33.4370 | lr: 0.00010000 | Time: 8.75s\n",
      "[4645/6000] Iteration: 185800 | Loss: 0.0003 | PSNR: 35.0216 | lr: 0.00010000 | Time: 8.76s\n",
      "[4646/6000] Iteration: 185810 | Loss: 0.0004 | PSNR: 33.7462 | lr: 0.00010000 | Time: 8.77s\n",
      "[4646/6000] Iteration: 185820 | Loss: 0.0008 | PSNR: 31.1249 | lr: 0.00010000 | Time: 8.71s\n",
      "[4646/6000] Iteration: 185830 | Loss: 0.0016 | PSNR: 27.9649 | lr: 0.00010000 | Time: 8.69s\n",
      "[4646/6000] Iteration: 185840 | Loss: 0.0011 | PSNR: 29.7055 | lr: 0.00010000 | Time: 8.71s\n",
      "[4647/6000] Iteration: 185850 | Loss: 0.0008 | PSNR: 31.1627 | lr: 0.00010000 | Time: 8.78s\n",
      "[4647/6000] Iteration: 185860 | Loss: 0.0003 | PSNR: 35.6026 | lr: 0.00010000 | Time: 8.75s\n",
      "[4647/6000] Iteration: 185870 | Loss: 0.0005 | PSNR: 32.8889 | lr: 0.00010000 | Time: 8.74s\n",
      "[4647/6000] Iteration: 185880 | Loss: 0.0004 | PSNR: 33.7785 | lr: 0.00010000 | Time: 8.71s\n",
      "[4648/6000] Iteration: 185890 | Loss: 0.0009 | PSNR: 30.3544 | lr: 0.00010000 | Time: 8.75s\n",
      "[4648/6000] Iteration: 185900 | Loss: 0.0003 | PSNR: 34.7659 | lr: 0.00010000 | Time: 8.69s\n",
      "[4648/6000] Iteration: 185910 | Loss: 0.0006 | PSNR: 31.9524 | lr: 0.00010000 | Time: 8.74s\n",
      "[4648/6000] Iteration: 185920 | Loss: 0.0006 | PSNR: 32.4753 | lr: 0.00010000 | Time: 8.68s\n",
      "[4649/6000] Iteration: 185930 | Loss: 0.0005 | PSNR: 33.2499 | lr: 0.00010000 | Time: 8.80s\n",
      "[4649/6000] Iteration: 185940 | Loss: 0.0003 | PSNR: 34.7457 | lr: 0.00010000 | Time: 8.72s\n",
      "[4649/6000] Iteration: 185950 | Loss: 0.0003 | PSNR: 35.0615 | lr: 0.00010000 | Time: 8.74s\n",
      "[4649/6000] Iteration: 185960 | Loss: 0.0005 | PSNR: 33.1672 | lr: 0.00010000 | Time: 8.69s\n",
      "[4650/6000] Iteration: 185970 | Loss: 0.0004 | PSNR: 33.7026 | lr: 0.00010000 | Time: 8.72s\n",
      "[4650/6000] Iteration: 185980 | Loss: 0.0004 | PSNR: 34.2287 | lr: 0.00010000 | Time: 8.72s\n",
      "[4650/6000] Iteration: 185990 | Loss: 0.0008 | PSNR: 31.1527 | lr: 0.00010000 | Time: 8.73s\n",
      "[4650/6000] Iteration: 186000 | Loss: 0.0005 | PSNR: 33.0098 | lr: 0.00010000 | Time: 8.71s\n",
      "0.png 26.22644805908203\n",
      "1.png 29.746339797973633\n",
      "2.png 31.31188201904297\n",
      "3.png 31.362741470336914\n",
      "4.png 34.25740432739258\n",
      "5.png 31.54766082763672\n",
      "6.png 27.851226806640625\n",
      "7.png 30.3060359954834\n",
      "8.png 24.299636840820312\n",
      "9.png 28.950159072875977\n",
      "10.png 29.8099365234375\n",
      "11.png 30.496681213378906\n",
      "12.png 30.078163146972656\n",
      "13.png 26.369625091552734\n",
      "14.png 23.742780685424805\n",
      "15.png 27.699785232543945\n",
      "16.png 32.95127487182617\n",
      "17.png 27.7103328704834\n",
      "18.png 29.514646530151367\n",
      "19.png 31.632577896118164\n",
      "20.png 26.804119110107422\n",
      "21.png 26.67850685119629\n",
      "22.png 22.7239990234375\n",
      "23.png 27.442913055419922\n",
      "24.png 25.30290412902832\n",
      "25.png 27.70254898071289\n",
      "26.png 33.201229095458984\n",
      "27.png 28.712127685546875\n",
      "28.png 27.119415283203125\n",
      "29.png 28.868423461914062\n",
      "30.png 31.548931121826172\n",
      "31.png 35.04509353637695\n",
      "32.png 29.05862045288086\n",
      "33.png 32.99435043334961\n",
      "34.png 30.97740364074707\n",
      "35.png 30.883808135986328\n",
      "36.png 32.50217056274414\n",
      "37.png 31.34735870361328\n",
      "38.png 28.38817596435547\n",
      "39.png 28.845338821411133\n",
      "Validation PSNR:  29.30031943321228\n",
      "[4651/6000] Iteration: 186010 | Loss: 0.0003 | PSNR: 35.5480 | lr: 0.00010000 | Time: 28.40s\n",
      "[4651/6000] Iteration: 186020 | Loss: 0.0003 | PSNR: 35.5386 | lr: 0.00010000 | Time: 8.70s\n",
      "[4651/6000] Iteration: 186030 | Loss: 0.0003 | PSNR: 35.5330 | lr: 0.00010000 | Time: 8.79s\n",
      "[4651/6000] Iteration: 186040 | Loss: 0.0004 | PSNR: 33.8184 | lr: 0.00010000 | Time: 8.69s\n",
      "[4652/6000] Iteration: 186050 | Loss: 0.0002 | PSNR: 37.2484 | lr: 0.00010000 | Time: 8.73s\n",
      "[4652/6000] Iteration: 186060 | Loss: 0.0008 | PSNR: 30.9361 | lr: 0.00010000 | Time: 8.73s\n",
      "[4652/6000] Iteration: 186070 | Loss: 0.0002 | PSNR: 36.3644 | lr: 0.00010000 | Time: 8.75s\n",
      "[4652/6000] Iteration: 186080 | Loss: 0.0003 | PSNR: 35.5081 | lr: 0.00010000 | Time: 8.72s\n",
      "[4653/6000] Iteration: 186090 | Loss: 0.0006 | PSNR: 32.2935 | lr: 0.00010000 | Time: 8.70s\n",
      "[4653/6000] Iteration: 186100 | Loss: 0.0007 | PSNR: 31.8029 | lr: 0.00010000 | Time: 8.71s\n",
      "[4653/6000] Iteration: 186110 | Loss: 0.0003 | PSNR: 35.6989 | lr: 0.00010000 | Time: 8.71s\n",
      "[4653/6000] Iteration: 186120 | Loss: 0.0002 | PSNR: 36.0815 | lr: 0.00010000 | Time: 8.75s\n",
      "[4654/6000] Iteration: 186130 | Loss: 0.0002 | PSNR: 36.2830 | lr: 0.00010000 | Time: 8.72s\n",
      "[4654/6000] Iteration: 186140 | Loss: 0.0004 | PSNR: 33.7345 | lr: 0.00010000 | Time: 8.69s\n",
      "[4654/6000] Iteration: 186150 | Loss: 0.0003 | PSNR: 35.4182 | lr: 0.00010000 | Time: 8.69s\n",
      "[4654/6000] Iteration: 186160 | Loss: 0.0007 | PSNR: 31.3810 | lr: 0.00010000 | Time: 8.72s\n",
      "[4655/6000] Iteration: 186170 | Loss: 0.0004 | PSNR: 34.4936 | lr: 0.00010000 | Time: 8.76s\n",
      "[4655/6000] Iteration: 186180 | Loss: 0.0002 | PSNR: 37.0140 | lr: 0.00010000 | Time: 8.78s\n",
      "[4655/6000] Iteration: 186190 | Loss: 0.0005 | PSNR: 33.3289 | lr: 0.00010000 | Time: 8.66s\n",
      "[4655/6000] Iteration: 186200 | Loss: 0.0003 | PSNR: 35.0602 | lr: 0.00010000 | Time: 8.74s\n",
      "[4656/6000] Iteration: 186210 | Loss: 0.0005 | PSNR: 33.0194 | lr: 0.00010000 | Time: 8.71s\n",
      "[4656/6000] Iteration: 186220 | Loss: 0.0002 | PSNR: 36.8149 | lr: 0.00010000 | Time: 8.78s\n",
      "[4656/6000] Iteration: 186230 | Loss: 0.0004 | PSNR: 34.0435 | lr: 0.00010000 | Time: 8.75s\n",
      "[4656/6000] Iteration: 186240 | Loss: 0.0002 | PSNR: 36.4068 | lr: 0.00010000 | Time: 8.79s\n",
      "[4657/6000] Iteration: 186250 | Loss: 0.0005 | PSNR: 32.8727 | lr: 0.00010000 | Time: 8.71s\n",
      "[4657/6000] Iteration: 186260 | Loss: 0.0005 | PSNR: 32.7034 | lr: 0.00010000 | Time: 8.74s\n",
      "[4657/6000] Iteration: 186270 | Loss: 0.0005 | PSNR: 33.4608 | lr: 0.00010000 | Time: 8.78s\n",
      "[4657/6000] Iteration: 186280 | Loss: 0.0003 | PSNR: 35.9710 | lr: 0.00010000 | Time: 8.77s\n",
      "[4658/6000] Iteration: 186290 | Loss: 0.0006 | PSNR: 32.3840 | lr: 0.00010000 | Time: 8.76s\n",
      "[4658/6000] Iteration: 186300 | Loss: 0.0003 | PSNR: 35.5061 | lr: 0.00010000 | Time: 8.70s\n",
      "[4658/6000] Iteration: 186310 | Loss: 0.0005 | PSNR: 32.8870 | lr: 0.00010000 | Time: 8.72s\n",
      "[4658/6000] Iteration: 186320 | Loss: 0.0004 | PSNR: 34.2323 | lr: 0.00010000 | Time: 8.77s\n",
      "[4659/6000] Iteration: 186330 | Loss: 0.0003 | PSNR: 35.7728 | lr: 0.00010000 | Time: 8.73s\n",
      "[4659/6000] Iteration: 186340 | Loss: 0.0005 | PSNR: 33.4364 | lr: 0.00010000 | Time: 8.70s\n",
      "[4659/6000] Iteration: 186350 | Loss: 0.0007 | PSNR: 31.8009 | lr: 0.00010000 | Time: 8.74s\n",
      "[4659/6000] Iteration: 186360 | Loss: 0.0004 | PSNR: 34.2033 | lr: 0.00010000 | Time: 8.73s\n",
      "[4660/6000] Iteration: 186370 | Loss: 0.0004 | PSNR: 34.3239 | lr: 0.00010000 | Time: 8.69s\n",
      "[4660/6000] Iteration: 186380 | Loss: 0.0004 | PSNR: 33.8738 | lr: 0.00010000 | Time: 8.77s\n",
      "[4660/6000] Iteration: 186390 | Loss: 0.0004 | PSNR: 34.3220 | lr: 0.00010000 | Time: 8.72s\n",
      "[4660/6000] Iteration: 186400 | Loss: 0.0005 | PSNR: 32.8238 | lr: 0.00010000 | Time: 8.69s\n",
      "[4661/6000] Iteration: 186410 | Loss: 0.0003 | PSNR: 35.6210 | lr: 0.00010000 | Time: 8.77s\n",
      "[4661/6000] Iteration: 186420 | Loss: 0.0004 | PSNR: 33.9453 | lr: 0.00010000 | Time: 8.74s\n",
      "[4661/6000] Iteration: 186430 | Loss: 0.0005 | PSNR: 32.6513 | lr: 0.00010000 | Time: 8.73s\n",
      "[4661/6000] Iteration: 186440 | Loss: 0.0003 | PSNR: 34.6280 | lr: 0.00010000 | Time: 8.70s\n",
      "[4662/6000] Iteration: 186450 | Loss: 0.0004 | PSNR: 34.5571 | lr: 0.00010000 | Time: 8.77s\n",
      "[4662/6000] Iteration: 186460 | Loss: 0.0004 | PSNR: 33.7230 | lr: 0.00010000 | Time: 8.75s\n",
      "[4662/6000] Iteration: 186470 | Loss: 0.0002 | PSNR: 36.1949 | lr: 0.00010000 | Time: 8.74s\n",
      "[4662/6000] Iteration: 186480 | Loss: 0.0004 | PSNR: 33.5911 | lr: 0.00010000 | Time: 8.75s\n",
      "[4663/6000] Iteration: 186490 | Loss: 0.0008 | PSNR: 30.8396 | lr: 0.00010000 | Time: 8.77s\n",
      "[4663/6000] Iteration: 186500 | Loss: 0.0006 | PSNR: 32.1769 | lr: 0.00010000 | Time: 8.72s\n",
      "[4663/6000] Iteration: 186510 | Loss: 0.0003 | PSNR: 35.0597 | lr: 0.00010000 | Time: 8.73s\n",
      "[4663/6000] Iteration: 186520 | Loss: 0.0003 | PSNR: 35.7000 | lr: 0.00010000 | Time: 8.72s\n",
      "[4664/6000] Iteration: 186530 | Loss: 0.0002 | PSNR: 36.3892 | lr: 0.00010000 | Time: 8.81s\n",
      "[4664/6000] Iteration: 186540 | Loss: 0.0005 | PSNR: 32.7646 | lr: 0.00010000 | Time: 8.75s\n",
      "[4664/6000] Iteration: 186550 | Loss: 0.0003 | PSNR: 35.0857 | lr: 0.00010000 | Time: 8.74s\n",
      "[4664/6000] Iteration: 186560 | Loss: 0.0003 | PSNR: 35.2770 | lr: 0.00010000 | Time: 8.73s\n",
      "[4665/6000] Iteration: 186570 | Loss: 0.0003 | PSNR: 35.5448 | lr: 0.00010000 | Time: 8.74s\n",
      "[4665/6000] Iteration: 186580 | Loss: 0.0004 | PSNR: 34.2592 | lr: 0.00010000 | Time: 8.72s\n",
      "[4665/6000] Iteration: 186590 | Loss: 0.0003 | PSNR: 35.5913 | lr: 0.00010000 | Time: 8.72s\n",
      "[4665/6000] Iteration: 186600 | Loss: 0.0003 | PSNR: 35.3122 | lr: 0.00010000 | Time: 8.78s\n",
      "0.png 25.7972412109375\n",
      "1.png 29.635791778564453\n",
      "2.png 32.41603469848633\n",
      "3.png 31.46323013305664\n",
      "4.png 33.719295501708984\n",
      "5.png 32.48515319824219\n",
      "6.png 27.213470458984375\n",
      "7.png 31.888696670532227\n",
      "8.png 25.652812957763672\n",
      "9.png 29.289772033691406\n",
      "10.png 31.53652572631836\n",
      "11.png 29.57640838623047\n",
      "12.png 29.564067840576172\n",
      "13.png 25.071712493896484\n",
      "14.png 25.96186637878418\n",
      "15.png 28.074695587158203\n",
      "16.png 34.2543830871582\n",
      "17.png 30.222991943359375\n",
      "18.png 29.579303741455078\n",
      "19.png 29.896747589111328\n",
      "20.png 25.361305236816406\n",
      "21.png 27.71512794494629\n",
      "22.png 24.88673973083496\n",
      "23.png 30.396459579467773\n",
      "24.png 28.252178192138672\n",
      "25.png 28.310943603515625\n",
      "26.png 32.8653678894043\n",
      "27.png 29.79020118713379\n",
      "28.png 25.148014068603516\n",
      "29.png 27.99820899963379\n",
      "30.png 30.56272315979004\n",
      "31.png 34.39668655395508\n",
      "32.png 28.88065528869629\n",
      "33.png 33.45738220214844\n",
      "34.png 32.42690658569336\n",
      "35.png 29.752464294433594\n",
      "36.png 32.74830627441406\n",
      "37.png 32.7429313659668\n",
      "38.png 28.441818237304688\n",
      "39.png 27.576810836791992\n",
      "Validation PSNR:  29.625285816192626\n",
      "[4666/6000] Iteration: 186610 | Loss: 0.0005 | PSNR: 33.1547 | lr: 0.00010000 | Time: 28.43s\n",
      "[4666/6000] Iteration: 186620 | Loss: 0.0004 | PSNR: 34.4849 | lr: 0.00010000 | Time: 8.72s\n",
      "[4666/6000] Iteration: 186630 | Loss: 0.0003 | PSNR: 34.7511 | lr: 0.00010000 | Time: 8.74s\n",
      "[4666/6000] Iteration: 186640 | Loss: 0.0008 | PSNR: 31.0668 | lr: 0.00010000 | Time: 8.76s\n",
      "[4667/6000] Iteration: 186650 | Loss: 0.0004 | PSNR: 34.2359 | lr: 0.00010000 | Time: 8.77s\n",
      "[4667/6000] Iteration: 186660 | Loss: 0.0003 | PSNR: 35.7452 | lr: 0.00010000 | Time: 8.73s\n",
      "[4667/6000] Iteration: 186670 | Loss: 0.0006 | PSNR: 31.8813 | lr: 0.00010000 | Time: 8.75s\n",
      "[4667/6000] Iteration: 186680 | Loss: 0.0002 | PSNR: 36.3762 | lr: 0.00010000 | Time: 8.77s\n",
      "[4668/6000] Iteration: 186690 | Loss: 0.0003 | PSNR: 34.9921 | lr: 0.00010000 | Time: 8.77s\n",
      "[4668/6000] Iteration: 186700 | Loss: 0.0004 | PSNR: 34.0363 | lr: 0.00010000 | Time: 8.70s\n",
      "[4668/6000] Iteration: 186710 | Loss: 0.0004 | PSNR: 33.5255 | lr: 0.00010000 | Time: 8.71s\n",
      "[4668/6000] Iteration: 186720 | Loss: 0.0004 | PSNR: 33.7597 | lr: 0.00010000 | Time: 8.74s\n",
      "[4669/6000] Iteration: 186730 | Loss: 0.0003 | PSNR: 34.9208 | lr: 0.00010000 | Time: 8.74s\n",
      "[4669/6000] Iteration: 186740 | Loss: 0.0011 | PSNR: 29.3997 | lr: 0.00010000 | Time: 8.76s\n",
      "[4669/6000] Iteration: 186750 | Loss: 0.0003 | PSNR: 35.3841 | lr: 0.00010000 | Time: 8.76s\n",
      "[4669/6000] Iteration: 186760 | Loss: 0.0005 | PSNR: 32.9865 | lr: 0.00010000 | Time: 8.76s\n",
      "[4670/6000] Iteration: 186770 | Loss: 0.0003 | PSNR: 35.6723 | lr: 0.00010000 | Time: 8.73s\n",
      "[4670/6000] Iteration: 186780 | Loss: 0.0002 | PSNR: 37.5661 | lr: 0.00010000 | Time: 8.68s\n",
      "[4670/6000] Iteration: 186790 | Loss: 0.0006 | PSNR: 32.5577 | lr: 0.00010000 | Time: 8.77s\n",
      "[4670/6000] Iteration: 186800 | Loss: 0.0004 | PSNR: 33.5943 | lr: 0.00010000 | Time: 8.85s\n",
      "[4671/6000] Iteration: 186810 | Loss: 0.0002 | PSNR: 37.0127 | lr: 0.00010000 | Time: 8.76s\n",
      "[4671/6000] Iteration: 186820 | Loss: 0.0005 | PSNR: 33.0583 | lr: 0.00010000 | Time: 8.71s\n",
      "[4671/6000] Iteration: 186830 | Loss: 0.0006 | PSNR: 32.2155 | lr: 0.00010000 | Time: 8.71s\n",
      "[4671/6000] Iteration: 186840 | Loss: 0.0003 | PSNR: 35.6708 | lr: 0.00010000 | Time: 8.73s\n",
      "[4672/6000] Iteration: 186850 | Loss: 0.0007 | PSNR: 31.5939 | lr: 0.00010000 | Time: 8.75s\n",
      "[4672/6000] Iteration: 186860 | Loss: 0.0005 | PSNR: 33.2389 | lr: 0.00010000 | Time: 8.75s\n",
      "[4672/6000] Iteration: 186870 | Loss: 0.0003 | PSNR: 34.8154 | lr: 0.00010000 | Time: 8.72s\n",
      "[4672/6000] Iteration: 186880 | Loss: 0.0010 | PSNR: 30.2172 | lr: 0.00010000 | Time: 8.75s\n",
      "[4673/6000] Iteration: 186890 | Loss: 0.0006 | PSNR: 32.0812 | lr: 0.00010000 | Time: 8.69s\n",
      "[4673/6000] Iteration: 186900 | Loss: 0.0004 | PSNR: 33.8257 | lr: 0.00010000 | Time: 8.69s\n",
      "[4673/6000] Iteration: 186910 | Loss: 0.0005 | PSNR: 33.1890 | lr: 0.00010000 | Time: 8.72s\n",
      "[4673/6000] Iteration: 186920 | Loss: 0.0003 | PSNR: 35.5291 | lr: 0.00010000 | Time: 8.68s\n",
      "[4674/6000] Iteration: 186930 | Loss: 0.0004 | PSNR: 33.6787 | lr: 0.00010000 | Time: 8.77s\n",
      "[4674/6000] Iteration: 186940 | Loss: 0.0003 | PSNR: 34.8411 | lr: 0.00010000 | Time: 8.72s\n",
      "[4674/6000] Iteration: 186950 | Loss: 0.0003 | PSNR: 35.6235 | lr: 0.00010000 | Time: 8.70s\n",
      "[4674/6000] Iteration: 186960 | Loss: 0.0003 | PSNR: 34.6877 | lr: 0.00010000 | Time: 8.76s\n",
      "[4675/6000] Iteration: 186970 | Loss: 0.0018 | PSNR: 27.3863 | lr: 0.00010000 | Time: 8.72s\n",
      "[4675/6000] Iteration: 186980 | Loss: 0.0009 | PSNR: 30.6045 | lr: 0.00010000 | Time: 8.74s\n",
      "[4675/6000] Iteration: 186990 | Loss: 0.0007 | PSNR: 31.3961 | lr: 0.00010000 | Time: 8.73s\n",
      "[4675/6000] Iteration: 187000 | Loss: 0.0007 | PSNR: 31.8645 | lr: 0.00010000 | Time: 8.77s\n",
      "[4676/6000] Iteration: 187010 | Loss: 0.0011 | PSNR: 29.4392 | lr: 0.00010000 | Time: 8.75s\n",
      "[4676/6000] Iteration: 187020 | Loss: 0.0008 | PSNR: 30.7298 | lr: 0.00010000 | Time: 8.76s\n",
      "[4676/6000] Iteration: 187030 | Loss: 0.0004 | PSNR: 33.6240 | lr: 0.00010000 | Time: 8.68s\n",
      "[4676/6000] Iteration: 187040 | Loss: 0.0006 | PSNR: 32.2600 | lr: 0.00010000 | Time: 8.74s\n",
      "[4677/6000] Iteration: 187050 | Loss: 0.0006 | PSNR: 32.2251 | lr: 0.00010000 | Time: 8.74s\n",
      "[4677/6000] Iteration: 187060 | Loss: 0.0008 | PSNR: 30.8663 | lr: 0.00010000 | Time: 8.72s\n",
      "[4677/6000] Iteration: 187070 | Loss: 0.0008 | PSNR: 31.1057 | lr: 0.00010000 | Time: 8.71s\n",
      "[4677/6000] Iteration: 187080 | Loss: 0.0008 | PSNR: 31.1619 | lr: 0.00010000 | Time: 8.74s\n",
      "[4678/6000] Iteration: 187090 | Loss: 0.0009 | PSNR: 30.5794 | lr: 0.00010000 | Time: 8.83s\n",
      "[4678/6000] Iteration: 187100 | Loss: 0.0005 | PSNR: 32.8703 | lr: 0.00010000 | Time: 8.72s\n",
      "[4678/6000] Iteration: 187110 | Loss: 0.0003 | PSNR: 35.5221 | lr: 0.00010000 | Time: 8.84s\n",
      "[4678/6000] Iteration: 187120 | Loss: 0.0005 | PSNR: 33.3736 | lr: 0.00010000 | Time: 8.73s\n",
      "[4679/6000] Iteration: 187130 | Loss: 0.0006 | PSNR: 32.3250 | lr: 0.00010000 | Time: 8.76s\n",
      "[4679/6000] Iteration: 187140 | Loss: 0.0003 | PSNR: 34.6124 | lr: 0.00010000 | Time: 8.78s\n",
      "[4679/6000] Iteration: 187150 | Loss: 0.0006 | PSNR: 32.5474 | lr: 0.00010000 | Time: 8.75s\n",
      "[4679/6000] Iteration: 187160 | Loss: 0.0012 | PSNR: 29.3656 | lr: 0.00010000 | Time: 8.75s\n",
      "[4680/6000] Iteration: 187170 | Loss: 0.0007 | PSNR: 31.5470 | lr: 0.00010000 | Time: 8.77s\n",
      "[4680/6000] Iteration: 187180 | Loss: 0.0007 | PSNR: 31.8420 | lr: 0.00010000 | Time: 8.76s\n",
      "[4680/6000] Iteration: 187190 | Loss: 0.0012 | PSNR: 29.3304 | lr: 0.00010000 | Time: 8.68s\n",
      "[4680/6000] Iteration: 187200 | Loss: 0.0004 | PSNR: 33.9336 | lr: 0.00010000 | Time: 8.73s\n",
      "0.png 26.321964263916016\n",
      "1.png 29.09115982055664\n",
      "2.png 30.086259841918945\n",
      "3.png 31.29705810546875\n",
      "4.png 33.20642852783203\n",
      "5.png 32.969032287597656\n",
      "6.png 26.904582977294922\n",
      "7.png 29.554853439331055\n",
      "8.png 24.045166015625\n",
      "9.png 28.995941162109375\n",
      "10.png 32.677825927734375\n",
      "11.png 30.33962059020996\n",
      "12.png 28.184383392333984\n",
      "13.png 28.3460693359375\n",
      "14.png 23.085330963134766\n",
      "15.png 27.06012725830078\n",
      "16.png 34.28109359741211\n",
      "17.png 28.04700469970703\n",
      "18.png 29.837636947631836\n",
      "19.png 31.029144287109375\n",
      "20.png 32.41959762573242\n",
      "21.png 25.431610107421875\n",
      "22.png 22.94518280029297\n",
      "23.png 24.466304779052734\n",
      "24.png 25.450952529907227\n",
      "25.png 25.273868560791016\n",
      "26.png 34.02050018310547\n",
      "27.png 28.89398193359375\n",
      "28.png 26.36733055114746\n",
      "29.png 28.37830352783203\n",
      "30.png 29.52081298828125\n",
      "31.png 33.39244079589844\n",
      "32.png 25.328216552734375\n",
      "33.png 32.04841613769531\n",
      "34.png 29.77056312561035\n",
      "35.png 29.812068939208984\n",
      "36.png 33.22389221191406\n",
      "37.png 31.380128860473633\n",
      "38.png 29.014652252197266\n",
      "39.png 26.87453842163086\n",
      "Validation PSNR:  28.98435115814209\n",
      "[4681/6000] Iteration: 187210 | Loss: 0.0015 | PSNR: 28.1897 | lr: 0.00010000 | Time: 28.39s\n",
      "[4681/6000] Iteration: 187220 | Loss: 0.0005 | PSNR: 32.7751 | lr: 0.00010000 | Time: 8.71s\n",
      "[4681/6000] Iteration: 187230 | Loss: 0.0007 | PSNR: 31.5910 | lr: 0.00010000 | Time: 8.76s\n",
      "[4681/6000] Iteration: 187240 | Loss: 0.0007 | PSNR: 31.6315 | lr: 0.00010000 | Time: 8.78s\n",
      "[4682/6000] Iteration: 187250 | Loss: 0.0017 | PSNR: 27.7818 | lr: 0.00010000 | Time: 8.75s\n",
      "[4682/6000] Iteration: 187260 | Loss: 0.0007 | PSNR: 31.5415 | lr: 0.00010000 | Time: 8.78s\n",
      "[4682/6000] Iteration: 187270 | Loss: 0.0006 | PSNR: 32.4236 | lr: 0.00010000 | Time: 8.74s\n",
      "[4682/6000] Iteration: 187280 | Loss: 0.0007 | PSNR: 31.7976 | lr: 0.00010000 | Time: 8.74s\n",
      "[4683/6000] Iteration: 187290 | Loss: 0.0007 | PSNR: 31.6828 | lr: 0.00010000 | Time: 8.69s\n",
      "[4683/6000] Iteration: 187300 | Loss: 0.0005 | PSNR: 33.0722 | lr: 0.00010000 | Time: 8.75s\n",
      "[4683/6000] Iteration: 187310 | Loss: 0.0005 | PSNR: 33.2512 | lr: 0.00010000 | Time: 8.71s\n",
      "[4683/6000] Iteration: 187320 | Loss: 0.0006 | PSNR: 32.5020 | lr: 0.00010000 | Time: 8.73s\n",
      "[4684/6000] Iteration: 187330 | Loss: 0.0008 | PSNR: 31.2175 | lr: 0.00010000 | Time: 8.73s\n",
      "[4684/6000] Iteration: 187340 | Loss: 0.0004 | PSNR: 33.7270 | lr: 0.00010000 | Time: 8.75s\n",
      "[4684/6000] Iteration: 187350 | Loss: 0.0006 | PSNR: 32.0236 | lr: 0.00010000 | Time: 8.68s\n",
      "[4684/6000] Iteration: 187360 | Loss: 0.0002 | PSNR: 37.0419 | lr: 0.00010000 | Time: 8.71s\n",
      "[4685/6000] Iteration: 187370 | Loss: 0.0006 | PSNR: 32.2053 | lr: 0.00010000 | Time: 8.72s\n",
      "[4685/6000] Iteration: 187380 | Loss: 0.0004 | PSNR: 33.6339 | lr: 0.00010000 | Time: 8.73s\n",
      "[4685/6000] Iteration: 187390 | Loss: 0.0006 | PSNR: 32.1010 | lr: 0.00010000 | Time: 8.71s\n",
      "[4685/6000] Iteration: 187400 | Loss: 0.0002 | PSNR: 36.5649 | lr: 0.00010000 | Time: 8.77s\n",
      "[4686/6000] Iteration: 187410 | Loss: 0.0004 | PSNR: 33.6086 | lr: 0.00010000 | Time: 8.80s\n",
      "[4686/6000] Iteration: 187420 | Loss: 0.0003 | PSNR: 35.2353 | lr: 0.00010000 | Time: 8.72s\n",
      "[4686/6000] Iteration: 187430 | Loss: 0.0005 | PSNR: 33.0914 | lr: 0.00010000 | Time: 8.71s\n",
      "[4686/6000] Iteration: 187440 | Loss: 0.0002 | PSNR: 36.4637 | lr: 0.00010000 | Time: 8.78s\n",
      "[4687/6000] Iteration: 187450 | Loss: 0.0003 | PSNR: 34.7551 | lr: 0.00010000 | Time: 8.75s\n",
      "[4687/6000] Iteration: 187460 | Loss: 0.0004 | PSNR: 33.7002 | lr: 0.00010000 | Time: 8.77s\n",
      "[4687/6000] Iteration: 187470 | Loss: 0.0004 | PSNR: 34.3860 | lr: 0.00010000 | Time: 8.74s\n",
      "[4687/6000] Iteration: 187480 | Loss: 0.0003 | PSNR: 35.3937 | lr: 0.00010000 | Time: 8.81s\n",
      "[4688/6000] Iteration: 187490 | Loss: 0.0005 | PSNR: 33.2663 | lr: 0.00010000 | Time: 8.74s\n",
      "[4688/6000] Iteration: 187500 | Loss: 0.0004 | PSNR: 33.9655 | lr: 0.00010000 | Time: 8.70s\n",
      "[4688/6000] Iteration: 187510 | Loss: 0.0002 | PSNR: 37.1074 | lr: 0.00010000 | Time: 8.72s\n",
      "[4688/6000] Iteration: 187520 | Loss: 0.0007 | PSNR: 31.6373 | lr: 0.00010000 | Time: 8.72s\n",
      "[4689/6000] Iteration: 187530 | Loss: 0.0002 | PSNR: 36.2545 | lr: 0.00010000 | Time: 8.73s\n",
      "[4689/6000] Iteration: 187540 | Loss: 0.0004 | PSNR: 34.4564 | lr: 0.00010000 | Time: 8.74s\n",
      "[4689/6000] Iteration: 187550 | Loss: 0.0003 | PSNR: 35.7257 | lr: 0.00010000 | Time: 8.72s\n",
      "[4689/6000] Iteration: 187560 | Loss: 0.0003 | PSNR: 35.9509 | lr: 0.00010000 | Time: 8.73s\n",
      "[4690/6000] Iteration: 187570 | Loss: 0.0002 | PSNR: 36.0263 | lr: 0.00010000 | Time: 8.82s\n",
      "[4690/6000] Iteration: 187580 | Loss: 0.0004 | PSNR: 33.7334 | lr: 0.00010000 | Time: 8.74s\n",
      "[4690/6000] Iteration: 187590 | Loss: 0.0002 | PSNR: 36.5364 | lr: 0.00010000 | Time: 8.74s\n",
      "[4690/6000] Iteration: 187600 | Loss: 0.0005 | PSNR: 33.0078 | lr: 0.00010000 | Time: 8.83s\n",
      "[4691/6000] Iteration: 187610 | Loss: 0.0004 | PSNR: 34.5282 | lr: 0.00010000 | Time: 8.79s\n",
      "[4691/6000] Iteration: 187620 | Loss: 0.0003 | PSNR: 35.9738 | lr: 0.00010000 | Time: 8.94s\n",
      "[4691/6000] Iteration: 187630 | Loss: 0.0002 | PSNR: 37.6864 | lr: 0.00010000 | Time: 8.73s\n",
      "[4691/6000] Iteration: 187640 | Loss: 0.0006 | PSNR: 32.3832 | lr: 0.00010000 | Time: 8.73s\n",
      "[4692/6000] Iteration: 187650 | Loss: 0.0002 | PSNR: 36.6587 | lr: 0.00010000 | Time: 8.76s\n",
      "[4692/6000] Iteration: 187660 | Loss: 0.0006 | PSNR: 32.2069 | lr: 0.00010000 | Time: 8.74s\n",
      "[4692/6000] Iteration: 187670 | Loss: 0.0005 | PSNR: 33.3928 | lr: 0.00010000 | Time: 8.74s\n",
      "[4692/6000] Iteration: 187680 | Loss: 0.0002 | PSNR: 36.0361 | lr: 0.00010000 | Time: 8.77s\n",
      "[4693/6000] Iteration: 187690 | Loss: 0.0005 | PSNR: 33.2657 | lr: 0.00010000 | Time: 8.81s\n",
      "[4693/6000] Iteration: 187700 | Loss: 0.0003 | PSNR: 35.1930 | lr: 0.00010000 | Time: 8.78s\n",
      "[4693/6000] Iteration: 187710 | Loss: 0.0005 | PSNR: 32.8271 | lr: 0.00010000 | Time: 8.74s\n",
      "[4693/6000] Iteration: 187720 | Loss: 0.0005 | PSNR: 33.1292 | lr: 0.00010000 | Time: 8.80s\n",
      "[4694/6000] Iteration: 187730 | Loss: 0.0003 | PSNR: 35.4647 | lr: 0.00010000 | Time: 8.76s\n",
      "[4694/6000] Iteration: 187740 | Loss: 0.0005 | PSNR: 32.6639 | lr: 0.00010000 | Time: 8.77s\n",
      "[4694/6000] Iteration: 187750 | Loss: 0.0003 | PSNR: 34.6918 | lr: 0.00010000 | Time: 8.84s\n",
      "[4694/6000] Iteration: 187760 | Loss: 0.0010 | PSNR: 29.9831 | lr: 0.00010000 | Time: 8.81s\n",
      "[4695/6000] Iteration: 187770 | Loss: 0.0005 | PSNR: 33.2977 | lr: 0.00010000 | Time: 8.83s\n",
      "[4695/6000] Iteration: 187780 | Loss: 0.0003 | PSNR: 34.8988 | lr: 0.00010000 | Time: 8.81s\n",
      "[4695/6000] Iteration: 187790 | Loss: 0.0005 | PSNR: 33.0586 | lr: 0.00010000 | Time: 8.73s\n",
      "[4695/6000] Iteration: 187800 | Loss: 0.0004 | PSNR: 33.9563 | lr: 0.00010000 | Time: 8.77s\n",
      "0.png 26.498451232910156\n",
      "1.png 29.64069175720215\n",
      "2.png 32.03611755371094\n",
      "3.png 31.060094833374023\n",
      "4.png 32.88094711303711\n",
      "5.png 31.87423324584961\n",
      "6.png 26.191970825195312\n",
      "7.png 32.31614685058594\n",
      "8.png 24.273025512695312\n",
      "9.png 29.85598373413086\n",
      "10.png 31.229785919189453\n",
      "11.png 30.09149932861328\n",
      "12.png 29.27748680114746\n",
      "13.png 26.237812042236328\n",
      "14.png 23.649255752563477\n",
      "15.png 27.240419387817383\n",
      "16.png 34.3349723815918\n",
      "17.png 28.690685272216797\n",
      "18.png 30.891632080078125\n",
      "19.png 30.555374145507812\n",
      "20.png 27.079219818115234\n",
      "21.png 28.561870574951172\n",
      "22.png 26.273042678833008\n",
      "23.png 27.205322265625\n",
      "24.png 27.742427825927734\n",
      "25.png 28.482606887817383\n",
      "26.png 35.360443115234375\n",
      "27.png 29.892436981201172\n",
      "28.png 25.15407371520996\n",
      "29.png 27.713802337646484\n",
      "30.png 31.861526489257812\n",
      "31.png 34.098609924316406\n",
      "32.png 31.637088775634766\n",
      "33.png 34.049957275390625\n",
      "34.png 31.180402755737305\n",
      "35.png 30.620399475097656\n",
      "36.png 31.751041412353516\n",
      "37.png 31.55092430114746\n",
      "38.png 30.4836368560791\n",
      "39.png 25.658252716064453\n",
      "Validation PSNR:  29.62959179878235\n",
      "[4696/6000] Iteration: 187810 | Loss: 0.0003 | PSNR: 34.6248 | lr: 0.00010000 | Time: 28.46s\n",
      "[4696/6000] Iteration: 187820 | Loss: 0.0002 | PSNR: 36.0603 | lr: 0.00010000 | Time: 8.78s\n",
      "[4696/6000] Iteration: 187830 | Loss: 0.0006 | PSNR: 32.1796 | lr: 0.00010000 | Time: 8.66s\n",
      "[4696/6000] Iteration: 187840 | Loss: 0.0003 | PSNR: 34.6197 | lr: 0.00010000 | Time: 8.78s\n",
      "[4697/6000] Iteration: 187850 | Loss: 0.0002 | PSNR: 36.6078 | lr: 0.00010000 | Time: 8.74s\n",
      "[4697/6000] Iteration: 187860 | Loss: 0.0005 | PSNR: 33.3942 | lr: 0.00010000 | Time: 8.78s\n",
      "[4697/6000] Iteration: 187870 | Loss: 0.0005 | PSNR: 33.2818 | lr: 0.00010000 | Time: 8.71s\n",
      "[4697/6000] Iteration: 187880 | Loss: 0.0003 | PSNR: 34.6720 | lr: 0.00010000 | Time: 8.83s\n",
      "[4698/6000] Iteration: 187890 | Loss: 0.0004 | PSNR: 33.7198 | lr: 0.00010000 | Time: 8.71s\n",
      "[4698/6000] Iteration: 187900 | Loss: 0.0002 | PSNR: 36.4705 | lr: 0.00010000 | Time: 8.69s\n",
      "[4698/6000] Iteration: 187910 | Loss: 0.0003 | PSNR: 35.6893 | lr: 0.00010000 | Time: 8.69s\n",
      "[4698/6000] Iteration: 187920 | Loss: 0.0003 | PSNR: 34.6949 | lr: 0.00010000 | Time: 8.82s\n",
      "[4699/6000] Iteration: 187930 | Loss: 0.0004 | PSNR: 33.7188 | lr: 0.00010000 | Time: 8.71s\n",
      "[4699/6000] Iteration: 187940 | Loss: 0.0003 | PSNR: 35.1861 | lr: 0.00010000 | Time: 8.76s\n",
      "[4699/6000] Iteration: 187950 | Loss: 0.0003 | PSNR: 34.6618 | lr: 0.00010000 | Time: 8.83s\n",
      "[4699/6000] Iteration: 187960 | Loss: 0.0003 | PSNR: 34.6223 | lr: 0.00010000 | Time: 8.78s\n",
      "[4700/6000] Iteration: 187970 | Loss: 0.0002 | PSNR: 36.2549 | lr: 0.00010000 | Time: 8.78s\n",
      "[4700/6000] Iteration: 187980 | Loss: 0.0006 | PSNR: 32.1439 | lr: 0.00010000 | Time: 8.72s\n",
      "[4700/6000] Iteration: 187990 | Loss: 0.0003 | PSNR: 35.5042 | lr: 0.00010000 | Time: 8.77s\n",
      "[4700/6000] Iteration: 188000 | Loss: 0.0005 | PSNR: 32.8944 | lr: 0.00010000 | Time: 8.82s\n",
      "[4701/6000] Iteration: 188010 | Loss: 0.0005 | PSNR: 33.2309 | lr: 0.00010000 | Time: 8.76s\n",
      "[4701/6000] Iteration: 188020 | Loss: 0.0004 | PSNR: 33.7140 | lr: 0.00010000 | Time: 8.75s\n",
      "[4701/6000] Iteration: 188030 | Loss: 0.0003 | PSNR: 35.3290 | lr: 0.00010000 | Time: 8.73s\n",
      "[4701/6000] Iteration: 188040 | Loss: 0.0004 | PSNR: 33.4881 | lr: 0.00010000 | Time: 8.65s\n",
      "[4702/6000] Iteration: 188050 | Loss: 0.0003 | PSNR: 35.5900 | lr: 0.00010000 | Time: 8.80s\n",
      "[4702/6000] Iteration: 188060 | Loss: 0.0004 | PSNR: 34.0637 | lr: 0.00010000 | Time: 8.78s\n",
      "[4702/6000] Iteration: 188070 | Loss: 0.0003 | PSNR: 34.9559 | lr: 0.00010000 | Time: 8.85s\n",
      "[4702/6000] Iteration: 188080 | Loss: 0.0007 | PSNR: 31.8462 | lr: 0.00010000 | Time: 8.74s\n",
      "[4703/6000] Iteration: 188090 | Loss: 0.0004 | PSNR: 33.6260 | lr: 0.00010000 | Time: 8.74s\n",
      "[4703/6000] Iteration: 188100 | Loss: 0.0005 | PSNR: 33.0544 | lr: 0.00010000 | Time: 8.80s\n",
      "[4703/6000] Iteration: 188110 | Loss: 0.0005 | PSNR: 33.3159 | lr: 0.00010000 | Time: 8.73s\n",
      "[4703/6000] Iteration: 188120 | Loss: 0.0006 | PSNR: 32.5936 | lr: 0.00010000 | Time: 8.73s\n",
      "[4704/6000] Iteration: 188130 | Loss: 0.0004 | PSNR: 33.9505 | lr: 0.00010000 | Time: 8.84s\n",
      "[4704/6000] Iteration: 188140 | Loss: 0.0002 | PSNR: 36.5011 | lr: 0.00010000 | Time: 8.74s\n",
      "[4704/6000] Iteration: 188150 | Loss: 0.0002 | PSNR: 37.4264 | lr: 0.00010000 | Time: 8.70s\n",
      "[4704/6000] Iteration: 188160 | Loss: 0.0004 | PSNR: 34.2264 | lr: 0.00010000 | Time: 8.72s\n",
      "[4705/6000] Iteration: 188170 | Loss: 0.0005 | PSNR: 32.7064 | lr: 0.00010000 | Time: 8.84s\n",
      "[4705/6000] Iteration: 188180 | Loss: 0.0004 | PSNR: 33.6945 | lr: 0.00010000 | Time: 8.76s\n",
      "[4705/6000] Iteration: 188190 | Loss: 0.0003 | PSNR: 35.8880 | lr: 0.00010000 | Time: 8.76s\n",
      "[4705/6000] Iteration: 188200 | Loss: 0.0007 | PSNR: 31.4729 | lr: 0.00010000 | Time: 8.73s\n",
      "[4706/6000] Iteration: 188210 | Loss: 0.0003 | PSNR: 35.9172 | lr: 0.00010000 | Time: 8.75s\n",
      "[4706/6000] Iteration: 188220 | Loss: 0.0005 | PSNR: 33.1791 | lr: 0.00010000 | Time: 8.74s\n",
      "[4706/6000] Iteration: 188230 | Loss: 0.0003 | PSNR: 34.8652 | lr: 0.00010000 | Time: 8.74s\n",
      "[4706/6000] Iteration: 188240 | Loss: 0.0003 | PSNR: 34.6323 | lr: 0.00010000 | Time: 8.75s\n",
      "[4707/6000] Iteration: 188250 | Loss: 0.0002 | PSNR: 36.6284 | lr: 0.00010000 | Time: 8.71s\n",
      "[4707/6000] Iteration: 188260 | Loss: 0.0002 | PSNR: 36.0245 | lr: 0.00010000 | Time: 8.76s\n",
      "[4707/6000] Iteration: 188270 | Loss: 0.0002 | PSNR: 36.7041 | lr: 0.00010000 | Time: 8.73s\n",
      "[4707/6000] Iteration: 188280 | Loss: 0.0003 | PSNR: 35.5529 | lr: 0.00010000 | Time: 8.75s\n",
      "[4708/6000] Iteration: 188290 | Loss: 0.0005 | PSNR: 32.8512 | lr: 0.00010000 | Time: 8.68s\n",
      "[4708/6000] Iteration: 188300 | Loss: 0.0009 | PSNR: 30.4825 | lr: 0.00010000 | Time: 8.81s\n",
      "[4708/6000] Iteration: 188310 | Loss: 0.0006 | PSNR: 32.1574 | lr: 0.00010000 | Time: 8.83s\n",
      "[4708/6000] Iteration: 188320 | Loss: 0.0006 | PSNR: 32.5658 | lr: 0.00010000 | Time: 8.72s\n",
      "[4709/6000] Iteration: 188330 | Loss: 0.0003 | PSNR: 34.7378 | lr: 0.00010000 | Time: 8.71s\n",
      "[4709/6000] Iteration: 188340 | Loss: 0.0003 | PSNR: 34.6925 | lr: 0.00010000 | Time: 8.69s\n",
      "[4709/6000] Iteration: 188350 | Loss: 0.0003 | PSNR: 35.3289 | lr: 0.00010000 | Time: 8.76s\n",
      "[4709/6000] Iteration: 188360 | Loss: 0.0002 | PSNR: 36.1086 | lr: 0.00010000 | Time: 8.70s\n",
      "[4710/6000] Iteration: 188370 | Loss: 0.0005 | PSNR: 32.7734 | lr: 0.00010000 | Time: 8.70s\n",
      "[4710/6000] Iteration: 188380 | Loss: 0.0003 | PSNR: 35.7761 | lr: 0.00010000 | Time: 8.78s\n",
      "[4710/6000] Iteration: 188390 | Loss: 0.0005 | PSNR: 32.8984 | lr: 0.00010000 | Time: 8.76s\n",
      "[4710/6000] Iteration: 188400 | Loss: 0.0005 | PSNR: 33.2701 | lr: 0.00010000 | Time: 8.72s\n",
      "0.png 27.387056350708008\n",
      "1.png 30.636791229248047\n",
      "2.png 31.93077278137207\n",
      "3.png 31.139545440673828\n",
      "4.png 33.842063903808594\n",
      "5.png 31.79591941833496\n",
      "6.png 24.636476516723633\n",
      "7.png 32.50909423828125\n",
      "8.png 21.514812469482422\n",
      "9.png 29.38271713256836\n",
      "10.png 29.716751098632812\n",
      "11.png 28.22521209716797\n",
      "12.png 31.834564208984375\n",
      "13.png 25.69384002685547\n",
      "14.png 23.1584529876709\n",
      "15.png 27.871177673339844\n",
      "16.png 32.80504608154297\n",
      "17.png 29.061721801757812\n",
      "18.png 30.142810821533203\n",
      "19.png 30.620861053466797\n",
      "20.png 26.536378860473633\n",
      "21.png 26.54389190673828\n",
      "22.png 23.636005401611328\n",
      "23.png 28.49341583251953\n",
      "24.png 25.1815128326416\n",
      "25.png 28.725460052490234\n",
      "26.png 34.061668395996094\n",
      "27.png 28.361244201660156\n",
      "28.png 23.19759178161621\n",
      "29.png 28.386003494262695\n",
      "30.png 28.61423683166504\n",
      "31.png 34.351749420166016\n",
      "32.png 28.77981948852539\n",
      "33.png 32.4880256652832\n",
      "34.png 32.190467834472656\n",
      "35.png 31.659868240356445\n",
      "36.png 32.438140869140625\n",
      "37.png 28.947694778442383\n",
      "38.png 32.45700454711914\n",
      "39.png 25.164833068847656\n",
      "Validation PSNR:  29.10301752090454\n",
      "[4711/6000] Iteration: 188410 | Loss: 0.0008 | PSNR: 31.0391 | lr: 0.00010000 | Time: 28.38s\n",
      "[4711/6000] Iteration: 188420 | Loss: 0.0002 | PSNR: 36.2621 | lr: 0.00010000 | Time: 8.69s\n",
      "[4711/6000] Iteration: 188430 | Loss: 0.0003 | PSNR: 34.5913 | lr: 0.00010000 | Time: 8.72s\n",
      "[4711/6000] Iteration: 188440 | Loss: 0.0004 | PSNR: 34.5181 | lr: 0.00010000 | Time: 8.80s\n",
      "[4712/6000] Iteration: 188450 | Loss: 0.0004 | PSNR: 33.4844 | lr: 0.00010000 | Time: 8.74s\n",
      "[4712/6000] Iteration: 188460 | Loss: 0.0003 | PSNR: 34.6378 | lr: 0.00010000 | Time: 8.78s\n",
      "[4712/6000] Iteration: 188470 | Loss: 0.0003 | PSNR: 35.8662 | lr: 0.00010000 | Time: 8.70s\n",
      "[4712/6000] Iteration: 188480 | Loss: 0.0005 | PSNR: 33.4558 | lr: 0.00010000 | Time: 8.81s\n",
      "[4713/6000] Iteration: 188490 | Loss: 0.0004 | PSNR: 34.5233 | lr: 0.00010000 | Time: 8.74s\n",
      "[4713/6000] Iteration: 188500 | Loss: 0.0003 | PSNR: 35.6789 | lr: 0.00010000 | Time: 8.75s\n",
      "[4713/6000] Iteration: 188510 | Loss: 0.0005 | PSNR: 33.0433 | lr: 0.00010000 | Time: 8.76s\n",
      "[4713/6000] Iteration: 188520 | Loss: 0.0004 | PSNR: 33.8166 | lr: 0.00010000 | Time: 8.79s\n",
      "[4714/6000] Iteration: 188530 | Loss: 0.0005 | PSNR: 33.0187 | lr: 0.00010000 | Time: 8.74s\n",
      "[4714/6000] Iteration: 188540 | Loss: 0.0004 | PSNR: 33.5326 | lr: 0.00010000 | Time: 8.72s\n",
      "[4714/6000] Iteration: 188550 | Loss: 0.0003 | PSNR: 35.1919 | lr: 0.00010000 | Time: 8.75s\n",
      "[4714/6000] Iteration: 188560 | Loss: 0.0003 | PSNR: 34.5710 | lr: 0.00010000 | Time: 8.74s\n",
      "[4715/6000] Iteration: 188570 | Loss: 0.0008 | PSNR: 30.7129 | lr: 0.00010000 | Time: 8.74s\n",
      "[4715/6000] Iteration: 188580 | Loss: 0.0005 | PSNR: 33.1674 | lr: 0.00010000 | Time: 8.73s\n",
      "[4715/6000] Iteration: 188590 | Loss: 0.0005 | PSNR: 33.2070 | lr: 0.00010000 | Time: 8.70s\n",
      "[4715/6000] Iteration: 188600 | Loss: 0.0004 | PSNR: 33.7764 | lr: 0.00010000 | Time: 8.79s\n",
      "[4716/6000] Iteration: 188610 | Loss: 0.0003 | PSNR: 35.6955 | lr: 0.00010000 | Time: 8.90s\n",
      "[4716/6000] Iteration: 188620 | Loss: 0.0004 | PSNR: 34.2672 | lr: 0.00010000 | Time: 8.80s\n",
      "[4716/6000] Iteration: 188630 | Loss: 0.0005 | PSNR: 32.7971 | lr: 0.00010000 | Time: 8.75s\n",
      "[4716/6000] Iteration: 188640 | Loss: 0.0003 | PSNR: 35.5218 | lr: 0.00010000 | Time: 8.81s\n",
      "[4717/6000] Iteration: 188650 | Loss: 0.0005 | PSNR: 32.7387 | lr: 0.00010000 | Time: 8.75s\n",
      "[4717/6000] Iteration: 188660 | Loss: 0.0010 | PSNR: 29.9522 | lr: 0.00010000 | Time: 8.75s\n",
      "[4717/6000] Iteration: 188670 | Loss: 0.0004 | PSNR: 34.2485 | lr: 0.00010000 | Time: 8.74s\n",
      "[4717/6000] Iteration: 188680 | Loss: 0.0004 | PSNR: 34.4684 | lr: 0.00010000 | Time: 8.75s\n",
      "[4718/6000] Iteration: 188690 | Loss: 0.0007 | PSNR: 31.6308 | lr: 0.00010000 | Time: 8.76s\n",
      "[4718/6000] Iteration: 188700 | Loss: 0.0003 | PSNR: 34.7525 | lr: 0.00010000 | Time: 8.74s\n",
      "[4718/6000] Iteration: 188710 | Loss: 0.0007 | PSNR: 31.6770 | lr: 0.00010000 | Time: 8.72s\n",
      "[4718/6000] Iteration: 188720 | Loss: 0.0005 | PSNR: 32.8843 | lr: 0.00010000 | Time: 8.73s\n",
      "[4719/6000] Iteration: 188730 | Loss: 0.0004 | PSNR: 33.6704 | lr: 0.00010000 | Time: 8.77s\n",
      "[4719/6000] Iteration: 188740 | Loss: 0.0008 | PSNR: 30.9278 | lr: 0.00010000 | Time: 8.76s\n",
      "[4719/6000] Iteration: 188750 | Loss: 0.0005 | PSNR: 32.8445 | lr: 0.00010000 | Time: 8.78s\n",
      "[4719/6000] Iteration: 188760 | Loss: 0.0009 | PSNR: 30.2895 | lr: 0.00010000 | Time: 8.76s\n",
      "[4720/6000] Iteration: 188770 | Loss: 0.0004 | PSNR: 33.6966 | lr: 0.00010000 | Time: 8.75s\n",
      "[4720/6000] Iteration: 188780 | Loss: 0.0005 | PSNR: 32.6548 | lr: 0.00010000 | Time: 8.69s\n",
      "[4720/6000] Iteration: 188790 | Loss: 0.0007 | PSNR: 31.3535 | lr: 0.00010000 | Time: 8.78s\n",
      "[4720/6000] Iteration: 188800 | Loss: 0.0009 | PSNR: 30.3696 | lr: 0.00010000 | Time: 8.72s\n",
      "[4721/6000] Iteration: 188810 | Loss: 0.0008 | PSNR: 30.7386 | lr: 0.00010000 | Time: 8.73s\n",
      "[4721/6000] Iteration: 188820 | Loss: 0.0005 | PSNR: 32.7988 | lr: 0.00010000 | Time: 8.79s\n",
      "[4721/6000] Iteration: 188830 | Loss: 0.0006 | PSNR: 32.5009 | lr: 0.00010000 | Time: 8.73s\n",
      "[4721/6000] Iteration: 188840 | Loss: 0.0008 | PSNR: 30.8718 | lr: 0.00010000 | Time: 8.68s\n",
      "[4722/6000] Iteration: 188850 | Loss: 0.0003 | PSNR: 34.5974 | lr: 0.00010000 | Time: 8.70s\n",
      "[4722/6000] Iteration: 188860 | Loss: 0.0004 | PSNR: 33.8022 | lr: 0.00010000 | Time: 8.74s\n",
      "[4722/6000] Iteration: 188870 | Loss: 0.0006 | PSNR: 32.5933 | lr: 0.00010000 | Time: 8.72s\n",
      "[4722/6000] Iteration: 188880 | Loss: 0.0007 | PSNR: 31.4759 | lr: 0.00010000 | Time: 8.74s\n",
      "[4723/6000] Iteration: 188890 | Loss: 0.0004 | PSNR: 33.9696 | lr: 0.00010000 | Time: 8.75s\n",
      "[4723/6000] Iteration: 188900 | Loss: 0.0006 | PSNR: 32.3314 | lr: 0.00010000 | Time: 8.78s\n",
      "[4723/6000] Iteration: 188910 | Loss: 0.0005 | PSNR: 32.9584 | lr: 0.00010000 | Time: 8.74s\n",
      "[4723/6000] Iteration: 188920 | Loss: 0.0008 | PSNR: 30.9699 | lr: 0.00010000 | Time: 8.77s\n",
      "[4724/6000] Iteration: 188930 | Loss: 0.0010 | PSNR: 30.0274 | lr: 0.00010000 | Time: 8.69s\n",
      "[4724/6000] Iteration: 188940 | Loss: 0.0005 | PSNR: 33.2616 | lr: 0.00010000 | Time: 8.77s\n",
      "[4724/6000] Iteration: 188950 | Loss: 0.0006 | PSNR: 31.9718 | lr: 0.00010000 | Time: 8.74s\n",
      "[4724/6000] Iteration: 188960 | Loss: 0.0014 | PSNR: 28.6926 | lr: 0.00010000 | Time: 8.74s\n",
      "[4725/6000] Iteration: 188970 | Loss: 0.0005 | PSNR: 33.4043 | lr: 0.00010000 | Time: 8.73s\n",
      "[4725/6000] Iteration: 188980 | Loss: 0.0026 | PSNR: 25.7728 | lr: 0.00010000 | Time: 8.68s\n",
      "[4725/6000] Iteration: 188990 | Loss: 0.0015 | PSNR: 28.3592 | lr: 0.00010000 | Time: 8.72s\n",
      "[4725/6000] Iteration: 189000 | Loss: 0.0003 | PSNR: 35.8658 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 26.921186447143555\n",
      "1.png 28.56914710998535\n",
      "2.png 25.662565231323242\n",
      "3.png 26.469270706176758\n",
      "4.png 31.970605850219727\n",
      "5.png 35.49690628051758\n",
      "6.png 24.58300018310547\n",
      "7.png 33.09595489501953\n",
      "8.png 21.708236694335938\n",
      "9.png 28.06918716430664\n",
      "10.png 30.22958755493164\n",
      "11.png 25.61150360107422\n",
      "12.png 25.884925842285156\n",
      "13.png 25.720842361450195\n",
      "14.png 24.32143211364746\n",
      "15.png 26.506805419921875\n",
      "16.png 31.820547103881836\n",
      "17.png 23.343791961669922\n",
      "18.png 29.064998626708984\n",
      "19.png 28.928434371948242\n",
      "20.png 28.154943466186523\n",
      "21.png 23.838884353637695\n",
      "22.png 19.4102840423584\n",
      "23.png 25.48995018005371\n",
      "24.png 21.889698028564453\n",
      "25.png 26.22325897216797\n",
      "26.png 31.76587677001953\n",
      "27.png 25.718608856201172\n",
      "28.png 25.582176208496094\n",
      "29.png 30.0919132232666\n",
      "30.png 29.360124588012695\n",
      "31.png 32.05951690673828\n",
      "32.png 22.823341369628906\n",
      "33.png 33.863216400146484\n",
      "34.png 31.072795867919922\n",
      "35.png 29.089900970458984\n",
      "36.png 31.368518829345703\n",
      "37.png 29.097190856933594\n",
      "38.png 29.17911148071289\n",
      "39.png 28.021404266357422\n",
      "Validation PSNR:  27.70199112892151\n",
      "[4726/6000] Iteration: 189010 | Loss: 0.0012 | PSNR: 29.3490 | lr: 0.00010000 | Time: 28.25s\n",
      "[4726/6000] Iteration: 189020 | Loss: 0.0007 | PSNR: 31.4359 | lr: 0.00010000 | Time: 8.77s\n",
      "[4726/6000] Iteration: 189030 | Loss: 0.0013 | PSNR: 28.7713 | lr: 0.00010000 | Time: 8.71s\n",
      "[4726/6000] Iteration: 189040 | Loss: 0.0009 | PSNR: 30.2636 | lr: 0.00010000 | Time: 8.76s\n",
      "[4727/6000] Iteration: 189050 | Loss: 0.0014 | PSNR: 28.6589 | lr: 0.00010000 | Time: 8.79s\n",
      "[4727/6000] Iteration: 189060 | Loss: 0.0012 | PSNR: 29.3481 | lr: 0.00010000 | Time: 8.70s\n",
      "[4727/6000] Iteration: 189070 | Loss: 0.0023 | PSNR: 26.4337 | lr: 0.00010000 | Time: 8.73s\n",
      "[4727/6000] Iteration: 189080 | Loss: 0.0003 | PSNR: 34.7276 | lr: 0.00010000 | Time: 8.85s\n",
      "[4728/6000] Iteration: 189090 | Loss: 0.0005 | PSNR: 32.6154 | lr: 0.00010000 | Time: 8.76s\n",
      "[4728/6000] Iteration: 189100 | Loss: 0.0005 | PSNR: 33.4199 | lr: 0.00010000 | Time: 8.72s\n",
      "[4728/6000] Iteration: 189110 | Loss: 0.0006 | PSNR: 32.3635 | lr: 0.00010000 | Time: 8.69s\n",
      "[4728/6000] Iteration: 189120 | Loss: 0.0004 | PSNR: 34.2851 | lr: 0.00010000 | Time: 8.70s\n",
      "[4729/6000] Iteration: 189130 | Loss: 0.0006 | PSNR: 31.8738 | lr: 0.00010000 | Time: 8.70s\n",
      "[4729/6000] Iteration: 189140 | Loss: 0.0007 | PSNR: 31.5292 | lr: 0.00010000 | Time: 8.73s\n",
      "[4729/6000] Iteration: 189150 | Loss: 0.0005 | PSNR: 32.8297 | lr: 0.00010000 | Time: 8.73s\n",
      "[4729/6000] Iteration: 189160 | Loss: 0.0006 | PSNR: 32.1402 | lr: 0.00010000 | Time: 8.72s\n",
      "[4730/6000] Iteration: 189170 | Loss: 0.0005 | PSNR: 33.1193 | lr: 0.00010000 | Time: 8.71s\n",
      "[4730/6000] Iteration: 189180 | Loss: 0.0006 | PSNR: 31.9959 | lr: 0.00010000 | Time: 8.71s\n",
      "[4730/6000] Iteration: 189190 | Loss: 0.0004 | PSNR: 33.7435 | lr: 0.00010000 | Time: 8.76s\n",
      "[4730/6000] Iteration: 189200 | Loss: 0.0005 | PSNR: 32.8899 | lr: 0.00010000 | Time: 8.76s\n",
      "[4731/6000] Iteration: 189210 | Loss: 0.0005 | PSNR: 32.6711 | lr: 0.00010000 | Time: 8.72s\n",
      "[4731/6000] Iteration: 189220 | Loss: 0.0004 | PSNR: 33.8777 | lr: 0.00010000 | Time: 8.73s\n",
      "[4731/6000] Iteration: 189230 | Loss: 0.0005 | PSNR: 33.0334 | lr: 0.00010000 | Time: 8.74s\n",
      "[4731/6000] Iteration: 189240 | Loss: 0.0002 | PSNR: 36.2087 | lr: 0.00010000 | Time: 8.72s\n",
      "[4732/6000] Iteration: 189250 | Loss: 0.0002 | PSNR: 36.1670 | lr: 0.00010000 | Time: 8.75s\n",
      "[4732/6000] Iteration: 189260 | Loss: 0.0003 | PSNR: 35.9101 | lr: 0.00010000 | Time: 8.76s\n",
      "[4732/6000] Iteration: 189270 | Loss: 0.0007 | PSNR: 31.6679 | lr: 0.00010000 | Time: 8.72s\n",
      "[4732/6000] Iteration: 189280 | Loss: 0.0002 | PSNR: 37.2674 | lr: 0.00010000 | Time: 8.69s\n",
      "[4733/6000] Iteration: 189290 | Loss: 0.0004 | PSNR: 34.4176 | lr: 0.00010000 | Time: 8.84s\n",
      "[4733/6000] Iteration: 189300 | Loss: 0.0005 | PSNR: 33.1024 | lr: 0.00010000 | Time: 8.77s\n",
      "[4733/6000] Iteration: 189310 | Loss: 0.0003 | PSNR: 35.0240 | lr: 0.00010000 | Time: 8.72s\n",
      "[4733/6000] Iteration: 189320 | Loss: 0.0003 | PSNR: 35.1142 | lr: 0.00010000 | Time: 8.69s\n",
      "[4734/6000] Iteration: 189330 | Loss: 0.0002 | PSNR: 36.4236 | lr: 0.00010000 | Time: 8.75s\n",
      "[4734/6000] Iteration: 189340 | Loss: 0.0003 | PSNR: 35.9135 | lr: 0.00010000 | Time: 8.71s\n",
      "[4734/6000] Iteration: 189350 | Loss: 0.0004 | PSNR: 33.8780 | lr: 0.00010000 | Time: 8.75s\n",
      "[4734/6000] Iteration: 189360 | Loss: 0.0002 | PSNR: 36.5296 | lr: 0.00010000 | Time: 8.71s\n",
      "[4735/6000] Iteration: 189370 | Loss: 0.0006 | PSNR: 32.5865 | lr: 0.00010000 | Time: 8.79s\n",
      "[4735/6000] Iteration: 189380 | Loss: 0.0004 | PSNR: 34.4718 | lr: 0.00010000 | Time: 8.69s\n",
      "[4735/6000] Iteration: 189390 | Loss: 0.0008 | PSNR: 31.1950 | lr: 0.00010000 | Time: 8.73s\n",
      "[4735/6000] Iteration: 189400 | Loss: 0.0004 | PSNR: 34.2703 | lr: 0.00010000 | Time: 8.72s\n",
      "[4736/6000] Iteration: 189410 | Loss: 0.0002 | PSNR: 36.3876 | lr: 0.00010000 | Time: 8.73s\n",
      "[4736/6000] Iteration: 189420 | Loss: 0.0004 | PSNR: 33.7775 | lr: 0.00010000 | Time: 8.81s\n",
      "[4736/6000] Iteration: 189430 | Loss: 0.0003 | PSNR: 34.7575 | lr: 0.00010000 | Time: 8.76s\n",
      "[4736/6000] Iteration: 189440 | Loss: 0.0008 | PSNR: 31.2401 | lr: 0.00010000 | Time: 8.71s\n",
      "[4737/6000] Iteration: 189450 | Loss: 0.0004 | PSNR: 34.0859 | lr: 0.00010000 | Time: 8.72s\n",
      "[4737/6000] Iteration: 189460 | Loss: 0.0003 | PSNR: 34.8026 | lr: 0.00010000 | Time: 8.75s\n",
      "[4737/6000] Iteration: 189470 | Loss: 0.0003 | PSNR: 35.1981 | lr: 0.00010000 | Time: 8.78s\n",
      "[4737/6000] Iteration: 189480 | Loss: 0.0003 | PSNR: 35.0451 | lr: 0.00010000 | Time: 8.71s\n",
      "[4738/6000] Iteration: 189490 | Loss: 0.0003 | PSNR: 35.6969 | lr: 0.00010000 | Time: 8.70s\n",
      "[4738/6000] Iteration: 189500 | Loss: 0.0002 | PSNR: 36.7921 | lr: 0.00010000 | Time: 8.74s\n",
      "[4738/6000] Iteration: 189510 | Loss: 0.0004 | PSNR: 34.1074 | lr: 0.00010000 | Time: 8.78s\n",
      "[4738/6000] Iteration: 189520 | Loss: 0.0004 | PSNR: 33.8327 | lr: 0.00010000 | Time: 8.73s\n",
      "[4739/6000] Iteration: 189530 | Loss: 0.0002 | PSNR: 36.7326 | lr: 0.00010000 | Time: 8.72s\n",
      "[4739/6000] Iteration: 189540 | Loss: 0.0003 | PSNR: 34.6262 | lr: 0.00010000 | Time: 8.76s\n",
      "[4739/6000] Iteration: 189550 | Loss: 0.0003 | PSNR: 34.8865 | lr: 0.00010000 | Time: 8.72s\n",
      "[4739/6000] Iteration: 189560 | Loss: 0.0002 | PSNR: 36.3574 | lr: 0.00010000 | Time: 8.77s\n",
      "[4740/6000] Iteration: 189570 | Loss: 0.0005 | PSNR: 33.2907 | lr: 0.00010000 | Time: 8.69s\n",
      "[4740/6000] Iteration: 189580 | Loss: 0.0003 | PSNR: 34.9928 | lr: 0.00010000 | Time: 8.75s\n",
      "[4740/6000] Iteration: 189590 | Loss: 0.0002 | PSNR: 37.3480 | lr: 0.00010000 | Time: 8.79s\n",
      "[4740/6000] Iteration: 189600 | Loss: 0.0004 | PSNR: 34.0490 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 26.483898162841797\n",
      "1.png 29.017545700073242\n",
      "2.png 29.94304847717285\n",
      "3.png 30.16115379333496\n",
      "4.png 30.708942413330078\n",
      "5.png 33.54666519165039\n",
      "6.png 24.183216094970703\n",
      "7.png 32.0530891418457\n",
      "8.png 24.310834884643555\n",
      "9.png 28.949281692504883\n",
      "10.png 29.363330841064453\n",
      "11.png 26.408935546875\n",
      "12.png 30.441625595092773\n",
      "13.png 28.931360244750977\n",
      "14.png 24.761783599853516\n",
      "15.png 26.78767204284668\n",
      "16.png 31.214181900024414\n",
      "17.png 29.029403686523438\n",
      "18.png 30.114938735961914\n",
      "19.png 28.90387535095215\n",
      "20.png 26.761001586914062\n",
      "21.png 25.137407302856445\n",
      "22.png 21.89608383178711\n",
      "23.png 29.304744720458984\n",
      "24.png 25.512882232666016\n",
      "25.png 27.394084930419922\n",
      "26.png 32.84507369995117\n",
      "27.png 28.15465545654297\n",
      "28.png 24.465736389160156\n",
      "29.png 28.420278549194336\n",
      "30.png 27.840545654296875\n",
      "31.png 31.937747955322266\n",
      "32.png 27.05646514892578\n",
      "33.png 31.903093338012695\n",
      "34.png 29.360610961914062\n",
      "35.png 29.38943099975586\n",
      "36.png 30.69439125061035\n",
      "37.png 29.680084228515625\n",
      "38.png 31.08373260498047\n",
      "39.png 25.517852783203125\n",
      "Validation PSNR:  28.491767168045044\n",
      "[4741/6000] Iteration: 189610 | Loss: 0.0005 | PSNR: 32.8310 | lr: 0.00010000 | Time: 28.41s\n",
      "[4741/6000] Iteration: 189620 | Loss: 0.0004 | PSNR: 34.0441 | lr: 0.00010000 | Time: 8.72s\n",
      "[4741/6000] Iteration: 189630 | Loss: 0.0003 | PSNR: 34.8249 | lr: 0.00010000 | Time: 8.72s\n",
      "[4741/6000] Iteration: 189640 | Loss: 0.0004 | PSNR: 33.9977 | lr: 0.00010000 | Time: 8.73s\n",
      "[4742/6000] Iteration: 189650 | Loss: 0.0005 | PSNR: 33.0705 | lr: 0.00010000 | Time: 8.77s\n",
      "[4742/6000] Iteration: 189660 | Loss: 0.0004 | PSNR: 34.2648 | lr: 0.00010000 | Time: 8.84s\n",
      "[4742/6000] Iteration: 189670 | Loss: 0.0005 | PSNR: 33.0479 | lr: 0.00010000 | Time: 8.77s\n",
      "[4742/6000] Iteration: 189680 | Loss: 0.0008 | PSNR: 30.7490 | lr: 0.00010000 | Time: 8.71s\n",
      "[4743/6000] Iteration: 189690 | Loss: 0.0002 | PSNR: 36.2907 | lr: 0.00010000 | Time: 8.71s\n",
      "[4743/6000] Iteration: 189700 | Loss: 0.0004 | PSNR: 34.4100 | lr: 0.00010000 | Time: 8.70s\n",
      "[4743/6000] Iteration: 189710 | Loss: 0.0004 | PSNR: 34.3269 | lr: 0.00010000 | Time: 8.70s\n",
      "[4743/6000] Iteration: 189720 | Loss: 0.0002 | PSNR: 36.7774 | lr: 0.00010000 | Time: 8.69s\n",
      "[4744/6000] Iteration: 189730 | Loss: 0.0005 | PSNR: 33.0164 | lr: 0.00010000 | Time: 8.78s\n",
      "[4744/6000] Iteration: 189740 | Loss: 0.0003 | PSNR: 34.6573 | lr: 0.00010000 | Time: 8.80s\n",
      "[4744/6000] Iteration: 189750 | Loss: 0.0004 | PSNR: 34.3711 | lr: 0.00010000 | Time: 8.76s\n",
      "[4744/6000] Iteration: 189760 | Loss: 0.0004 | PSNR: 33.7037 | lr: 0.00010000 | Time: 8.73s\n",
      "[4745/6000] Iteration: 189770 | Loss: 0.0005 | PSNR: 33.3440 | lr: 0.00010000 | Time: 8.80s\n",
      "[4745/6000] Iteration: 189780 | Loss: 0.0004 | PSNR: 34.1483 | lr: 0.00010000 | Time: 8.72s\n",
      "[4745/6000] Iteration: 189790 | Loss: 0.0002 | PSNR: 36.0468 | lr: 0.00010000 | Time: 8.75s\n",
      "[4745/6000] Iteration: 189800 | Loss: 0.0006 | PSNR: 32.0736 | lr: 0.00010000 | Time: 8.78s\n",
      "[4746/6000] Iteration: 189810 | Loss: 0.0003 | PSNR: 34.8581 | lr: 0.00010000 | Time: 8.77s\n",
      "[4746/6000] Iteration: 189820 | Loss: 0.0005 | PSNR: 33.0879 | lr: 0.00010000 | Time: 8.79s\n",
      "[4746/6000] Iteration: 189830 | Loss: 0.0007 | PSNR: 31.4768 | lr: 0.00010000 | Time: 8.72s\n",
      "[4746/6000] Iteration: 189840 | Loss: 0.0003 | PSNR: 35.3968 | lr: 0.00010000 | Time: 8.74s\n",
      "[4747/6000] Iteration: 189850 | Loss: 0.0007 | PSNR: 31.5106 | lr: 0.00010000 | Time: 8.72s\n",
      "[4747/6000] Iteration: 189860 | Loss: 0.0004 | PSNR: 34.4878 | lr: 0.00010000 | Time: 8.76s\n",
      "[4747/6000] Iteration: 189870 | Loss: 0.0006 | PSNR: 32.2013 | lr: 0.00010000 | Time: 8.77s\n",
      "[4747/6000] Iteration: 189880 | Loss: 0.0004 | PSNR: 34.0307 | lr: 0.00010000 | Time: 8.72s\n",
      "[4748/6000] Iteration: 189890 | Loss: 0.0006 | PSNR: 31.9390 | lr: 0.00010000 | Time: 8.72s\n",
      "[4748/6000] Iteration: 189900 | Loss: 0.0004 | PSNR: 33.6924 | lr: 0.00010000 | Time: 8.74s\n",
      "[4748/6000] Iteration: 189910 | Loss: 0.0003 | PSNR: 35.0894 | lr: 0.00010000 | Time: 8.72s\n",
      "[4748/6000] Iteration: 189920 | Loss: 0.0003 | PSNR: 35.0111 | lr: 0.00010000 | Time: 8.78s\n",
      "[4749/6000] Iteration: 189930 | Loss: 0.0004 | PSNR: 34.0085 | lr: 0.00010000 | Time: 8.69s\n",
      "[4749/6000] Iteration: 189940 | Loss: 0.0003 | PSNR: 35.1545 | lr: 0.00010000 | Time: 8.75s\n",
      "[4749/6000] Iteration: 189950 | Loss: 0.0004 | PSNR: 33.7468 | lr: 0.00010000 | Time: 8.76s\n",
      "[4749/6000] Iteration: 189960 | Loss: 0.0004 | PSNR: 34.1787 | lr: 0.00010000 | Time: 8.71s\n",
      "[4750/6000] Iteration: 189970 | Loss: 0.0005 | PSNR: 32.8605 | lr: 0.00010000 | Time: 8.70s\n",
      "[4750/6000] Iteration: 189980 | Loss: 0.0003 | PSNR: 35.6527 | lr: 0.00010000 | Time: 8.77s\n",
      "[4750/6000] Iteration: 189990 | Loss: 0.0007 | PSNR: 31.7119 | lr: 0.00010000 | Time: 8.81s\n",
      "[4750/6000] Iteration: 190000 | Loss: 0.0004 | PSNR: 34.5368 | lr: 0.00010000 | Time: 8.70s\n",
      "[4751/6000] Iteration: 190010 | Loss: 0.0004 | PSNR: 34.2379 | lr: 0.00010000 | Time: 8.72s\n",
      "[4751/6000] Iteration: 190020 | Loss: 0.0006 | PSNR: 32.0168 | lr: 0.00010000 | Time: 8.74s\n",
      "[4751/6000] Iteration: 190030 | Loss: 0.0003 | PSNR: 35.7919 | lr: 0.00010000 | Time: 8.73s\n",
      "[4751/6000] Iteration: 190040 | Loss: 0.0006 | PSNR: 32.4492 | lr: 0.00010000 | Time: 8.67s\n",
      "[4752/6000] Iteration: 190050 | Loss: 0.0002 | PSNR: 36.9988 | lr: 0.00010000 | Time: 8.72s\n",
      "[4752/6000] Iteration: 190060 | Loss: 0.0005 | PSNR: 32.9889 | lr: 0.00010000 | Time: 8.77s\n",
      "[4752/6000] Iteration: 190070 | Loss: 0.0003 | PSNR: 35.4616 | lr: 0.00010000 | Time: 8.73s\n",
      "[4752/6000] Iteration: 190080 | Loss: 0.0005 | PSNR: 33.0273 | lr: 0.00010000 | Time: 8.73s\n",
      "[4753/6000] Iteration: 190090 | Loss: 0.0003 | PSNR: 35.6797 | lr: 0.00010000 | Time: 8.76s\n",
      "[4753/6000] Iteration: 190100 | Loss: 0.0002 | PSNR: 37.1061 | lr: 0.00010000 | Time: 8.75s\n",
      "[4753/6000] Iteration: 190110 | Loss: 0.0005 | PSNR: 32.6433 | lr: 0.00010000 | Time: 8.69s\n",
      "[4753/6000] Iteration: 190120 | Loss: 0.0004 | PSNR: 33.7616 | lr: 0.00010000 | Time: 8.69s\n",
      "[4754/6000] Iteration: 190130 | Loss: 0.0004 | PSNR: 33.9753 | lr: 0.00010000 | Time: 8.74s\n",
      "[4754/6000] Iteration: 190140 | Loss: 0.0004 | PSNR: 34.4371 | lr: 0.00010000 | Time: 8.72s\n",
      "[4754/6000] Iteration: 190150 | Loss: 0.0004 | PSNR: 33.5087 | lr: 0.00010000 | Time: 8.73s\n",
      "[4754/6000] Iteration: 190160 | Loss: 0.0005 | PSNR: 33.4618 | lr: 0.00010000 | Time: 8.75s\n",
      "[4755/6000] Iteration: 190170 | Loss: 0.0003 | PSNR: 35.0880 | lr: 0.00010000 | Time: 8.71s\n",
      "[4755/6000] Iteration: 190180 | Loss: 0.0002 | PSNR: 36.6278 | lr: 0.00010000 | Time: 8.75s\n",
      "[4755/6000] Iteration: 190190 | Loss: 0.0005 | PSNR: 32.9146 | lr: 0.00010000 | Time: 8.78s\n",
      "[4755/6000] Iteration: 190200 | Loss: 0.0005 | PSNR: 33.0978 | lr: 0.00010000 | Time: 8.73s\n",
      "0.png 25.88290023803711\n",
      "1.png 27.975040435791016\n",
      "2.png 30.756189346313477\n",
      "3.png 30.028676986694336\n",
      "4.png 34.66559600830078\n",
      "5.png 31.53887939453125\n",
      "6.png 25.905155181884766\n",
      "7.png 31.96638298034668\n",
      "8.png 22.56366539001465\n",
      "9.png 29.291202545166016\n",
      "10.png 31.554779052734375\n",
      "11.png 29.578289031982422\n",
      "12.png 31.48078155517578\n",
      "13.png 28.05109405517578\n",
      "14.png 22.712804794311523\n",
      "15.png 28.045656204223633\n",
      "16.png 32.279354095458984\n",
      "17.png 25.958534240722656\n",
      "18.png 31.3218994140625\n",
      "19.png 30.119102478027344\n",
      "20.png 27.46794891357422\n",
      "21.png 25.324594497680664\n",
      "22.png 23.075363159179688\n",
      "23.png 26.297100067138672\n",
      "24.png 24.961624145507812\n",
      "25.png 27.745235443115234\n",
      "26.png 27.61492156982422\n",
      "27.png 27.457075119018555\n",
      "28.png 20.871784210205078\n",
      "29.png 28.752681732177734\n",
      "30.png 28.290462493896484\n",
      "31.png 33.83235168457031\n",
      "32.png 28.51585578918457\n",
      "33.png 33.868492126464844\n",
      "34.png 29.76466178894043\n",
      "35.png 29.62541961669922\n",
      "36.png 30.115482330322266\n",
      "37.png 29.555744171142578\n",
      "38.png 32.332969665527344\n",
      "39.png 25.27602767944336\n",
      "Validation PSNR:  28.56054449081421\n",
      "[4756/6000] Iteration: 190210 | Loss: 0.0003 | PSNR: 34.6059 | lr: 0.00010000 | Time: 28.40s\n",
      "[4756/6000] Iteration: 190220 | Loss: 0.0003 | PSNR: 34.8979 | lr: 0.00010000 | Time: 8.68s\n",
      "[4756/6000] Iteration: 190230 | Loss: 0.0002 | PSNR: 38.0405 | lr: 0.00010000 | Time: 8.68s\n",
      "[4756/6000] Iteration: 190240 | Loss: 0.0005 | PSNR: 33.2725 | lr: 0.00010000 | Time: 8.71s\n",
      "[4757/6000] Iteration: 190250 | Loss: 0.0003 | PSNR: 34.7615 | lr: 0.00010000 | Time: 8.76s\n",
      "[4757/6000] Iteration: 190260 | Loss: 0.0005 | PSNR: 33.3739 | lr: 0.00010000 | Time: 8.73s\n",
      "[4757/6000] Iteration: 190270 | Loss: 0.0004 | PSNR: 33.8149 | lr: 0.00010000 | Time: 8.74s\n",
      "[4757/6000] Iteration: 190280 | Loss: 0.0004 | PSNR: 33.7102 | lr: 0.00010000 | Time: 8.75s\n",
      "[4758/6000] Iteration: 190290 | Loss: 0.0005 | PSNR: 33.0634 | lr: 0.00010000 | Time: 8.73s\n",
      "[4758/6000] Iteration: 190300 | Loss: 0.0003 | PSNR: 35.1880 | lr: 0.00010000 | Time: 8.72s\n",
      "[4758/6000] Iteration: 190310 | Loss: 0.0005 | PSNR: 33.3363 | lr: 0.00010000 | Time: 8.70s\n",
      "[4758/6000] Iteration: 190320 | Loss: 0.0008 | PSNR: 30.9850 | lr: 0.00010000 | Time: 8.73s\n",
      "[4759/6000] Iteration: 190330 | Loss: 0.0003 | PSNR: 35.2610 | lr: 0.00010000 | Time: 8.69s\n",
      "[4759/6000] Iteration: 190340 | Loss: 0.0004 | PSNR: 33.7474 | lr: 0.00010000 | Time: 8.69s\n",
      "[4759/6000] Iteration: 190350 | Loss: 0.0004 | PSNR: 33.5987 | lr: 0.00010000 | Time: 8.76s\n",
      "[4759/6000] Iteration: 190360 | Loss: 0.0005 | PSNR: 33.1626 | lr: 0.00010000 | Time: 8.67s\n",
      "[4760/6000] Iteration: 190370 | Loss: 0.0008 | PSNR: 31.1652 | lr: 0.00010000 | Time: 8.73s\n",
      "[4760/6000] Iteration: 190380 | Loss: 0.0002 | PSNR: 36.7745 | lr: 0.00010000 | Time: 8.68s\n",
      "[4760/6000] Iteration: 190390 | Loss: 0.0002 | PSNR: 36.1506 | lr: 0.00010000 | Time: 8.75s\n",
      "[4760/6000] Iteration: 190400 | Loss: 0.0002 | PSNR: 36.6795 | lr: 0.00010000 | Time: 8.72s\n",
      "[4761/6000] Iteration: 190410 | Loss: 0.0005 | PSNR: 33.2937 | lr: 0.00010000 | Time: 8.71s\n",
      "[4761/6000] Iteration: 190420 | Loss: 0.0004 | PSNR: 34.1396 | lr: 0.00010000 | Time: 8.77s\n",
      "[4761/6000] Iteration: 190430 | Loss: 0.0005 | PSNR: 33.4223 | lr: 0.00010000 | Time: 8.72s\n",
      "[4761/6000] Iteration: 190440 | Loss: 0.0004 | PSNR: 34.2405 | lr: 0.00010000 | Time: 8.70s\n",
      "[4762/6000] Iteration: 190450 | Loss: 0.0003 | PSNR: 35.0482 | lr: 0.00010000 | Time: 8.70s\n",
      "[4762/6000] Iteration: 190460 | Loss: 0.0002 | PSNR: 36.2058 | lr: 0.00010000 | Time: 8.79s\n",
      "[4762/6000] Iteration: 190470 | Loss: 0.0006 | PSNR: 32.4163 | lr: 0.00010000 | Time: 8.71s\n",
      "[4762/6000] Iteration: 190480 | Loss: 0.0002 | PSNR: 36.2805 | lr: 0.00010000 | Time: 8.70s\n",
      "[4763/6000] Iteration: 190490 | Loss: 0.0005 | PSNR: 33.3889 | lr: 0.00010000 | Time: 8.76s\n",
      "[4763/6000] Iteration: 190500 | Loss: 0.0003 | PSNR: 35.0773 | lr: 0.00010000 | Time: 8.74s\n",
      "[4763/6000] Iteration: 190510 | Loss: 0.0003 | PSNR: 34.6293 | lr: 0.00010000 | Time: 8.76s\n",
      "[4763/6000] Iteration: 190520 | Loss: 0.0004 | PSNR: 34.2970 | lr: 0.00010000 | Time: 8.76s\n",
      "[4764/6000] Iteration: 190530 | Loss: 0.0004 | PSNR: 34.4727 | lr: 0.00010000 | Time: 8.74s\n",
      "[4764/6000] Iteration: 190540 | Loss: 0.0002 | PSNR: 36.4390 | lr: 0.00010000 | Time: 8.75s\n",
      "[4764/6000] Iteration: 190550 | Loss: 0.0003 | PSNR: 34.9947 | lr: 0.00010000 | Time: 8.71s\n",
      "[4764/6000] Iteration: 190560 | Loss: 0.0003 | PSNR: 35.3005 | lr: 0.00010000 | Time: 8.70s\n",
      "[4765/6000] Iteration: 190570 | Loss: 0.0002 | PSNR: 36.9840 | lr: 0.00010000 | Time: 8.73s\n",
      "[4765/6000] Iteration: 190580 | Loss: 0.0003 | PSNR: 35.5733 | lr: 0.00010000 | Time: 8.76s\n",
      "[4765/6000] Iteration: 190590 | Loss: 0.0003 | PSNR: 34.7772 | lr: 0.00010000 | Time: 8.72s\n",
      "[4765/6000] Iteration: 190600 | Loss: 0.0004 | PSNR: 34.2024 | lr: 0.00010000 | Time: 8.73s\n",
      "[4766/6000] Iteration: 190610 | Loss: 0.0005 | PSNR: 33.4026 | lr: 0.00010000 | Time: 8.73s\n",
      "[4766/6000] Iteration: 190620 | Loss: 0.0003 | PSNR: 34.9043 | lr: 0.00010000 | Time: 8.77s\n",
      "[4766/6000] Iteration: 190630 | Loss: 0.0003 | PSNR: 35.5376 | lr: 0.00010000 | Time: 8.71s\n",
      "[4766/6000] Iteration: 190640 | Loss: 0.0004 | PSNR: 33.7937 | lr: 0.00010000 | Time: 8.76s\n",
      "[4767/6000] Iteration: 190650 | Loss: 0.0010 | PSNR: 30.1897 | lr: 0.00010000 | Time: 8.71s\n",
      "[4767/6000] Iteration: 190660 | Loss: 0.0006 | PSNR: 32.3438 | lr: 0.00010000 | Time: 8.76s\n",
      "[4767/6000] Iteration: 190670 | Loss: 0.0003 | PSNR: 34.6802 | lr: 0.00010000 | Time: 8.74s\n",
      "[4767/6000] Iteration: 190680 | Loss: 0.0005 | PSNR: 32.9781 | lr: 0.00010000 | Time: 8.71s\n",
      "[4768/6000] Iteration: 190690 | Loss: 0.0003 | PSNR: 35.7838 | lr: 0.00010000 | Time: 8.69s\n",
      "[4768/6000] Iteration: 190700 | Loss: 0.0006 | PSNR: 31.8914 | lr: 0.00010000 | Time: 8.71s\n",
      "[4768/6000] Iteration: 190710 | Loss: 0.0008 | PSNR: 31.0937 | lr: 0.00010000 | Time: 8.75s\n",
      "[4768/6000] Iteration: 190720 | Loss: 0.0006 | PSNR: 32.0417 | lr: 0.00010000 | Time: 8.71s\n",
      "[4769/6000] Iteration: 190730 | Loss: 0.0008 | PSNR: 31.1030 | lr: 0.00010000 | Time: 8.71s\n",
      "[4769/6000] Iteration: 190740 | Loss: 0.0005 | PSNR: 32.8799 | lr: 0.00010000 | Time: 8.68s\n",
      "[4769/6000] Iteration: 190750 | Loss: 0.0004 | PSNR: 34.1997 | lr: 0.00010000 | Time: 8.71s\n",
      "[4769/6000] Iteration: 190760 | Loss: 0.0004 | PSNR: 34.0431 | lr: 0.00010000 | Time: 8.75s\n",
      "[4770/6000] Iteration: 190770 | Loss: 0.0008 | PSNR: 30.7888 | lr: 0.00010000 | Time: 8.73s\n",
      "[4770/6000] Iteration: 190780 | Loss: 0.0005 | PSNR: 32.6193 | lr: 0.00010000 | Time: 8.71s\n",
      "[4770/6000] Iteration: 190790 | Loss: 0.0004 | PSNR: 34.4713 | lr: 0.00010000 | Time: 8.72s\n",
      "[4770/6000] Iteration: 190800 | Loss: 0.0007 | PSNR: 31.7255 | lr: 0.00010000 | Time: 8.74s\n",
      "0.png 28.36899185180664\n",
      "1.png 29.871723175048828\n",
      "2.png 32.58953857421875\n",
      "3.png 31.97085952758789\n",
      "4.png 34.06153106689453\n",
      "5.png 28.995059967041016\n",
      "6.png 27.837636947631836\n",
      "7.png 31.907928466796875\n",
      "8.png 25.457866668701172\n",
      "9.png 27.731006622314453\n",
      "10.png 25.637123107910156\n",
      "11.png 27.908479690551758\n",
      "12.png 29.841251373291016\n",
      "13.png 22.380218505859375\n",
      "14.png 27.890005111694336\n",
      "15.png 29.162256240844727\n",
      "16.png 32.417076110839844\n",
      "17.png 27.603736877441406\n",
      "18.png 28.24880599975586\n",
      "19.png 25.787105560302734\n",
      "20.png 21.558578491210938\n",
      "21.png 26.650991439819336\n",
      "22.png 24.48873519897461\n",
      "23.png 31.52090072631836\n",
      "24.png 27.77634620666504\n",
      "25.png 29.028852462768555\n",
      "26.png 32.93568801879883\n",
      "27.png 29.15102195739746\n",
      "28.png 28.040380477905273\n",
      "29.png 30.851116180419922\n",
      "30.png 32.52460861206055\n",
      "31.png 30.740612030029297\n",
      "32.png 29.785539627075195\n",
      "33.png 33.67966079711914\n",
      "34.png 30.840795516967773\n",
      "35.png 28.374109268188477\n",
      "36.png 31.01487922668457\n",
      "37.png 29.527570724487305\n",
      "38.png 28.351696014404297\n",
      "39.png 30.15924072265625\n",
      "Validation PSNR:  29.06673812866211\n",
      "[4771/6000] Iteration: 190810 | Loss: 0.0003 | PSNR: 34.8007 | lr: 0.00010000 | Time: 28.34s\n",
      "[4771/6000] Iteration: 190820 | Loss: 0.0011 | PSNR: 29.7643 | lr: 0.00010000 | Time: 8.69s\n",
      "[4771/6000] Iteration: 190830 | Loss: 0.0009 | PSNR: 30.3535 | lr: 0.00010000 | Time: 8.71s\n",
      "[4771/6000] Iteration: 190840 | Loss: 0.0006 | PSNR: 32.5141 | lr: 0.00010000 | Time: 8.70s\n",
      "[4772/6000] Iteration: 190850 | Loss: 0.0009 | PSNR: 30.4567 | lr: 0.00010000 | Time: 8.73s\n",
      "[4772/6000] Iteration: 190860 | Loss: 0.0003 | PSNR: 35.2177 | lr: 0.00010000 | Time: 8.80s\n",
      "[4772/6000] Iteration: 190870 | Loss: 0.0003 | PSNR: 35.8118 | lr: 0.00010000 | Time: 8.77s\n",
      "[4772/6000] Iteration: 190880 | Loss: 0.0005 | PSNR: 32.9466 | lr: 0.00010000 | Time: 8.73s\n",
      "[4773/6000] Iteration: 190890 | Loss: 0.0006 | PSNR: 32.5828 | lr: 0.00010000 | Time: 8.75s\n",
      "[4773/6000] Iteration: 190900 | Loss: 0.0004 | PSNR: 33.5643 | lr: 0.00010000 | Time: 8.75s\n",
      "[4773/6000] Iteration: 190910 | Loss: 0.0004 | PSNR: 33.4989 | lr: 0.00010000 | Time: 8.83s\n",
      "[4773/6000] Iteration: 190920 | Loss: 0.0004 | PSNR: 34.4186 | lr: 0.00010000 | Time: 8.81s\n",
      "[4774/6000] Iteration: 190930 | Loss: 0.0004 | PSNR: 33.5455 | lr: 0.00010000 | Time: 8.78s\n",
      "[4774/6000] Iteration: 190940 | Loss: 0.0003 | PSNR: 36.0155 | lr: 0.00010000 | Time: 8.76s\n",
      "[4774/6000] Iteration: 190950 | Loss: 0.0002 | PSNR: 36.4561 | lr: 0.00010000 | Time: 8.71s\n",
      "[4774/6000] Iteration: 190960 | Loss: 0.0005 | PSNR: 33.1344 | lr: 0.00010000 | Time: 8.78s\n",
      "[4775/6000] Iteration: 190970 | Loss: 0.0002 | PSNR: 36.4900 | lr: 0.00010000 | Time: 8.79s\n",
      "[4775/6000] Iteration: 190980 | Loss: 0.0009 | PSNR: 30.5488 | lr: 0.00010000 | Time: 8.73s\n",
      "[4775/6000] Iteration: 190990 | Loss: 0.0005 | PSNR: 32.9373 | lr: 0.00010000 | Time: 8.67s\n",
      "[4775/6000] Iteration: 191000 | Loss: 0.0007 | PSNR: 31.5072 | lr: 0.00010000 | Time: 8.73s\n",
      "[4776/6000] Iteration: 191010 | Loss: 0.0004 | PSNR: 33.9505 | lr: 0.00010000 | Time: 8.78s\n",
      "[4776/6000] Iteration: 191020 | Loss: 0.0003 | PSNR: 34.6918 | lr: 0.00010000 | Time: 8.73s\n",
      "[4776/6000] Iteration: 191030 | Loss: 0.0004 | PSNR: 33.7720 | lr: 0.00010000 | Time: 8.73s\n",
      "[4776/6000] Iteration: 191040 | Loss: 0.0027 | PSNR: 25.6792 | lr: 0.00010000 | Time: 8.76s\n",
      "[4777/6000] Iteration: 191050 | Loss: 0.0004 | PSNR: 34.4489 | lr: 0.00010000 | Time: 8.72s\n",
      "[4777/6000] Iteration: 191060 | Loss: 0.0004 | PSNR: 33.7120 | lr: 0.00010000 | Time: 8.74s\n",
      "[4777/6000] Iteration: 191070 | Loss: 0.0004 | PSNR: 33.5374 | lr: 0.00010000 | Time: 8.70s\n",
      "[4777/6000] Iteration: 191080 | Loss: 0.0004 | PSNR: 34.4187 | lr: 0.00010000 | Time: 8.72s\n",
      "[4778/6000] Iteration: 191090 | Loss: 0.0004 | PSNR: 34.1655 | lr: 0.00010000 | Time: 8.70s\n",
      "[4778/6000] Iteration: 191100 | Loss: 0.0007 | PSNR: 31.6085 | lr: 0.00010000 | Time: 8.69s\n",
      "[4778/6000] Iteration: 191110 | Loss: 0.0004 | PSNR: 33.5251 | lr: 0.00010000 | Time: 8.72s\n",
      "[4778/6000] Iteration: 191120 | Loss: 0.0004 | PSNR: 33.8330 | lr: 0.00010000 | Time: 8.76s\n",
      "[4779/6000] Iteration: 191130 | Loss: 0.0003 | PSNR: 34.8913 | lr: 0.00010000 | Time: 8.74s\n",
      "[4779/6000] Iteration: 191140 | Loss: 0.0003 | PSNR: 35.6023 | lr: 0.00010000 | Time: 8.79s\n",
      "[4779/6000] Iteration: 191150 | Loss: 0.0004 | PSNR: 34.3108 | lr: 0.00010000 | Time: 8.80s\n",
      "[4779/6000] Iteration: 191160 | Loss: 0.0005 | PSNR: 33.2391 | lr: 0.00010000 | Time: 8.72s\n",
      "[4780/6000] Iteration: 191170 | Loss: 0.0002 | PSNR: 37.2967 | lr: 0.00010000 | Time: 8.71s\n",
      "[4780/6000] Iteration: 191180 | Loss: 0.0003 | PSNR: 34.9093 | lr: 0.00010000 | Time: 8.76s\n",
      "[4780/6000] Iteration: 191190 | Loss: 0.0011 | PSNR: 29.7387 | lr: 0.00010000 | Time: 8.75s\n",
      "[4780/6000] Iteration: 191200 | Loss: 0.0005 | PSNR: 33.4190 | lr: 0.00010000 | Time: 8.67s\n",
      "[4781/6000] Iteration: 191210 | Loss: 0.0003 | PSNR: 35.0136 | lr: 0.00010000 | Time: 8.66s\n",
      "[4781/6000] Iteration: 191220 | Loss: 0.0003 | PSNR: 34.7901 | lr: 0.00010000 | Time: 8.69s\n",
      "[4781/6000] Iteration: 191230 | Loss: 0.0004 | PSNR: 34.2837 | lr: 0.00010000 | Time: 8.68s\n",
      "[4781/6000] Iteration: 191240 | Loss: 0.0004 | PSNR: 34.1806 | lr: 0.00010000 | Time: 8.73s\n",
      "[4782/6000] Iteration: 191250 | Loss: 0.0004 | PSNR: 34.3384 | lr: 0.00010000 | Time: 8.66s\n",
      "[4782/6000] Iteration: 191260 | Loss: 0.0004 | PSNR: 33.5681 | lr: 0.00010000 | Time: 8.73s\n",
      "[4782/6000] Iteration: 191270 | Loss: 0.0003 | PSNR: 35.0770 | lr: 0.00010000 | Time: 8.79s\n",
      "[4782/6000] Iteration: 191280 | Loss: 0.0002 | PSNR: 36.6017 | lr: 0.00010000 | Time: 8.68s\n",
      "[4783/6000] Iteration: 191290 | Loss: 0.0002 | PSNR: 36.2760 | lr: 0.00010000 | Time: 8.71s\n",
      "[4783/6000] Iteration: 191300 | Loss: 0.0002 | PSNR: 36.4473 | lr: 0.00010000 | Time: 8.69s\n",
      "[4783/6000] Iteration: 191310 | Loss: 0.0002 | PSNR: 36.1606 | lr: 0.00010000 | Time: 8.73s\n",
      "[4783/6000] Iteration: 191320 | Loss: 0.0003 | PSNR: 34.8949 | lr: 0.00010000 | Time: 8.75s\n",
      "[4784/6000] Iteration: 191330 | Loss: 0.0003 | PSNR: 35.2345 | lr: 0.00010000 | Time: 8.72s\n",
      "[4784/6000] Iteration: 191340 | Loss: 0.0002 | PSNR: 37.8426 | lr: 0.00010000 | Time: 8.74s\n",
      "[4784/6000] Iteration: 191350 | Loss: 0.0006 | PSNR: 32.3153 | lr: 0.00010000 | Time: 8.79s\n",
      "[4784/6000] Iteration: 191360 | Loss: 0.0004 | PSNR: 34.2242 | lr: 0.00010000 | Time: 8.76s\n",
      "[4785/6000] Iteration: 191370 | Loss: 0.0003 | PSNR: 35.0184 | lr: 0.00010000 | Time: 8.69s\n",
      "[4785/6000] Iteration: 191380 | Loss: 0.0005 | PSNR: 32.8254 | lr: 0.00010000 | Time: 8.72s\n",
      "[4785/6000] Iteration: 191390 | Loss: 0.0003 | PSNR: 34.9397 | lr: 0.00010000 | Time: 8.81s\n",
      "[4785/6000] Iteration: 191400 | Loss: 0.0002 | PSNR: 36.5072 | lr: 0.00010000 | Time: 8.76s\n",
      "0.png 28.06788444519043\n",
      "1.png 28.617277145385742\n",
      "2.png 31.218990325927734\n",
      "3.png 29.587688446044922\n",
      "4.png 34.781028747558594\n",
      "5.png 32.101593017578125\n",
      "6.png 27.632266998291016\n",
      "7.png 31.510730743408203\n",
      "8.png 23.83590316772461\n",
      "9.png 29.685163497924805\n",
      "10.png 30.65099334716797\n",
      "11.png 28.817981719970703\n",
      "12.png 30.76287269592285\n",
      "13.png 24.45557403564453\n",
      "14.png 25.49193572998047\n",
      "15.png 27.918376922607422\n",
      "16.png 33.16307067871094\n",
      "17.png 26.648942947387695\n",
      "18.png 30.53335189819336\n",
      "19.png 30.614334106445312\n",
      "20.png 27.242069244384766\n",
      "21.png 26.693326950073242\n",
      "22.png 23.940540313720703\n",
      "23.png 27.42294692993164\n",
      "24.png 25.687152862548828\n",
      "25.png 29.425739288330078\n",
      "26.png 33.9080696105957\n",
      "27.png 30.268280029296875\n",
      "28.png 28.20552635192871\n",
      "29.png 27.775423049926758\n",
      "30.png 31.883516311645508\n",
      "31.png 34.58222198486328\n",
      "32.png 31.652141571044922\n",
      "33.png 34.48321533203125\n",
      "34.png 31.6981201171875\n",
      "35.png 29.182985305786133\n",
      "36.png 32.661441802978516\n",
      "37.png 30.3499813079834\n",
      "38.png 28.302509307861328\n",
      "39.png 24.775009155273438\n",
      "Validation PSNR:  29.40590443611145\n",
      "[4786/6000] Iteration: 191410 | Loss: 0.0005 | PSNR: 33.0169 | lr: 0.00010000 | Time: 28.46s\n",
      "[4786/6000] Iteration: 191420 | Loss: 0.0002 | PSNR: 36.5455 | lr: 0.00010000 | Time: 8.72s\n",
      "[4786/6000] Iteration: 191430 | Loss: 0.0003 | PSNR: 34.8138 | lr: 0.00010000 | Time: 8.71s\n",
      "[4786/6000] Iteration: 191440 | Loss: 0.0004 | PSNR: 34.2554 | lr: 0.00010000 | Time: 9.01s\n",
      "[4787/6000] Iteration: 191450 | Loss: 0.0004 | PSNR: 33.6342 | lr: 0.00010000 | Time: 8.79s\n",
      "[4787/6000] Iteration: 191460 | Loss: 0.0003 | PSNR: 34.8940 | lr: 0.00010000 | Time: 8.76s\n",
      "[4787/6000] Iteration: 191470 | Loss: 0.0006 | PSNR: 32.1678 | lr: 0.00010000 | Time: 8.70s\n",
      "[4787/6000] Iteration: 191480 | Loss: 0.0007 | PSNR: 31.5819 | lr: 0.00010000 | Time: 8.74s\n",
      "[4788/6000] Iteration: 191490 | Loss: 0.0008 | PSNR: 30.9144 | lr: 0.00010000 | Time: 8.76s\n",
      "[4788/6000] Iteration: 191500 | Loss: 0.0006 | PSNR: 32.0896 | lr: 0.00010000 | Time: 8.72s\n",
      "[4788/6000] Iteration: 191510 | Loss: 0.0003 | PSNR: 35.0491 | lr: 0.00010000 | Time: 8.69s\n",
      "[4788/6000] Iteration: 191520 | Loss: 0.0006 | PSNR: 32.1063 | lr: 0.00010000 | Time: 8.72s\n",
      "[4789/6000] Iteration: 191530 | Loss: 0.0007 | PSNR: 31.6365 | lr: 0.00010000 | Time: 8.74s\n",
      "[4789/6000] Iteration: 191540 | Loss: 0.0004 | PSNR: 33.5012 | lr: 0.00010000 | Time: 8.74s\n",
      "[4789/6000] Iteration: 191550 | Loss: 0.0004 | PSNR: 33.7695 | lr: 0.00010000 | Time: 8.70s\n",
      "[4789/6000] Iteration: 191560 | Loss: 0.0005 | PSNR: 32.8869 | lr: 0.00010000 | Time: 8.70s\n",
      "[4790/6000] Iteration: 191570 | Loss: 0.0003 | PSNR: 34.8770 | lr: 0.00010000 | Time: 8.78s\n",
      "[4790/6000] Iteration: 191580 | Loss: 0.0005 | PSNR: 33.1367 | lr: 0.00010000 | Time: 8.67s\n",
      "[4790/6000] Iteration: 191590 | Loss: 0.0007 | PSNR: 31.5651 | lr: 0.00010000 | Time: 8.72s\n",
      "[4790/6000] Iteration: 191600 | Loss: 0.0004 | PSNR: 34.0546 | lr: 0.00010000 | Time: 8.71s\n",
      "[4791/6000] Iteration: 191610 | Loss: 0.0010 | PSNR: 29.9614 | lr: 0.00010000 | Time: 8.72s\n",
      "[4791/6000] Iteration: 191620 | Loss: 0.0005 | PSNR: 33.2649 | lr: 0.00010000 | Time: 8.75s\n",
      "[4791/6000] Iteration: 191630 | Loss: 0.0004 | PSNR: 33.8897 | lr: 0.00010000 | Time: 8.71s\n",
      "[4791/6000] Iteration: 191640 | Loss: 0.0016 | PSNR: 27.9140 | lr: 0.00010000 | Time: 8.79s\n",
      "[4792/6000] Iteration: 191650 | Loss: 0.0005 | PSNR: 33.3386 | lr: 0.00010000 | Time: 8.95s\n",
      "[4792/6000] Iteration: 191660 | Loss: 0.0005 | PSNR: 33.2336 | lr: 0.00010000 | Time: 8.75s\n",
      "[4792/6000] Iteration: 191670 | Loss: 0.0003 | PSNR: 34.8479 | lr: 0.00010000 | Time: 8.74s\n",
      "[4792/6000] Iteration: 191680 | Loss: 0.0005 | PSNR: 32.9563 | lr: 0.00010000 | Time: 8.74s\n",
      "[4793/6000] Iteration: 191690 | Loss: 0.0006 | PSNR: 32.0587 | lr: 0.00010000 | Time: 8.70s\n",
      "[4793/6000] Iteration: 191700 | Loss: 0.0003 | PSNR: 35.1798 | lr: 0.00010000 | Time: 8.82s\n",
      "[4793/6000] Iteration: 191710 | Loss: 0.0006 | PSNR: 32.2895 | lr: 0.00010000 | Time: 8.99s\n",
      "[4793/6000] Iteration: 191720 | Loss: 0.0004 | PSNR: 34.0411 | lr: 0.00010000 | Time: 9.08s\n",
      "[4794/6000] Iteration: 191730 | Loss: 0.0005 | PSNR: 32.9120 | lr: 0.00010000 | Time: 9.48s\n",
      "[4794/6000] Iteration: 191740 | Loss: 0.0005 | PSNR: 32.9001 | lr: 0.00010000 | Time: 9.07s\n",
      "[4794/6000] Iteration: 191750 | Loss: 0.0003 | PSNR: 35.3459 | lr: 0.00010000 | Time: 9.17s\n",
      "[4794/6000] Iteration: 191760 | Loss: 0.0003 | PSNR: 35.0462 | lr: 0.00010000 | Time: 9.15s\n",
      "[4795/6000] Iteration: 191770 | Loss: 0.0003 | PSNR: 35.8865 | lr: 0.00010000 | Time: 8.92s\n",
      "[4795/6000] Iteration: 191780 | Loss: 0.0003 | PSNR: 35.0624 | lr: 0.00010000 | Time: 8.82s\n",
      "[4795/6000] Iteration: 191790 | Loss: 0.0007 | PSNR: 31.4788 | lr: 0.00010000 | Time: 8.81s\n",
      "[4795/6000] Iteration: 191800 | Loss: 0.0004 | PSNR: 34.2145 | lr: 0.00010000 | Time: 8.84s\n",
      "[4796/6000] Iteration: 191810 | Loss: 0.0005 | PSNR: 33.0030 | lr: 0.00010000 | Time: 8.80s\n",
      "[4796/6000] Iteration: 191820 | Loss: 0.0003 | PSNR: 35.9579 | lr: 0.00010000 | Time: 8.85s\n",
      "[4796/6000] Iteration: 191830 | Loss: 0.0004 | PSNR: 33.9929 | lr: 0.00010000 | Time: 8.74s\n",
      "[4796/6000] Iteration: 191840 | Loss: 0.0005 | PSNR: 33.2695 | lr: 0.00010000 | Time: 8.96s\n",
      "[4797/6000] Iteration: 191850 | Loss: 0.0003 | PSNR: 35.1464 | lr: 0.00010000 | Time: 8.90s\n",
      "[4797/6000] Iteration: 191860 | Loss: 0.0003 | PSNR: 35.9340 | lr: 0.00010000 | Time: 8.98s\n",
      "[4797/6000] Iteration: 191870 | Loss: 0.0003 | PSNR: 35.5358 | lr: 0.00010000 | Time: 8.78s\n",
      "[4797/6000] Iteration: 191880 | Loss: 0.0005 | PSNR: 32.7165 | lr: 0.00010000 | Time: 8.74s\n",
      "[4798/6000] Iteration: 191890 | Loss: 0.0003 | PSNR: 35.0543 | lr: 0.00010000 | Time: 8.86s\n",
      "[4798/6000] Iteration: 191900 | Loss: 0.0005 | PSNR: 32.6785 | lr: 0.00010000 | Time: 8.94s\n",
      "[4798/6000] Iteration: 191910 | Loss: 0.0003 | PSNR: 35.1555 | lr: 0.00010000 | Time: 9.06s\n",
      "[4798/6000] Iteration: 191920 | Loss: 0.0004 | PSNR: 33.7782 | lr: 0.00010000 | Time: 8.71s\n",
      "[4799/6000] Iteration: 191930 | Loss: 0.0004 | PSNR: 33.5207 | lr: 0.00010000 | Time: 8.70s\n",
      "[4799/6000] Iteration: 191940 | Loss: 0.0002 | PSNR: 36.0740 | lr: 0.00010000 | Time: 8.73s\n",
      "[4799/6000] Iteration: 191950 | Loss: 0.0002 | PSNR: 36.8949 | lr: 0.00010000 | Time: 8.77s\n",
      "[4799/6000] Iteration: 191960 | Loss: 0.0002 | PSNR: 37.3644 | lr: 0.00010000 | Time: 8.71s\n",
      "[4800/6000] Iteration: 191970 | Loss: 0.0004 | PSNR: 34.1797 | lr: 0.00010000 | Time: 8.77s\n",
      "[4800/6000] Iteration: 191980 | Loss: 0.0003 | PSNR: 35.3601 | lr: 0.00010000 | Time: 9.12s\n",
      "[4800/6000] Iteration: 191990 | Loss: 0.0005 | PSNR: 32.7839 | lr: 0.00010000 | Time: 8.76s\n",
      "[4800/6000] Iteration: 192000 | Loss: 0.0001 | PSNR: 39.2874 | lr: 0.00010000 | Time: 8.76s\n",
      "0.png 27.704904556274414\n",
      "1.png 30.255992889404297\n",
      "2.png 29.92000961303711\n",
      "3.png 30.79472541809082\n",
      "4.png 31.88913345336914\n",
      "5.png 34.18303680419922\n",
      "6.png 27.110578536987305\n",
      "7.png 32.76481246948242\n",
      "8.png 23.617685317993164\n",
      "9.png 29.400737762451172\n",
      "10.png 31.07935333251953\n",
      "11.png 29.757457733154297\n",
      "12.png 28.983919143676758\n",
      "13.png 25.763395309448242\n",
      "14.png 23.124540328979492\n",
      "15.png 26.1374454498291\n",
      "16.png 32.99821472167969\n",
      "17.png 27.12741470336914\n",
      "18.png 31.154783248901367\n",
      "19.png 31.2845401763916\n",
      "20.png 28.249122619628906\n",
      "21.png 27.863800048828125\n",
      "22.png 24.30437469482422\n",
      "23.png 26.31640625\n",
      "24.png 28.056737899780273\n",
      "25.png 28.003814697265625\n",
      "26.png 34.442832946777344\n",
      "27.png 29.994661331176758\n",
      "28.png 23.97265625\n",
      "29.png 28.42818832397461\n",
      "30.png 31.614931106567383\n",
      "31.png 33.648460388183594\n",
      "32.png 29.95844078063965\n",
      "33.png 33.82172393798828\n",
      "34.png 32.95865249633789\n",
      "35.png 29.326066970825195\n",
      "36.png 32.69340515136719\n",
      "37.png 30.12497901916504\n",
      "38.png 29.455862045288086\n",
      "39.png 25.751237869262695\n",
      "Validation PSNR:  29.350975894927977\n",
      "[4801/6000] Iteration: 192010 | Loss: 0.0003 | PSNR: 35.4200 | lr: 0.00010000 | Time: 28.46s\n",
      "[4801/6000] Iteration: 192020 | Loss: 0.0005 | PSNR: 33.1307 | lr: 0.00010000 | Time: 8.72s\n",
      "[4801/6000] Iteration: 192030 | Loss: 0.0005 | PSNR: 32.6855 | lr: 0.00010000 | Time: 8.83s\n",
      "[4801/6000] Iteration: 192040 | Loss: 0.0003 | PSNR: 35.5206 | lr: 0.00010000 | Time: 8.73s\n",
      "[4802/6000] Iteration: 192050 | Loss: 0.0004 | PSNR: 34.2171 | lr: 0.00010000 | Time: 8.71s\n",
      "[4802/6000] Iteration: 192060 | Loss: 0.0002 | PSNR: 36.8462 | lr: 0.00010000 | Time: 8.76s\n",
      "[4802/6000] Iteration: 192070 | Loss: 0.0002 | PSNR: 37.3393 | lr: 0.00010000 | Time: 8.84s\n",
      "[4802/6000] Iteration: 192080 | Loss: 0.0004 | PSNR: 34.2710 | lr: 0.00010000 | Time: 8.93s\n",
      "[4803/6000] Iteration: 192090 | Loss: 0.0005 | PSNR: 33.1605 | lr: 0.00010000 | Time: 8.78s\n",
      "[4803/6000] Iteration: 192100 | Loss: 0.0003 | PSNR: 35.6033 | lr: 0.00010000 | Time: 8.79s\n",
      "[4803/6000] Iteration: 192110 | Loss: 0.0005 | PSNR: 33.1143 | lr: 0.00010000 | Time: 8.71s\n",
      "[4803/6000] Iteration: 192120 | Loss: 0.0003 | PSNR: 35.0935 | lr: 0.00010000 | Time: 8.77s\n",
      "[4804/6000] Iteration: 192130 | Loss: 0.0003 | PSNR: 35.4571 | lr: 0.00010000 | Time: 8.76s\n",
      "[4804/6000] Iteration: 192140 | Loss: 0.0004 | PSNR: 34.2533 | lr: 0.00010000 | Time: 8.81s\n",
      "[4804/6000] Iteration: 192150 | Loss: 0.0003 | PSNR: 35.1856 | lr: 0.00010000 | Time: 8.70s\n",
      "[4804/6000] Iteration: 192160 | Loss: 0.0006 | PSNR: 32.4446 | lr: 0.00010000 | Time: 8.70s\n",
      "[4805/6000] Iteration: 192170 | Loss: 0.0006 | PSNR: 31.8867 | lr: 0.00010000 | Time: 8.73s\n",
      "[4805/6000] Iteration: 192180 | Loss: 0.0004 | PSNR: 33.8663 | lr: 0.00010000 | Time: 8.74s\n",
      "[4805/6000] Iteration: 192190 | Loss: 0.0007 | PSNR: 31.4267 | lr: 0.00010000 | Time: 8.76s\n",
      "[4805/6000] Iteration: 192200 | Loss: 0.0007 | PSNR: 31.2605 | lr: 0.00010000 | Time: 8.79s\n",
      "[4806/6000] Iteration: 192210 | Loss: 0.0004 | PSNR: 33.9277 | lr: 0.00010000 | Time: 8.79s\n",
      "[4806/6000] Iteration: 192220 | Loss: 0.0006 | PSNR: 32.1473 | lr: 0.00010000 | Time: 8.78s\n",
      "[4806/6000] Iteration: 192230 | Loss: 0.0005 | PSNR: 32.6007 | lr: 0.00010000 | Time: 8.77s\n",
      "[4806/6000] Iteration: 192240 | Loss: 0.0003 | PSNR: 35.3369 | lr: 0.00010000 | Time: 8.75s\n",
      "[4807/6000] Iteration: 192250 | Loss: 0.0008 | PSNR: 30.7673 | lr: 0.00010000 | Time: 8.75s\n",
      "[4807/6000] Iteration: 192260 | Loss: 0.0005 | PSNR: 33.2921 | lr: 0.00010000 | Time: 8.77s\n",
      "[4807/6000] Iteration: 192270 | Loss: 0.0003 | PSNR: 35.6283 | lr: 0.00010000 | Time: 8.72s\n",
      "[4807/6000] Iteration: 192280 | Loss: 0.0004 | PSNR: 33.9548 | lr: 0.00010000 | Time: 8.73s\n",
      "[4808/6000] Iteration: 192290 | Loss: 0.0002 | PSNR: 36.2742 | lr: 0.00010000 | Time: 8.76s\n",
      "[4808/6000] Iteration: 192300 | Loss: 0.0007 | PSNR: 31.2554 | lr: 0.00010000 | Time: 8.70s\n",
      "[4808/6000] Iteration: 192310 | Loss: 0.0004 | PSNR: 33.4871 | lr: 0.00010000 | Time: 8.97s\n",
      "[4808/6000] Iteration: 192320 | Loss: 0.0009 | PSNR: 30.4500 | lr: 0.00010000 | Time: 8.76s\n",
      "[4809/6000] Iteration: 192330 | Loss: 0.0005 | PSNR: 33.1838 | lr: 0.00010000 | Time: 8.69s\n",
      "[4809/6000] Iteration: 192340 | Loss: 0.0002 | PSNR: 37.2801 | lr: 0.00010000 | Time: 8.72s\n",
      "[4809/6000] Iteration: 192350 | Loss: 0.0004 | PSNR: 34.3773 | lr: 0.00010000 | Time: 8.74s\n",
      "[4809/6000] Iteration: 192360 | Loss: 0.0004 | PSNR: 33.6006 | lr: 0.00010000 | Time: 8.75s\n",
      "[4810/6000] Iteration: 192370 | Loss: 0.0007 | PSNR: 31.8011 | lr: 0.00010000 | Time: 8.73s\n",
      "[4810/6000] Iteration: 192380 | Loss: 0.0007 | PSNR: 31.3596 | lr: 0.00010000 | Time: 8.76s\n",
      "[4810/6000] Iteration: 192390 | Loss: 0.0004 | PSNR: 33.4974 | lr: 0.00010000 | Time: 8.69s\n",
      "[4810/6000] Iteration: 192400 | Loss: 0.0003 | PSNR: 35.3786 | lr: 0.00010000 | Time: 8.68s\n",
      "[4811/6000] Iteration: 192410 | Loss: 0.0003 | PSNR: 35.5524 | lr: 0.00010000 | Time: 8.71s\n",
      "[4811/6000] Iteration: 192420 | Loss: 0.0003 | PSNR: 34.6176 | lr: 0.00010000 | Time: 8.72s\n",
      "[4811/6000] Iteration: 192430 | Loss: 0.0004 | PSNR: 33.6825 | lr: 0.00010000 | Time: 8.75s\n",
      "[4811/6000] Iteration: 192440 | Loss: 0.0006 | PSNR: 32.4620 | lr: 0.00010000 | Time: 8.72s\n",
      "[4812/6000] Iteration: 192450 | Loss: 0.0006 | PSNR: 32.4711 | lr: 0.00010000 | Time: 8.75s\n",
      "[4812/6000] Iteration: 192460 | Loss: 0.0002 | PSNR: 37.5582 | lr: 0.00010000 | Time: 8.77s\n",
      "[4812/6000] Iteration: 192470 | Loss: 0.0003 | PSNR: 35.2509 | lr: 0.00010000 | Time: 8.81s\n",
      "[4812/6000] Iteration: 192480 | Loss: 0.0006 | PSNR: 32.0537 | lr: 0.00010000 | Time: 8.77s\n",
      "[4813/6000] Iteration: 192490 | Loss: 0.0005 | PSNR: 33.2827 | lr: 0.00010000 | Time: 8.75s\n",
      "[4813/6000] Iteration: 192500 | Loss: 0.0004 | PSNR: 34.2335 | lr: 0.00010000 | Time: 8.81s\n",
      "[4813/6000] Iteration: 192510 | Loss: 0.0003 | PSNR: 34.7198 | lr: 0.00010000 | Time: 8.77s\n",
      "[4813/6000] Iteration: 192520 | Loss: 0.0007 | PSNR: 31.4639 | lr: 0.00010000 | Time: 8.75s\n",
      "[4814/6000] Iteration: 192530 | Loss: 0.0004 | PSNR: 34.4059 | lr: 0.00010000 | Time: 8.78s\n",
      "[4814/6000] Iteration: 192540 | Loss: 0.0002 | PSNR: 37.5592 | lr: 0.00010000 | Time: 8.73s\n",
      "[4814/6000] Iteration: 192550 | Loss: 0.0002 | PSNR: 36.6723 | lr: 0.00010000 | Time: 8.71s\n",
      "[4814/6000] Iteration: 192560 | Loss: 0.0005 | PSNR: 33.2778 | lr: 0.00010000 | Time: 8.76s\n",
      "[4815/6000] Iteration: 192570 | Loss: 0.0006 | PSNR: 32.5180 | lr: 0.00010000 | Time: 8.75s\n",
      "[4815/6000] Iteration: 192580 | Loss: 0.0003 | PSNR: 35.4824 | lr: 0.00010000 | Time: 8.75s\n",
      "[4815/6000] Iteration: 192590 | Loss: 0.0006 | PSNR: 32.3408 | lr: 0.00010000 | Time: 8.74s\n",
      "[4815/6000] Iteration: 192600 | Loss: 0.0008 | PSNR: 31.2085 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 28.62452507019043\n",
      "1.png 29.828166961669922\n",
      "2.png 32.04486083984375\n",
      "3.png 32.12244415283203\n",
      "4.png 31.105648040771484\n",
      "5.png 30.332168579101562\n",
      "6.png 26.79464340209961\n",
      "7.png 32.70814514160156\n",
      "8.png 25.686798095703125\n",
      "9.png 28.851825714111328\n",
      "10.png 28.485424041748047\n",
      "11.png 26.754915237426758\n",
      "12.png 29.879940032958984\n",
      "13.png 21.687713623046875\n",
      "14.png 26.761085510253906\n",
      "15.png 30.210479736328125\n",
      "16.png 31.101871490478516\n",
      "17.png 30.44801902770996\n",
      "18.png 29.35723114013672\n",
      "19.png 27.790258407592773\n",
      "20.png 23.964950561523438\n",
      "21.png 27.945470809936523\n",
      "22.png 25.5458984375\n",
      "23.png 29.65459632873535\n",
      "24.png 28.759403228759766\n",
      "25.png 27.881126403808594\n",
      "26.png 32.53768539428711\n",
      "27.png 29.86126708984375\n",
      "28.png 28.51409912109375\n",
      "29.png 26.028841018676758\n",
      "30.png 30.689115524291992\n",
      "31.png 31.812175750732422\n",
      "32.png 29.7454833984375\n",
      "33.png 33.02652359008789\n",
      "34.png 31.79107666015625\n",
      "35.png 30.10027313232422\n",
      "36.png 32.08876037597656\n",
      "37.png 30.613204956054688\n",
      "38.png 27.095420837402344\n",
      "39.png 27.19559669494629\n",
      "Validation PSNR:  29.135678339004517\n",
      "[4816/6000] Iteration: 192610 | Loss: 0.0006 | PSNR: 32.2886 | lr: 0.00010000 | Time: 28.38s\n",
      "[4816/6000] Iteration: 192620 | Loss: 0.0009 | PSNR: 30.5406 | lr: 0.00010000 | Time: 8.72s\n",
      "[4816/6000] Iteration: 192630 | Loss: 0.0004 | PSNR: 33.9115 | lr: 0.00010000 | Time: 8.72s\n",
      "[4816/6000] Iteration: 192640 | Loss: 0.0005 | PSNR: 32.9394 | lr: 0.00010000 | Time: 8.74s\n",
      "[4817/6000] Iteration: 192650 | Loss: 0.0008 | PSNR: 30.9206 | lr: 0.00010000 | Time: 8.73s\n",
      "[4817/6000] Iteration: 192660 | Loss: 0.0005 | PSNR: 33.0050 | lr: 0.00010000 | Time: 8.72s\n",
      "[4817/6000] Iteration: 192670 | Loss: 0.0008 | PSNR: 31.1581 | lr: 0.00010000 | Time: 8.74s\n",
      "[4817/6000] Iteration: 192680 | Loss: 0.0006 | PSNR: 32.0760 | lr: 0.00010000 | Time: 8.75s\n",
      "[4818/6000] Iteration: 192690 | Loss: 0.0005 | PSNR: 32.6112 | lr: 0.00010000 | Time: 8.67s\n",
      "[4818/6000] Iteration: 192700 | Loss: 0.0007 | PSNR: 31.3957 | lr: 0.00010000 | Time: 8.70s\n",
      "[4818/6000] Iteration: 192710 | Loss: 0.0005 | PSNR: 33.3992 | lr: 0.00010000 | Time: 8.73s\n",
      "[4818/6000] Iteration: 192720 | Loss: 0.0010 | PSNR: 30.1566 | lr: 0.00010000 | Time: 8.80s\n",
      "[4819/6000] Iteration: 192730 | Loss: 0.0004 | PSNR: 33.9753 | lr: 0.00010000 | Time: 8.71s\n",
      "[4819/6000] Iteration: 192740 | Loss: 0.0004 | PSNR: 33.8908 | lr: 0.00010000 | Time: 8.68s\n",
      "[4819/6000] Iteration: 192750 | Loss: 0.0003 | PSNR: 34.8135 | lr: 0.00010000 | Time: 8.70s\n",
      "[4819/6000] Iteration: 192760 | Loss: 0.0004 | PSNR: 33.7190 | lr: 0.00010000 | Time: 8.70s\n",
      "[4820/6000] Iteration: 192770 | Loss: 0.0005 | PSNR: 33.1720 | lr: 0.00010000 | Time: 8.75s\n",
      "[4820/6000] Iteration: 192780 | Loss: 0.0006 | PSNR: 32.1265 | lr: 0.00010000 | Time: 8.71s\n",
      "[4820/6000] Iteration: 192790 | Loss: 0.0005 | PSNR: 33.0102 | lr: 0.00010000 | Time: 8.72s\n",
      "[4820/6000] Iteration: 192800 | Loss: 0.0005 | PSNR: 33.0155 | lr: 0.00010000 | Time: 8.68s\n",
      "[4821/6000] Iteration: 192810 | Loss: 0.0007 | PSNR: 31.3638 | lr: 0.00010000 | Time: 8.67s\n",
      "[4821/6000] Iteration: 192820 | Loss: 0.0004 | PSNR: 33.9227 | lr: 0.00010000 | Time: 8.71s\n",
      "[4821/6000] Iteration: 192830 | Loss: 0.0004 | PSNR: 33.9975 | lr: 0.00010000 | Time: 8.70s\n",
      "[4821/6000] Iteration: 192840 | Loss: 0.0006 | PSNR: 32.1095 | lr: 0.00010000 | Time: 8.71s\n",
      "[4822/6000] Iteration: 192850 | Loss: 0.0005 | PSNR: 32.9240 | lr: 0.00010000 | Time: 8.71s\n",
      "[4822/6000] Iteration: 192860 | Loss: 0.0004 | PSNR: 33.9863 | lr: 0.00010000 | Time: 8.75s\n",
      "[4822/6000] Iteration: 192870 | Loss: 0.0007 | PSNR: 31.6773 | lr: 0.00010000 | Time: 8.71s\n",
      "[4822/6000] Iteration: 192880 | Loss: 0.0008 | PSNR: 31.2004 | lr: 0.00010000 | Time: 8.77s\n",
      "[4823/6000] Iteration: 192890 | Loss: 0.0004 | PSNR: 33.6593 | lr: 0.00010000 | Time: 8.76s\n",
      "[4823/6000] Iteration: 192900 | Loss: 0.0003 | PSNR: 34.6286 | lr: 0.00010000 | Time: 8.74s\n",
      "[4823/6000] Iteration: 192910 | Loss: 0.0003 | PSNR: 34.7911 | lr: 0.00010000 | Time: 8.73s\n",
      "[4823/6000] Iteration: 192920 | Loss: 0.0004 | PSNR: 33.7464 | lr: 0.00010000 | Time: 8.68s\n",
      "[4824/6000] Iteration: 192930 | Loss: 0.0006 | PSNR: 32.2178 | lr: 0.00010000 | Time: 8.80s\n",
      "[4824/6000] Iteration: 192940 | Loss: 0.0004 | PSNR: 33.4892 | lr: 0.00010000 | Time: 8.75s\n",
      "[4824/6000] Iteration: 192950 | Loss: 0.0005 | PSNR: 32.9549 | lr: 0.00010000 | Time: 8.67s\n",
      "[4824/6000] Iteration: 192960 | Loss: 0.0007 | PSNR: 31.8495 | lr: 0.00010000 | Time: 8.74s\n",
      "[4825/6000] Iteration: 192970 | Loss: 0.0003 | PSNR: 34.6627 | lr: 0.00010000 | Time: 8.74s\n",
      "[4825/6000] Iteration: 192980 | Loss: 0.0003 | PSNR: 35.4973 | lr: 0.00010000 | Time: 8.75s\n",
      "[4825/6000] Iteration: 192990 | Loss: 0.0004 | PSNR: 33.7696 | lr: 0.00010000 | Time: 8.69s\n",
      "[4825/6000] Iteration: 193000 | Loss: 0.0004 | PSNR: 33.5483 | lr: 0.00010000 | Time: 8.71s\n",
      "[4826/6000] Iteration: 193010 | Loss: 0.0004 | PSNR: 33.9856 | lr: 0.00010000 | Time: 9.11s\n",
      "[4826/6000] Iteration: 193020 | Loss: 0.0003 | PSNR: 35.2199 | lr: 0.00010000 | Time: 8.74s\n",
      "[4826/6000] Iteration: 193030 | Loss: 0.0004 | PSNR: 33.5848 | lr: 0.00010000 | Time: 8.75s\n",
      "[4826/6000] Iteration: 193040 | Loss: 0.0004 | PSNR: 34.4926 | lr: 0.00010000 | Time: 8.74s\n",
      "[4827/6000] Iteration: 193050 | Loss: 0.0006 | PSNR: 32.3652 | lr: 0.00010000 | Time: 8.74s\n",
      "[4827/6000] Iteration: 193060 | Loss: 0.0005 | PSNR: 32.9137 | lr: 0.00010000 | Time: 8.76s\n",
      "[4827/6000] Iteration: 193070 | Loss: 0.0002 | PSNR: 36.3269 | lr: 0.00010000 | Time: 8.72s\n",
      "[4827/6000] Iteration: 193080 | Loss: 0.0004 | PSNR: 34.3672 | lr: 0.00010000 | Time: 8.78s\n",
      "[4828/6000] Iteration: 193090 | Loss: 0.0003 | PSNR: 35.2475 | lr: 0.00010000 | Time: 8.77s\n",
      "[4828/6000] Iteration: 193100 | Loss: 0.0003 | PSNR: 36.0090 | lr: 0.00010000 | Time: 8.72s\n",
      "[4828/6000] Iteration: 193110 | Loss: 0.0004 | PSNR: 34.4044 | lr: 0.00010000 | Time: 8.76s\n",
      "[4828/6000] Iteration: 193120 | Loss: 0.0002 | PSNR: 36.1371 | lr: 0.00010000 | Time: 8.71s\n",
      "[4829/6000] Iteration: 193130 | Loss: 0.0003 | PSNR: 35.5296 | lr: 0.00010000 | Time: 8.71s\n",
      "[4829/6000] Iteration: 193140 | Loss: 0.0003 | PSNR: 35.8826 | lr: 0.00010000 | Time: 8.81s\n",
      "[4829/6000] Iteration: 193150 | Loss: 0.0004 | PSNR: 33.8038 | lr: 0.00010000 | Time: 8.76s\n",
      "[4829/6000] Iteration: 193160 | Loss: 0.0004 | PSNR: 34.5269 | lr: 0.00010000 | Time: 8.76s\n",
      "[4830/6000] Iteration: 193170 | Loss: 0.0003 | PSNR: 35.5165 | lr: 0.00010000 | Time: 8.71s\n",
      "[4830/6000] Iteration: 193180 | Loss: 0.0002 | PSNR: 36.9194 | lr: 0.00010000 | Time: 8.88s\n",
      "[4830/6000] Iteration: 193190 | Loss: 0.0004 | PSNR: 34.1805 | lr: 0.00010000 | Time: 8.75s\n",
      "[4830/6000] Iteration: 193200 | Loss: 0.0002 | PSNR: 36.6173 | lr: 0.00010000 | Time: 8.69s\n",
      "0.png 26.769214630126953\n",
      "1.png 30.027877807617188\n",
      "2.png 31.428470611572266\n",
      "3.png 31.436038970947266\n",
      "4.png 33.07059860229492\n",
      "5.png 31.946762084960938\n",
      "6.png 24.56144142150879\n",
      "7.png 30.11355209350586\n",
      "8.png 23.662235260009766\n",
      "9.png 29.56108856201172\n",
      "10.png 31.909626007080078\n",
      "11.png 28.65262794494629\n",
      "12.png 28.902240753173828\n",
      "13.png 24.9715518951416\n",
      "14.png 21.805557250976562\n",
      "15.png 25.03603744506836\n",
      "16.png 28.724586486816406\n",
      "17.png 26.147802352905273\n",
      "18.png 29.6367244720459\n",
      "19.png 30.294687271118164\n",
      "20.png 27.352602005004883\n",
      "21.png 27.399250030517578\n",
      "22.png 23.444299697875977\n",
      "23.png 28.771970748901367\n",
      "24.png 23.938724517822266\n",
      "25.png 27.827184677124023\n",
      "26.png 33.86819839477539\n",
      "27.png 28.9357852935791\n",
      "28.png 25.34834861755371\n",
      "29.png 28.59632110595703\n",
      "30.png 31.969633102416992\n",
      "31.png 33.10503387451172\n",
      "32.png 29.59505271911621\n",
      "33.png 33.73740768432617\n",
      "34.png 32.425296783447266\n",
      "35.png 29.894489288330078\n",
      "36.png 31.34734344482422\n",
      "37.png 28.287973403930664\n",
      "38.png 30.65475082397461\n",
      "39.png 26.746952056884766\n",
      "Validation PSNR:  28.797633504867555\n",
      "[4831/6000] Iteration: 193210 | Loss: 0.0002 | PSNR: 36.0589 | lr: 0.00010000 | Time: 28.38s\n",
      "[4831/6000] Iteration: 193220 | Loss: 0.0005 | PSNR: 33.4661 | lr: 0.00010000 | Time: 8.72s\n",
      "[4831/6000] Iteration: 193230 | Loss: 0.0003 | PSNR: 35.7889 | lr: 0.00010000 | Time: 8.80s\n",
      "[4831/6000] Iteration: 193240 | Loss: 0.0004 | PSNR: 33.8560 | lr: 0.00010000 | Time: 8.72s\n",
      "[4832/6000] Iteration: 193250 | Loss: 0.0002 | PSNR: 36.7771 | lr: 0.00010000 | Time: 8.74s\n",
      "[4832/6000] Iteration: 193260 | Loss: 0.0004 | PSNR: 33.7943 | lr: 0.00010000 | Time: 8.74s\n",
      "[4832/6000] Iteration: 193270 | Loss: 0.0005 | PSNR: 33.3289 | lr: 0.00010000 | Time: 8.75s\n",
      "[4832/6000] Iteration: 193280 | Loss: 0.0003 | PSNR: 35.3647 | lr: 0.00010000 | Time: 8.77s\n",
      "[4833/6000] Iteration: 193290 | Loss: 0.0005 | PSNR: 33.3625 | lr: 0.00010000 | Time: 8.69s\n",
      "[4833/6000] Iteration: 193300 | Loss: 0.0004 | PSNR: 33.5228 | lr: 0.00010000 | Time: 8.72s\n",
      "[4833/6000] Iteration: 193310 | Loss: 0.0004 | PSNR: 34.1798 | lr: 0.00010000 | Time: 8.72s\n",
      "[4833/6000] Iteration: 193320 | Loss: 0.0003 | PSNR: 35.3087 | lr: 0.00010000 | Time: 8.74s\n",
      "[4834/6000] Iteration: 193330 | Loss: 0.0003 | PSNR: 35.3103 | lr: 0.00010000 | Time: 8.75s\n",
      "[4834/6000] Iteration: 193340 | Loss: 0.0002 | PSNR: 37.3675 | lr: 0.00010000 | Time: 8.73s\n",
      "[4834/6000] Iteration: 193350 | Loss: 0.0002 | PSNR: 36.6037 | lr: 0.00010000 | Time: 8.85s\n",
      "[4834/6000] Iteration: 193360 | Loss: 0.0006 | PSNR: 32.5705 | lr: 0.00010000 | Time: 8.70s\n",
      "[4835/6000] Iteration: 193370 | Loss: 0.0005 | PSNR: 32.9973 | lr: 0.00010000 | Time: 8.72s\n",
      "[4835/6000] Iteration: 193380 | Loss: 0.0002 | PSNR: 36.8617 | lr: 0.00010000 | Time: 8.75s\n",
      "[4835/6000] Iteration: 193390 | Loss: 0.0005 | PSNR: 33.3903 | lr: 0.00010000 | Time: 8.70s\n",
      "[4835/6000] Iteration: 193400 | Loss: 0.0004 | PSNR: 33.7747 | lr: 0.00010000 | Time: 8.77s\n",
      "[4836/6000] Iteration: 193410 | Loss: 0.0003 | PSNR: 35.0599 | lr: 0.00010000 | Time: 8.69s\n",
      "[4836/6000] Iteration: 193420 | Loss: 0.0003 | PSNR: 35.9105 | lr: 0.00010000 | Time: 8.68s\n",
      "[4836/6000] Iteration: 193430 | Loss: 0.0002 | PSNR: 37.1264 | lr: 0.00010000 | Time: 8.69s\n",
      "[4836/6000] Iteration: 193440 | Loss: 0.0003 | PSNR: 35.7701 | lr: 0.00010000 | Time: 8.72s\n",
      "[4837/6000] Iteration: 193450 | Loss: 0.0007 | PSNR: 31.5095 | lr: 0.00010000 | Time: 8.76s\n",
      "[4837/6000] Iteration: 193460 | Loss: 0.0002 | PSNR: 36.1011 | lr: 0.00010000 | Time: 8.73s\n",
      "[4837/6000] Iteration: 193470 | Loss: 0.0003 | PSNR: 35.3328 | lr: 0.00010000 | Time: 8.65s\n",
      "[4837/6000] Iteration: 193480 | Loss: 0.0004 | PSNR: 34.1209 | lr: 0.00010000 | Time: 8.72s\n",
      "[4838/6000] Iteration: 193490 | Loss: 0.0005 | PSNR: 32.8196 | lr: 0.00010000 | Time: 8.77s\n",
      "[4838/6000] Iteration: 193500 | Loss: 0.0002 | PSNR: 36.2317 | lr: 0.00010000 | Time: 8.70s\n",
      "[4838/6000] Iteration: 193510 | Loss: 0.0005 | PSNR: 33.3079 | lr: 0.00010000 | Time: 8.74s\n",
      "[4838/6000] Iteration: 193520 | Loss: 0.0003 | PSNR: 36.0081 | lr: 0.00010000 | Time: 8.75s\n",
      "[4839/6000] Iteration: 193530 | Loss: 0.0003 | PSNR: 35.1158 | lr: 0.00010000 | Time: 8.80s\n",
      "[4839/6000] Iteration: 193540 | Loss: 0.0002 | PSNR: 36.4561 | lr: 0.00010000 | Time: 8.73s\n",
      "[4839/6000] Iteration: 193550 | Loss: 0.0003 | PSNR: 35.5942 | lr: 0.00010000 | Time: 8.75s\n",
      "[4839/6000] Iteration: 193560 | Loss: 0.0005 | PSNR: 33.1301 | lr: 0.00010000 | Time: 8.73s\n",
      "[4840/6000] Iteration: 193570 | Loss: 0.0002 | PSNR: 36.5243 | lr: 0.00010000 | Time: 8.73s\n",
      "[4840/6000] Iteration: 193580 | Loss: 0.0003 | PSNR: 35.7443 | lr: 0.00010000 | Time: 8.71s\n",
      "[4840/6000] Iteration: 193590 | Loss: 0.0004 | PSNR: 33.8433 | lr: 0.00010000 | Time: 8.73s\n",
      "[4840/6000] Iteration: 193600 | Loss: 0.0004 | PSNR: 34.1475 | lr: 0.00010000 | Time: 8.70s\n",
      "[4841/6000] Iteration: 193610 | Loss: 0.0003 | PSNR: 35.0691 | lr: 0.00010000 | Time: 8.75s\n",
      "[4841/6000] Iteration: 193620 | Loss: 0.0003 | PSNR: 35.8336 | lr: 0.00010000 | Time: 8.77s\n",
      "[4841/6000] Iteration: 193630 | Loss: 0.0002 | PSNR: 37.1533 | lr: 0.00010000 | Time: 8.72s\n",
      "[4841/6000] Iteration: 193640 | Loss: 0.0003 | PSNR: 35.4859 | lr: 0.00010000 | Time: 8.75s\n",
      "[4842/6000] Iteration: 193650 | Loss: 0.0002 | PSNR: 36.1174 | lr: 0.00010000 | Time: 8.77s\n",
      "[4842/6000] Iteration: 193660 | Loss: 0.0005 | PSNR: 33.0996 | lr: 0.00010000 | Time: 8.69s\n",
      "[4842/6000] Iteration: 193670 | Loss: 0.0008 | PSNR: 30.9789 | lr: 0.00010000 | Time: 8.70s\n",
      "[4842/6000] Iteration: 193680 | Loss: 0.0007 | PSNR: 31.7311 | lr: 0.00010000 | Time: 8.75s\n",
      "[4843/6000] Iteration: 193690 | Loss: 0.0004 | PSNR: 34.0432 | lr: 0.00010000 | Time: 8.76s\n",
      "[4843/6000] Iteration: 193700 | Loss: 0.0005 | PSNR: 33.1696 | lr: 0.00010000 | Time: 8.70s\n",
      "[4843/6000] Iteration: 193710 | Loss: 0.0004 | PSNR: 34.1499 | lr: 0.00010000 | Time: 8.75s\n",
      "[4843/6000] Iteration: 193720 | Loss: 0.0004 | PSNR: 33.7586 | lr: 0.00010000 | Time: 8.76s\n",
      "[4844/6000] Iteration: 193730 | Loss: 0.0009 | PSNR: 30.3405 | lr: 0.00010000 | Time: 8.73s\n",
      "[4844/6000] Iteration: 193740 | Loss: 0.0005 | PSNR: 33.1302 | lr: 0.00010000 | Time: 8.75s\n",
      "[4844/6000] Iteration: 193750 | Loss: 0.0003 | PSNR: 35.6633 | lr: 0.00010000 | Time: 8.74s\n",
      "[4844/6000] Iteration: 193760 | Loss: 0.0006 | PSNR: 32.4146 | lr: 0.00010000 | Time: 8.72s\n",
      "[4845/6000] Iteration: 193770 | Loss: 0.0003 | PSNR: 35.4948 | lr: 0.00010000 | Time: 8.70s\n",
      "[4845/6000] Iteration: 193780 | Loss: 0.0004 | PSNR: 33.5856 | lr: 0.00010000 | Time: 8.73s\n",
      "[4845/6000] Iteration: 193790 | Loss: 0.0004 | PSNR: 34.5367 | lr: 0.00010000 | Time: 8.71s\n",
      "[4845/6000] Iteration: 193800 | Loss: 0.0002 | PSNR: 37.0121 | lr: 0.00010000 | Time: 8.72s\n",
      "0.png 28.189136505126953\n",
      "1.png 29.426000595092773\n",
      "2.png 29.90104866027832\n",
      "3.png 30.26336669921875\n",
      "4.png 30.7028865814209\n",
      "5.png 32.7390251159668\n",
      "6.png 25.63219451904297\n",
      "7.png 33.80391311645508\n",
      "8.png 22.828828811645508\n",
      "9.png 29.184988021850586\n",
      "10.png 30.55381965637207\n",
      "11.png 27.863008499145508\n",
      "12.png 28.847341537475586\n",
      "13.png 24.600923538208008\n",
      "14.png 23.031530380249023\n",
      "15.png 28.003189086914062\n",
      "16.png 31.020496368408203\n",
      "17.png 26.796680450439453\n",
      "18.png 29.625205993652344\n",
      "19.png 29.829639434814453\n",
      "20.png 27.676040649414062\n",
      "21.png 24.717329025268555\n",
      "22.png 22.283239364624023\n",
      "23.png 26.89678382873535\n",
      "24.png 25.834903717041016\n",
      "25.png 25.90898895263672\n",
      "26.png 30.54508399963379\n",
      "27.png 28.89324378967285\n",
      "28.png 27.892528533935547\n",
      "29.png 25.911609649658203\n",
      "30.png 29.848922729492188\n",
      "31.png 31.403221130371094\n",
      "32.png 29.751182556152344\n",
      "33.png 34.276851654052734\n",
      "34.png 32.94711685180664\n",
      "35.png 29.22165870666504\n",
      "36.png 30.99706268310547\n",
      "37.png 28.94748878479004\n",
      "38.png 28.220203399658203\n",
      "39.png 29.49117660522461\n",
      "Validation PSNR:  28.612696504592897\n",
      "[4846/6000] Iteration: 193810 | Loss: 0.0004 | PSNR: 33.6650 | lr: 0.00010000 | Time: 28.43s\n",
      "[4846/6000] Iteration: 193820 | Loss: 0.0006 | PSNR: 32.5480 | lr: 0.00010000 | Time: 8.70s\n",
      "[4846/6000] Iteration: 193830 | Loss: 0.0008 | PSNR: 31.2365 | lr: 0.00010000 | Time: 8.73s\n",
      "[4846/6000] Iteration: 193840 | Loss: 0.0006 | PSNR: 32.4807 | lr: 0.00010000 | Time: 8.71s\n",
      "[4847/6000] Iteration: 193850 | Loss: 0.0004 | PSNR: 33.5127 | lr: 0.00010000 | Time: 8.76s\n",
      "[4847/6000] Iteration: 193860 | Loss: 0.0004 | PSNR: 34.5241 | lr: 0.00010000 | Time: 8.74s\n",
      "[4847/6000] Iteration: 193870 | Loss: 0.0005 | PSNR: 33.2124 | lr: 0.00010000 | Time: 8.77s\n",
      "[4847/6000] Iteration: 193880 | Loss: 0.0005 | PSNR: 32.7011 | lr: 0.00010000 | Time: 8.77s\n",
      "[4848/6000] Iteration: 193890 | Loss: 0.0004 | PSNR: 33.9076 | lr: 0.00010000 | Time: 8.76s\n",
      "[4848/6000] Iteration: 193900 | Loss: 0.0003 | PSNR: 35.5218 | lr: 0.00010000 | Time: 8.68s\n",
      "[4848/6000] Iteration: 193910 | Loss: 0.0005 | PSNR: 32.8531 | lr: 0.00010000 | Time: 8.71s\n",
      "[4848/6000] Iteration: 193920 | Loss: 0.0004 | PSNR: 34.4052 | lr: 0.00010000 | Time: 8.75s\n",
      "[4849/6000] Iteration: 193930 | Loss: 0.0002 | PSNR: 36.5792 | lr: 0.00010000 | Time: 8.73s\n",
      "[4849/6000] Iteration: 193940 | Loss: 0.0006 | PSNR: 31.9092 | lr: 0.00010000 | Time: 8.72s\n",
      "[4849/6000] Iteration: 193950 | Loss: 0.0004 | PSNR: 34.5215 | lr: 0.00010000 | Time: 8.73s\n",
      "[4849/6000] Iteration: 193960 | Loss: 0.0004 | PSNR: 34.2333 | lr: 0.00010000 | Time: 8.78s\n",
      "[4850/6000] Iteration: 193970 | Loss: 0.0002 | PSNR: 36.7017 | lr: 0.00010000 | Time: 8.71s\n",
      "[4850/6000] Iteration: 193980 | Loss: 0.0003 | PSNR: 34.9403 | lr: 0.00010000 | Time: 8.77s\n",
      "[4850/6000] Iteration: 193990 | Loss: 0.0003 | PSNR: 34.9426 | lr: 0.00010000 | Time: 8.81s\n",
      "[4850/6000] Iteration: 194000 | Loss: 0.0002 | PSNR: 36.9820 | lr: 0.00010000 | Time: 8.95s\n",
      "[4851/6000] Iteration: 194010 | Loss: 0.0005 | PSNR: 33.2421 | lr: 0.00010000 | Time: 8.76s\n",
      "[4851/6000] Iteration: 194020 | Loss: 0.0003 | PSNR: 35.9102 | lr: 0.00010000 | Time: 8.71s\n",
      "[4851/6000] Iteration: 194030 | Loss: 0.0002 | PSNR: 38.1206 | lr: 0.00010000 | Time: 8.70s\n",
      "[4851/6000] Iteration: 194040 | Loss: 0.0003 | PSNR: 34.6942 | lr: 0.00010000 | Time: 8.71s\n",
      "[4852/6000] Iteration: 194050 | Loss: 0.0003 | PSNR: 35.9853 | lr: 0.00010000 | Time: 8.76s\n",
      "[4852/6000] Iteration: 194060 | Loss: 0.0004 | PSNR: 33.5141 | lr: 0.00010000 | Time: 8.75s\n",
      "[4852/6000] Iteration: 194070 | Loss: 0.0004 | PSNR: 33.9966 | lr: 0.00010000 | Time: 8.74s\n",
      "[4852/6000] Iteration: 194080 | Loss: 0.0004 | PSNR: 34.1328 | lr: 0.00010000 | Time: 8.71s\n",
      "[4853/6000] Iteration: 194090 | Loss: 0.0002 | PSNR: 36.4872 | lr: 0.00010000 | Time: 8.79s\n",
      "[4853/6000] Iteration: 194100 | Loss: 0.0004 | PSNR: 33.5631 | lr: 0.00010000 | Time: 8.71s\n",
      "[4853/6000] Iteration: 194110 | Loss: 0.0004 | PSNR: 34.2678 | lr: 0.00010000 | Time: 8.71s\n",
      "[4853/6000] Iteration: 194120 | Loss: 0.0003 | PSNR: 34.9599 | lr: 0.00010000 | Time: 8.75s\n",
      "[4854/6000] Iteration: 194130 | Loss: 0.0004 | PSNR: 33.6160 | lr: 0.00010000 | Time: 8.79s\n",
      "[4854/6000] Iteration: 194140 | Loss: 0.0005 | PSNR: 33.2305 | lr: 0.00010000 | Time: 8.72s\n",
      "[4854/6000] Iteration: 194150 | Loss: 0.0003 | PSNR: 34.9162 | lr: 0.00010000 | Time: 8.75s\n",
      "[4854/6000] Iteration: 194160 | Loss: 0.0004 | PSNR: 33.6014 | lr: 0.00010000 | Time: 8.72s\n",
      "[4855/6000] Iteration: 194170 | Loss: 0.0002 | PSNR: 36.0748 | lr: 0.00010000 | Time: 8.71s\n",
      "[4855/6000] Iteration: 194180 | Loss: 0.0003 | PSNR: 34.5847 | lr: 0.00010000 | Time: 8.70s\n",
      "[4855/6000] Iteration: 194190 | Loss: 0.0004 | PSNR: 34.5332 | lr: 0.00010000 | Time: 8.74s\n",
      "[4855/6000] Iteration: 194200 | Loss: 0.0003 | PSNR: 35.1412 | lr: 0.00010000 | Time: 8.75s\n",
      "[4856/6000] Iteration: 194210 | Loss: 0.0002 | PSNR: 36.2499 | lr: 0.00010000 | Time: 8.72s\n",
      "[4856/6000] Iteration: 194220 | Loss: 0.0005 | PSNR: 33.3266 | lr: 0.00010000 | Time: 8.71s\n",
      "[4856/6000] Iteration: 194230 | Loss: 0.0005 | PSNR: 32.9982 | lr: 0.00010000 | Time: 8.68s\n",
      "[4856/6000] Iteration: 194240 | Loss: 0.0003 | PSNR: 35.4883 | lr: 0.00010000 | Time: 8.75s\n",
      "[4857/6000] Iteration: 194250 | Loss: 0.0005 | PSNR: 33.2071 | lr: 0.00010000 | Time: 8.77s\n",
      "[4857/6000] Iteration: 194260 | Loss: 0.0003 | PSNR: 35.3798 | lr: 0.00010000 | Time: 8.70s\n",
      "[4857/6000] Iteration: 194270 | Loss: 0.0002 | PSNR: 37.1265 | lr: 0.00010000 | Time: 8.75s\n",
      "[4857/6000] Iteration: 194280 | Loss: 0.0003 | PSNR: 34.7491 | lr: 0.00010000 | Time: 8.71s\n",
      "[4858/6000] Iteration: 194290 | Loss: 0.0003 | PSNR: 35.1127 | lr: 0.00010000 | Time: 8.76s\n",
      "[4858/6000] Iteration: 194300 | Loss: 0.0003 | PSNR: 34.5929 | lr: 0.00010000 | Time: 8.79s\n",
      "[4858/6000] Iteration: 194310 | Loss: 0.0002 | PSNR: 36.0294 | lr: 0.00010000 | Time: 8.74s\n",
      "[4858/6000] Iteration: 194320 | Loss: 0.0004 | PSNR: 34.1282 | lr: 0.00010000 | Time: 8.75s\n",
      "[4859/6000] Iteration: 194330 | Loss: 0.0003 | PSNR: 35.3704 | lr: 0.00010000 | Time: 8.73s\n",
      "[4859/6000] Iteration: 194340 | Loss: 0.0004 | PSNR: 34.1236 | lr: 0.00010000 | Time: 8.73s\n",
      "[4859/6000] Iteration: 194350 | Loss: 0.0006 | PSNR: 32.2012 | lr: 0.00010000 | Time: 8.77s\n",
      "[4859/6000] Iteration: 194360 | Loss: 0.0008 | PSNR: 30.7737 | lr: 0.00010000 | Time: 8.72s\n",
      "[4860/6000] Iteration: 194370 | Loss: 0.0005 | PSNR: 33.1050 | lr: 0.00010000 | Time: 8.72s\n",
      "[4860/6000] Iteration: 194380 | Loss: 0.0004 | PSNR: 34.1483 | lr: 0.00010000 | Time: 8.71s\n",
      "[4860/6000] Iteration: 194390 | Loss: 0.0003 | PSNR: 35.2230 | lr: 0.00010000 | Time: 8.73s\n",
      "[4860/6000] Iteration: 194400 | Loss: 0.0005 | PSNR: 33.3212 | lr: 0.00010000 | Time: 8.72s\n",
      "0.png 28.199750900268555\n",
      "1.png 29.56890296936035\n",
      "2.png 31.29253578186035\n",
      "3.png 30.411834716796875\n",
      "4.png 31.72588348388672\n",
      "5.png 33.48012924194336\n",
      "6.png 26.35174560546875\n",
      "7.png 31.777088165283203\n",
      "8.png 23.755741119384766\n",
      "9.png 29.063196182250977\n",
      "10.png 30.928646087646484\n",
      "11.png 27.190731048583984\n",
      "12.png 31.697650909423828\n",
      "13.png 24.090953826904297\n",
      "14.png 24.7792911529541\n",
      "15.png 29.329219818115234\n",
      "16.png 31.275537490844727\n",
      "17.png 29.549789428710938\n",
      "18.png 30.82908821105957\n",
      "19.png 28.856815338134766\n",
      "20.png 26.384418487548828\n",
      "21.png 26.26944351196289\n",
      "22.png 22.37939453125\n",
      "23.png 26.09710693359375\n",
      "24.png 26.470623016357422\n",
      "25.png 27.650869369506836\n",
      "26.png 31.49890899658203\n",
      "27.png 27.849218368530273\n",
      "28.png 25.336570739746094\n",
      "29.png 29.776813507080078\n",
      "30.png 28.82989501953125\n",
      "31.png 32.373497009277344\n",
      "32.png 26.496070861816406\n",
      "33.png 33.85418701171875\n",
      "34.png 31.729209899902344\n",
      "35.png 29.334476470947266\n",
      "36.png 29.488191604614258\n",
      "37.png 26.672454833984375\n",
      "38.png 30.756725311279297\n",
      "39.png 25.01201820373535\n",
      "Validation PSNR:  28.71036562919617\n",
      "[4861/6000] Iteration: 194410 | Loss: 0.0004 | PSNR: 33.7835 | lr: 0.00010000 | Time: 28.36s\n",
      "[4861/6000] Iteration: 194420 | Loss: 0.0014 | PSNR: 28.6844 | lr: 0.00010000 | Time: 8.71s\n",
      "[4861/6000] Iteration: 194430 | Loss: 0.0006 | PSNR: 32.4749 | lr: 0.00010000 | Time: 8.75s\n",
      "[4861/6000] Iteration: 194440 | Loss: 0.0005 | PSNR: 32.6851 | lr: 0.00010000 | Time: 8.74s\n",
      "[4862/6000] Iteration: 194450 | Loss: 0.0007 | PSNR: 31.8000 | lr: 0.00010000 | Time: 8.73s\n",
      "[4862/6000] Iteration: 194460 | Loss: 0.0007 | PSNR: 31.3690 | lr: 0.00010000 | Time: 8.75s\n",
      "[4862/6000] Iteration: 194470 | Loss: 0.0004 | PSNR: 33.5034 | lr: 0.00010000 | Time: 8.74s\n",
      "[4862/6000] Iteration: 194480 | Loss: 0.0003 | PSNR: 34.8220 | lr: 0.00010000 | Time: 8.72s\n",
      "[4863/6000] Iteration: 194490 | Loss: 0.0009 | PSNR: 30.2985 | lr: 0.00010000 | Time: 8.68s\n",
      "[4863/6000] Iteration: 194500 | Loss: 0.0003 | PSNR: 34.5980 | lr: 0.00010000 | Time: 8.74s\n",
      "[4863/6000] Iteration: 194510 | Loss: 0.0003 | PSNR: 34.6150 | lr: 0.00010000 | Time: 8.69s\n",
      "[4863/6000] Iteration: 194520 | Loss: 0.0004 | PSNR: 33.7270 | lr: 0.00010000 | Time: 8.73s\n",
      "[4864/6000] Iteration: 194530 | Loss: 0.0004 | PSNR: 34.5063 | lr: 0.00010000 | Time: 8.75s\n",
      "[4864/6000] Iteration: 194540 | Loss: 0.0005 | PSNR: 32.8882 | lr: 0.00010000 | Time: 8.74s\n",
      "[4864/6000] Iteration: 194550 | Loss: 0.0007 | PSNR: 31.7039 | lr: 0.00010000 | Time: 8.74s\n",
      "[4864/6000] Iteration: 194560 | Loss: 0.0004 | PSNR: 33.8023 | lr: 0.00010000 | Time: 8.70s\n",
      "[4865/6000] Iteration: 194570 | Loss: 0.0004 | PSNR: 34.1553 | lr: 0.00010000 | Time: 8.72s\n",
      "[4865/6000] Iteration: 194580 | Loss: 0.0004 | PSNR: 34.2230 | lr: 0.00010000 | Time: 8.72s\n",
      "[4865/6000] Iteration: 194590 | Loss: 0.0004 | PSNR: 34.2505 | lr: 0.00010000 | Time: 8.71s\n",
      "[4865/6000] Iteration: 194600 | Loss: 0.0004 | PSNR: 33.6845 | lr: 0.00010000 | Time: 8.76s\n",
      "[4866/6000] Iteration: 194610 | Loss: 0.0002 | PSNR: 36.6598 | lr: 0.00010000 | Time: 8.72s\n",
      "[4866/6000] Iteration: 194620 | Loss: 0.0007 | PSNR: 31.3496 | lr: 0.00010000 | Time: 8.70s\n",
      "[4866/6000] Iteration: 194630 | Loss: 0.0004 | PSNR: 33.6247 | lr: 0.00010000 | Time: 8.70s\n",
      "[4866/6000] Iteration: 194640 | Loss: 0.0011 | PSNR: 29.5582 | lr: 0.00010000 | Time: 8.70s\n",
      "[4867/6000] Iteration: 194650 | Loss: 0.0004 | PSNR: 33.8768 | lr: 0.00010000 | Time: 8.71s\n",
      "[4867/6000] Iteration: 194660 | Loss: 0.0004 | PSNR: 33.4851 | lr: 0.00010000 | Time: 8.73s\n",
      "[4867/6000] Iteration: 194670 | Loss: 0.0006 | PSNR: 32.1294 | lr: 0.00010000 | Time: 8.68s\n",
      "[4867/6000] Iteration: 194680 | Loss: 0.0005 | PSNR: 32.7866 | lr: 0.00010000 | Time: 8.77s\n",
      "[4868/6000] Iteration: 194690 | Loss: 0.0005 | PSNR: 32.9788 | lr: 0.00010000 | Time: 8.68s\n",
      "[4868/6000] Iteration: 194700 | Loss: 0.0004 | PSNR: 34.0559 | lr: 0.00010000 | Time: 8.70s\n",
      "[4868/6000] Iteration: 194710 | Loss: 0.0005 | PSNR: 32.9921 | lr: 0.00010000 | Time: 8.74s\n",
      "[4868/6000] Iteration: 194720 | Loss: 0.0006 | PSNR: 32.2688 | lr: 0.00010000 | Time: 8.74s\n",
      "[4869/6000] Iteration: 194730 | Loss: 0.0004 | PSNR: 33.6912 | lr: 0.00010000 | Time: 8.73s\n",
      "[4869/6000] Iteration: 194740 | Loss: 0.0004 | PSNR: 33.6611 | lr: 0.00010000 | Time: 8.71s\n",
      "[4869/6000] Iteration: 194750 | Loss: 0.0004 | PSNR: 33.7994 | lr: 0.00010000 | Time: 8.74s\n",
      "[4869/6000] Iteration: 194760 | Loss: 0.0002 | PSNR: 37.5923 | lr: 0.00010000 | Time: 8.72s\n",
      "[4870/6000] Iteration: 194770 | Loss: 0.0006 | PSNR: 31.9736 | lr: 0.00010000 | Time: 8.70s\n",
      "[4870/6000] Iteration: 194780 | Loss: 0.0004 | PSNR: 34.5047 | lr: 0.00010000 | Time: 8.73s\n",
      "[4870/6000] Iteration: 194790 | Loss: 0.0006 | PSNR: 32.4522 | lr: 0.00010000 | Time: 8.70s\n",
      "[4870/6000] Iteration: 194800 | Loss: 0.0004 | PSNR: 34.4838 | lr: 0.00010000 | Time: 8.76s\n",
      "[4871/6000] Iteration: 194810 | Loss: 0.0006 | PSNR: 31.9541 | lr: 0.00010000 | Time: 8.71s\n",
      "[4871/6000] Iteration: 194820 | Loss: 0.0006 | PSNR: 32.2098 | lr: 0.00010000 | Time: 8.71s\n",
      "[4871/6000] Iteration: 194830 | Loss: 0.0003 | PSNR: 35.8307 | lr: 0.00010000 | Time: 8.73s\n",
      "[4871/6000] Iteration: 194840 | Loss: 0.0003 | PSNR: 35.1819 | lr: 0.00010000 | Time: 8.70s\n",
      "[4872/6000] Iteration: 194850 | Loss: 0.0003 | PSNR: 35.9350 | lr: 0.00010000 | Time: 8.74s\n",
      "[4872/6000] Iteration: 194860 | Loss: 0.0003 | PSNR: 35.3665 | lr: 0.00010000 | Time: 8.71s\n",
      "[4872/6000] Iteration: 194870 | Loss: 0.0003 | PSNR: 34.8651 | lr: 0.00010000 | Time: 8.73s\n",
      "[4872/6000] Iteration: 194880 | Loss: 0.0003 | PSNR: 35.6557 | lr: 0.00010000 | Time: 8.72s\n",
      "[4873/6000] Iteration: 194890 | Loss: 0.0004 | PSNR: 34.0061 | lr: 0.00010000 | Time: 8.74s\n",
      "[4873/6000] Iteration: 194900 | Loss: 0.0006 | PSNR: 32.2440 | lr: 0.00010000 | Time: 8.71s\n",
      "[4873/6000] Iteration: 194910 | Loss: 0.0002 | PSNR: 36.3044 | lr: 0.00010000 | Time: 8.70s\n",
      "[4873/6000] Iteration: 194920 | Loss: 0.0004 | PSNR: 33.8841 | lr: 0.00010000 | Time: 8.79s\n",
      "[4874/6000] Iteration: 194930 | Loss: 0.0002 | PSNR: 36.1849 | lr: 0.00010000 | Time: 8.70s\n",
      "[4874/6000] Iteration: 194940 | Loss: 0.0008 | PSNR: 30.9872 | lr: 0.00010000 | Time: 8.73s\n",
      "[4874/6000] Iteration: 194950 | Loss: 0.0006 | PSNR: 32.3177 | lr: 0.00010000 | Time: 8.70s\n",
      "[4874/6000] Iteration: 194960 | Loss: 0.0004 | PSNR: 33.9517 | lr: 0.00010000 | Time: 8.75s\n",
      "[4875/6000] Iteration: 194970 | Loss: 0.0005 | PSNR: 33.0167 | lr: 0.00010000 | Time: 8.71s\n",
      "[4875/6000] Iteration: 194980 | Loss: 0.0004 | PSNR: 34.5208 | lr: 0.00010000 | Time: 8.71s\n",
      "[4875/6000] Iteration: 194990 | Loss: 0.0003 | PSNR: 35.7089 | lr: 0.00010000 | Time: 8.73s\n",
      "[4875/6000] Iteration: 195000 | Loss: 0.0005 | PSNR: 33.0511 | lr: 0.00010000 | Time: 8.71s\n",
      "0.png 27.209054946899414\n",
      "1.png 29.326141357421875\n",
      "2.png 31.82730484008789\n",
      "3.png 30.189468383789062\n",
      "4.png 33.64974594116211\n",
      "5.png 34.22500228881836\n",
      "6.png 27.0578670501709\n",
      "7.png 31.012184143066406\n",
      "8.png 22.8988094329834\n",
      "9.png 29.188854217529297\n",
      "10.png 31.789730072021484\n",
      "11.png 30.687284469604492\n",
      "12.png 29.646678924560547\n",
      "13.png 25.25799560546875\n",
      "14.png 23.447311401367188\n",
      "15.png 26.011064529418945\n",
      "16.png 33.33115005493164\n",
      "17.png 26.63475799560547\n",
      "18.png 30.34603500366211\n",
      "19.png 30.497940063476562\n",
      "20.png 28.45965576171875\n",
      "21.png 25.627859115600586\n",
      "22.png 23.962068557739258\n",
      "23.png 28.986000061035156\n",
      "24.png 27.537574768066406\n",
      "25.png 27.370468139648438\n",
      "26.png 36.11858367919922\n",
      "27.png 30.03127670288086\n",
      "28.png 25.771730422973633\n",
      "29.png 26.279556274414062\n",
      "30.png 32.13698959350586\n",
      "31.png 34.070316314697266\n",
      "32.png 28.859500885009766\n",
      "33.png 33.8438835144043\n",
      "34.png 31.578977584838867\n",
      "35.png 30.68600845336914\n",
      "36.png 34.382301330566406\n",
      "37.png 32.50186538696289\n",
      "38.png 29.38288116455078\n",
      "39.png 27.75813865661621\n",
      "Validation PSNR:  29.489500427246092\n",
      "[4876/6000] Iteration: 195010 | Loss: 0.0003 | PSNR: 35.3095 | lr: 0.00010000 | Time: 28.32s\n",
      "[4876/6000] Iteration: 195020 | Loss: 0.0003 | PSNR: 35.6022 | lr: 0.00010000 | Time: 8.67s\n",
      "[4876/6000] Iteration: 195030 | Loss: 0.0004 | PSNR: 33.9824 | lr: 0.00010000 | Time: 8.71s\n",
      "[4876/6000] Iteration: 195040 | Loss: 0.0003 | PSNR: 35.1545 | lr: 0.00010000 | Time: 8.76s\n",
      "[4877/6000] Iteration: 195050 | Loss: 0.0005 | PSNR: 33.4618 | lr: 0.00010000 | Time: 8.71s\n",
      "[4877/6000] Iteration: 195060 | Loss: 0.0003 | PSNR: 35.4457 | lr: 0.00010000 | Time: 8.67s\n",
      "[4877/6000] Iteration: 195070 | Loss: 0.0005 | PSNR: 33.2626 | lr: 0.00010000 | Time: 8.70s\n",
      "[4877/6000] Iteration: 195080 | Loss: 0.0003 | PSNR: 35.5452 | lr: 0.00010000 | Time: 8.71s\n",
      "[4878/6000] Iteration: 195090 | Loss: 0.0004 | PSNR: 34.2437 | lr: 0.00010000 | Time: 8.65s\n",
      "[4878/6000] Iteration: 195100 | Loss: 0.0005 | PSNR: 33.3352 | lr: 0.00010000 | Time: 8.71s\n",
      "[4878/6000] Iteration: 195110 | Loss: 0.0003 | PSNR: 35.0121 | lr: 0.00010000 | Time: 8.69s\n",
      "[4878/6000] Iteration: 195120 | Loss: 0.0003 | PSNR: 35.0532 | lr: 0.00010000 | Time: 8.68s\n",
      "[4879/6000] Iteration: 195130 | Loss: 0.0007 | PSNR: 31.7360 | lr: 0.00010000 | Time: 8.68s\n",
      "[4879/6000] Iteration: 195140 | Loss: 0.0004 | PSNR: 34.0595 | lr: 0.00010000 | Time: 8.66s\n",
      "[4879/6000] Iteration: 195150 | Loss: 0.0003 | PSNR: 35.9771 | lr: 0.00010000 | Time: 8.70s\n",
      "[4879/6000] Iteration: 195160 | Loss: 0.0003 | PSNR: 34.8148 | lr: 0.00010000 | Time: 8.68s\n",
      "[4880/6000] Iteration: 195170 | Loss: 0.0004 | PSNR: 33.9423 | lr: 0.00010000 | Time: 8.70s\n",
      "[4880/6000] Iteration: 195180 | Loss: 0.0003 | PSNR: 35.0979 | lr: 0.00010000 | Time: 8.67s\n",
      "[4880/6000] Iteration: 195190 | Loss: 0.0012 | PSNR: 29.1915 | lr: 0.00010000 | Time: 8.67s\n",
      "[4880/6000] Iteration: 195200 | Loss: 0.0004 | PSNR: 33.8902 | lr: 0.00010000 | Time: 8.71s\n",
      "[4881/6000] Iteration: 195210 | Loss: 0.0002 | PSNR: 36.3693 | lr: 0.00010000 | Time: 8.69s\n",
      "[4881/6000] Iteration: 195220 | Loss: 0.0003 | PSNR: 35.6171 | lr: 0.00010000 | Time: 8.82s\n",
      "[4881/6000] Iteration: 195230 | Loss: 0.0005 | PSNR: 32.6981 | lr: 0.00010000 | Time: 8.75s\n",
      "[4881/6000] Iteration: 195240 | Loss: 0.0004 | PSNR: 33.5587 | lr: 0.00010000 | Time: 8.77s\n",
      "[4882/6000] Iteration: 195250 | Loss: 0.0003 | PSNR: 35.5118 | lr: 0.00010000 | Time: 8.67s\n",
      "[4882/6000] Iteration: 195260 | Loss: 0.0002 | PSNR: 38.0429 | lr: 0.00010000 | Time: 8.68s\n",
      "[4882/6000] Iteration: 195270 | Loss: 0.0005 | PSNR: 32.8667 | lr: 0.00010000 | Time: 8.72s\n",
      "[4882/6000] Iteration: 195280 | Loss: 0.0003 | PSNR: 34.6414 | lr: 0.00010000 | Time: 8.67s\n",
      "[4883/6000] Iteration: 195290 | Loss: 0.0004 | PSNR: 33.6438 | lr: 0.00010000 | Time: 8.72s\n",
      "[4883/6000] Iteration: 195300 | Loss: 0.0003 | PSNR: 35.7343 | lr: 0.00010000 | Time: 8.71s\n",
      "[4883/6000] Iteration: 195310 | Loss: 0.0003 | PSNR: 35.1920 | lr: 0.00010000 | Time: 8.68s\n",
      "[4883/6000] Iteration: 195320 | Loss: 0.0003 | PSNR: 36.0092 | lr: 0.00010000 | Time: 8.70s\n",
      "[4884/6000] Iteration: 195330 | Loss: 0.0003 | PSNR: 35.0090 | lr: 0.00010000 | Time: 8.76s\n",
      "[4884/6000] Iteration: 195340 | Loss: 0.0004 | PSNR: 34.5576 | lr: 0.00010000 | Time: 8.70s\n",
      "[4884/6000] Iteration: 195350 | Loss: 0.0003 | PSNR: 34.8691 | lr: 0.00010000 | Time: 8.69s\n",
      "[4884/6000] Iteration: 195360 | Loss: 0.0003 | PSNR: 34.8770 | lr: 0.00010000 | Time: 8.73s\n",
      "[4885/6000] Iteration: 195370 | Loss: 0.0003 | PSNR: 35.4370 | lr: 0.00010000 | Time: 8.72s\n",
      "[4885/6000] Iteration: 195380 | Loss: 0.0003 | PSNR: 35.8137 | lr: 0.00010000 | Time: 8.72s\n",
      "[4885/6000] Iteration: 195390 | Loss: 0.0004 | PSNR: 34.4850 | lr: 0.00010000 | Time: 8.73s\n",
      "[4885/6000] Iteration: 195400 | Loss: 0.0004 | PSNR: 34.5208 | lr: 0.00010000 | Time: 8.73s\n",
      "[4886/6000] Iteration: 195410 | Loss: 0.0002 | PSNR: 36.6880 | lr: 0.00010000 | Time: 8.70s\n",
      "[4886/6000] Iteration: 195420 | Loss: 0.0003 | PSNR: 35.2452 | lr: 0.00010000 | Time: 8.69s\n",
      "[4886/6000] Iteration: 195430 | Loss: 0.0003 | PSNR: 34.7085 | lr: 0.00010000 | Time: 8.71s\n",
      "[4886/6000] Iteration: 195440 | Loss: 0.0002 | PSNR: 36.7430 | lr: 0.00010000 | Time: 8.74s\n",
      "[4887/6000] Iteration: 195450 | Loss: 0.0002 | PSNR: 36.0388 | lr: 0.00010000 | Time: 8.68s\n",
      "[4887/6000] Iteration: 195460 | Loss: 0.0003 | PSNR: 35.1673 | lr: 0.00010000 | Time: 8.68s\n",
      "[4887/6000] Iteration: 195470 | Loss: 0.0004 | PSNR: 34.1086 | lr: 0.00010000 | Time: 8.73s\n",
      "[4887/6000] Iteration: 195480 | Loss: 0.0005 | PSNR: 33.3491 | lr: 0.00010000 | Time: 8.71s\n",
      "[4888/6000] Iteration: 195490 | Loss: 0.0005 | PSNR: 32.7175 | lr: 0.00010000 | Time: 8.71s\n",
      "[4888/6000] Iteration: 195500 | Loss: 0.0007 | PSNR: 31.2983 | lr: 0.00010000 | Time: 8.69s\n",
      "[4888/6000] Iteration: 195510 | Loss: 0.0003 | PSNR: 35.4408 | lr: 0.00010000 | Time: 8.78s\n",
      "[4888/6000] Iteration: 195520 | Loss: 0.0003 | PSNR: 35.6343 | lr: 0.00010000 | Time: 8.72s\n",
      "[4889/6000] Iteration: 195530 | Loss: 0.0004 | PSNR: 33.9448 | lr: 0.00010000 | Time: 8.70s\n",
      "[4889/6000] Iteration: 195540 | Loss: 0.0003 | PSNR: 35.6073 | lr: 0.00010000 | Time: 8.72s\n",
      "[4889/6000] Iteration: 195550 | Loss: 0.0002 | PSNR: 37.3474 | lr: 0.00010000 | Time: 8.68s\n",
      "[4889/6000] Iteration: 195560 | Loss: 0.0006 | PSNR: 32.5591 | lr: 0.00010000 | Time: 8.71s\n",
      "[4890/6000] Iteration: 195570 | Loss: 0.0009 | PSNR: 30.5556 | lr: 0.00010000 | Time: 8.65s\n",
      "[4890/6000] Iteration: 195580 | Loss: 0.0014 | PSNR: 28.5784 | lr: 0.00010000 | Time: 8.69s\n",
      "[4890/6000] Iteration: 195590 | Loss: 0.0006 | PSNR: 32.0571 | lr: 0.00010000 | Time: 8.70s\n",
      "[4890/6000] Iteration: 195600 | Loss: 0.0003 | PSNR: 35.1152 | lr: 0.00010000 | Time: 8.71s\n",
      "0.png 26.998382568359375\n",
      "1.png 29.77193832397461\n",
      "2.png 31.436580657958984\n",
      "3.png 32.03140640258789\n",
      "4.png 34.86363983154297\n",
      "5.png 32.03570556640625\n",
      "6.png 27.388160705566406\n",
      "7.png 31.383071899414062\n",
      "8.png 26.39922332763672\n",
      "9.png 28.910404205322266\n",
      "10.png 30.914775848388672\n",
      "11.png 29.974639892578125\n",
      "12.png 28.44690704345703\n",
      "13.png 26.07196617126465\n",
      "14.png 24.039478302001953\n",
      "15.png 27.225997924804688\n",
      "16.png 34.18998336791992\n",
      "17.png 28.72003936767578\n",
      "18.png 29.814598083496094\n",
      "19.png 31.31572723388672\n",
      "20.png 28.750093460083008\n",
      "21.png 26.499643325805664\n",
      "22.png 24.84607696533203\n",
      "23.png 27.333385467529297\n",
      "24.png 27.22212028503418\n",
      "25.png 28.450471878051758\n",
      "26.png 33.79001235961914\n",
      "27.png 29.896869659423828\n",
      "28.png 29.767791748046875\n",
      "29.png 27.274839401245117\n",
      "30.png 35.145748138427734\n",
      "31.png 34.503082275390625\n",
      "32.png 29.944488525390625\n",
      "33.png 32.238224029541016\n",
      "34.png 28.81859588623047\n",
      "35.png 28.90538215637207\n",
      "36.png 32.192264556884766\n",
      "37.png 30.14297103881836\n",
      "38.png 28.46832275390625\n",
      "39.png 28.245445251464844\n",
      "Validation PSNR:  29.60921139717102\n",
      "[4891/6000] Iteration: 195610 | Loss: 0.0002 | PSNR: 36.7336 | lr: 0.00010000 | Time: 28.31s\n",
      "[4891/6000] Iteration: 195620 | Loss: 0.0006 | PSNR: 32.5291 | lr: 0.00010000 | Time: 8.68s\n",
      "[4891/6000] Iteration: 195630 | Loss: 0.0010 | PSNR: 29.9048 | lr: 0.00010000 | Time: 8.72s\n",
      "[4891/6000] Iteration: 195640 | Loss: 0.0003 | PSNR: 35.6535 | lr: 0.00010000 | Time: 8.75s\n",
      "[4892/6000] Iteration: 195650 | Loss: 0.0005 | PSNR: 33.2036 | lr: 0.00010000 | Time: 8.75s\n",
      "[4892/6000] Iteration: 195660 | Loss: 0.0004 | PSNR: 33.7296 | lr: 0.00010000 | Time: 8.72s\n",
      "[4892/6000] Iteration: 195670 | Loss: 0.0003 | PSNR: 34.7564 | lr: 0.00010000 | Time: 8.75s\n",
      "[4892/6000] Iteration: 195680 | Loss: 0.0011 | PSNR: 29.6673 | lr: 0.00010000 | Time: 8.72s\n",
      "[4893/6000] Iteration: 195690 | Loss: 0.0005 | PSNR: 33.3175 | lr: 0.00010000 | Time: 8.73s\n",
      "[4893/6000] Iteration: 195700 | Loss: 0.0006 | PSNR: 32.3728 | lr: 0.00010000 | Time: 8.73s\n",
      "[4893/6000] Iteration: 195710 | Loss: 0.0008 | PSNR: 31.1588 | lr: 0.00010000 | Time: 8.76s\n",
      "[4893/6000] Iteration: 195720 | Loss: 0.0006 | PSNR: 32.4352 | lr: 0.00010000 | Time: 8.75s\n",
      "[4894/6000] Iteration: 195730 | Loss: 0.0008 | PSNR: 31.0974 | lr: 0.00010000 | Time: 8.67s\n",
      "[4894/6000] Iteration: 195740 | Loss: 0.0002 | PSNR: 36.2587 | lr: 0.00010000 | Time: 8.67s\n",
      "[4894/6000] Iteration: 195750 | Loss: 0.0010 | PSNR: 29.8819 | lr: 0.00010000 | Time: 8.68s\n",
      "[4894/6000] Iteration: 195760 | Loss: 0.0005 | PSNR: 32.9986 | lr: 0.00010000 | Time: 8.69s\n",
      "[4895/6000] Iteration: 195770 | Loss: 0.0003 | PSNR: 34.9751 | lr: 0.00010000 | Time: 8.74s\n",
      "[4895/6000] Iteration: 195780 | Loss: 0.0006 | PSNR: 32.3684 | lr: 0.00010000 | Time: 8.70s\n",
      "[4895/6000] Iteration: 195790 | Loss: 0.0004 | PSNR: 33.5919 | lr: 0.00010000 | Time: 8.70s\n",
      "[4895/6000] Iteration: 195800 | Loss: 0.0003 | PSNR: 35.9373 | lr: 0.00010000 | Time: 8.70s\n",
      "[4896/6000] Iteration: 195810 | Loss: 0.0003 | PSNR: 34.6972 | lr: 0.00010000 | Time: 8.72s\n",
      "[4896/6000] Iteration: 195820 | Loss: 0.0006 | PSNR: 32.0191 | lr: 0.00010000 | Time: 8.71s\n",
      "[4896/6000] Iteration: 195830 | Loss: 0.0004 | PSNR: 34.3004 | lr: 0.00010000 | Time: 8.66s\n",
      "[4896/6000] Iteration: 195840 | Loss: 0.0003 | PSNR: 35.6409 | lr: 0.00010000 | Time: 8.69s\n",
      "[4897/6000] Iteration: 195850 | Loss: 0.0004 | PSNR: 33.5402 | lr: 0.00010000 | Time: 8.71s\n",
      "[4897/6000] Iteration: 195860 | Loss: 0.0009 | PSNR: 30.5876 | lr: 0.00010000 | Time: 8.74s\n",
      "[4897/6000] Iteration: 195870 | Loss: 0.0006 | PSNR: 31.9518 | lr: 0.00010000 | Time: 8.73s\n",
      "[4897/6000] Iteration: 195880 | Loss: 0.0003 | PSNR: 34.6009 | lr: 0.00010000 | Time: 8.77s\n",
      "[4898/6000] Iteration: 195890 | Loss: 0.0003 | PSNR: 35.6263 | lr: 0.00010000 | Time: 8.71s\n",
      "[4898/6000] Iteration: 195900 | Loss: 0.0002 | PSNR: 36.9156 | lr: 0.00010000 | Time: 8.68s\n",
      "[4898/6000] Iteration: 195910 | Loss: 0.0002 | PSNR: 36.5038 | lr: 0.00010000 | Time: 8.74s\n",
      "[4898/6000] Iteration: 195920 | Loss: 0.0003 | PSNR: 35.2969 | lr: 0.00010000 | Time: 8.72s\n",
      "[4899/6000] Iteration: 195930 | Loss: 0.0004 | PSNR: 34.4644 | lr: 0.00010000 | Time: 8.73s\n",
      "[4899/6000] Iteration: 195940 | Loss: 0.0003 | PSNR: 35.6053 | lr: 0.00010000 | Time: 8.69s\n",
      "[4899/6000] Iteration: 195950 | Loss: 0.0003 | PSNR: 35.4567 | lr: 0.00010000 | Time: 8.73s\n",
      "[4899/6000] Iteration: 195960 | Loss: 0.0002 | PSNR: 37.1413 | lr: 0.00010000 | Time: 8.70s\n",
      "[4900/6000] Iteration: 195970 | Loss: 0.0003 | PSNR: 34.7009 | lr: 0.00010000 | Time: 8.76s\n",
      "[4900/6000] Iteration: 195980 | Loss: 0.0004 | PSNR: 34.2698 | lr: 0.00010000 | Time: 8.68s\n",
      "[4900/6000] Iteration: 195990 | Loss: 0.0004 | PSNR: 34.4233 | lr: 0.00010000 | Time: 8.74s\n",
      "[4900/6000] Iteration: 196000 | Loss: 0.0005 | PSNR: 32.8247 | lr: 0.00010000 | Time: 8.72s\n",
      "[4901/6000] Iteration: 196010 | Loss: 0.0005 | PSNR: 33.1790 | lr: 0.00010000 | Time: 8.71s\n",
      "[4901/6000] Iteration: 196020 | Loss: 0.0003 | PSNR: 35.1189 | lr: 0.00010000 | Time: 8.74s\n",
      "[4901/6000] Iteration: 196030 | Loss: 0.0004 | PSNR: 33.6507 | lr: 0.00010000 | Time: 8.74s\n",
      "[4901/6000] Iteration: 196040 | Loss: 0.0002 | PSNR: 36.6236 | lr: 0.00010000 | Time: 8.72s\n",
      "[4902/6000] Iteration: 196050 | Loss: 0.0004 | PSNR: 34.1688 | lr: 0.00010000 | Time: 8.81s\n",
      "[4902/6000] Iteration: 196060 | Loss: 0.0002 | PSNR: 37.0154 | lr: 0.00010000 | Time: 8.78s\n",
      "[4902/6000] Iteration: 196070 | Loss: 0.0002 | PSNR: 36.3755 | lr: 0.00010000 | Time: 8.80s\n",
      "[4902/6000] Iteration: 196080 | Loss: 0.0003 | PSNR: 35.8584 | lr: 0.00010000 | Time: 8.74s\n",
      "[4903/6000] Iteration: 196090 | Loss: 0.0010 | PSNR: 30.1411 | lr: 0.00010000 | Time: 8.74s\n",
      "[4903/6000] Iteration: 196100 | Loss: 0.0003 | PSNR: 35.2005 | lr: 0.00010000 | Time: 8.72s\n",
      "[4903/6000] Iteration: 196110 | Loss: 0.0005 | PSNR: 33.0767 | lr: 0.00010000 | Time: 8.70s\n",
      "[4903/6000] Iteration: 196120 | Loss: 0.0005 | PSNR: 33.1518 | lr: 0.00010000 | Time: 8.66s\n",
      "[4904/6000] Iteration: 196130 | Loss: 0.0003 | PSNR: 35.6716 | lr: 0.00010000 | Time: 8.71s\n",
      "[4904/6000] Iteration: 196140 | Loss: 0.0004 | PSNR: 33.7199 | lr: 0.00010000 | Time: 8.77s\n",
      "[4904/6000] Iteration: 196150 | Loss: 0.0003 | PSNR: 34.6034 | lr: 0.00010000 | Time: 8.70s\n",
      "[4904/6000] Iteration: 196160 | Loss: 0.0004 | PSNR: 34.3427 | lr: 0.00010000 | Time: 8.72s\n",
      "[4905/6000] Iteration: 196170 | Loss: 0.0004 | PSNR: 34.1243 | lr: 0.00010000 | Time: 8.76s\n",
      "[4905/6000] Iteration: 196180 | Loss: 0.0007 | PSNR: 31.7957 | lr: 0.00010000 | Time: 8.73s\n",
      "[4905/6000] Iteration: 196190 | Loss: 0.0004 | PSNR: 34.2807 | lr: 0.00010000 | Time: 8.77s\n",
      "[4905/6000] Iteration: 196200 | Loss: 0.0003 | PSNR: 34.8629 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 28.283031463623047\n",
      "1.png 30.239055633544922\n",
      "2.png 31.488811492919922\n",
      "3.png 31.064088821411133\n",
      "4.png 33.458900451660156\n",
      "5.png 31.57029914855957\n",
      "6.png 28.5756893157959\n",
      "7.png 31.302881240844727\n",
      "8.png 24.30978775024414\n",
      "9.png 29.791505813598633\n",
      "10.png 27.875999450683594\n",
      "11.png 30.01760482788086\n",
      "12.png 28.139415740966797\n",
      "13.png 22.620635986328125\n",
      "14.png 22.76073455810547\n",
      "15.png 32.425621032714844\n",
      "16.png 33.44439697265625\n",
      "17.png 28.940553665161133\n",
      "18.png 29.968971252441406\n",
      "19.png 28.613571166992188\n",
      "20.png 25.757997512817383\n",
      "21.png 29.12580108642578\n",
      "22.png 27.57847023010254\n",
      "23.png 30.973941802978516\n",
      "24.png 30.155363082885742\n",
      "25.png 25.805625915527344\n",
      "26.png 30.763351440429688\n",
      "27.png 29.834535598754883\n",
      "28.png 28.861003875732422\n",
      "29.png 25.8280029296875\n",
      "30.png 35.224239349365234\n",
      "31.png 33.848270416259766\n",
      "32.png 30.608848571777344\n",
      "33.png 34.293094635009766\n",
      "34.png 31.10614776611328\n",
      "35.png 29.516841888427734\n",
      "36.png 32.959102630615234\n",
      "37.png 30.626934051513672\n",
      "38.png 27.131654739379883\n",
      "39.png 27.845842361450195\n",
      "Validation PSNR:  29.568415641784668\n",
      "[4906/6000] Iteration: 196210 | Loss: 0.0009 | PSNR: 30.3101 | lr: 0.00010000 | Time: 28.47s\n",
      "[4906/6000] Iteration: 196220 | Loss: 0.0008 | PSNR: 30.9465 | lr: 0.00010000 | Time: 8.72s\n",
      "[4906/6000] Iteration: 196230 | Loss: 0.0004 | PSNR: 33.5147 | lr: 0.00010000 | Time: 8.71s\n",
      "[4906/6000] Iteration: 196240 | Loss: 0.0003 | PSNR: 34.9458 | lr: 0.00010000 | Time: 8.74s\n",
      "[4907/6000] Iteration: 196250 | Loss: 0.0005 | PSNR: 33.1845 | lr: 0.00010000 | Time: 8.76s\n",
      "[4907/6000] Iteration: 196260 | Loss: 0.0006 | PSNR: 32.0467 | lr: 0.00010000 | Time: 8.74s\n",
      "[4907/6000] Iteration: 196270 | Loss: 0.0007 | PSNR: 31.8223 | lr: 0.00010000 | Time: 8.70s\n",
      "[4907/6000] Iteration: 196280 | Loss: 0.0008 | PSNR: 31.2155 | lr: 0.00010000 | Time: 8.74s\n",
      "[4908/6000] Iteration: 196290 | Loss: 0.0007 | PSNR: 31.5973 | lr: 0.00010000 | Time: 8.74s\n",
      "[4908/6000] Iteration: 196300 | Loss: 0.0003 | PSNR: 35.4532 | lr: 0.00010000 | Time: 8.70s\n",
      "[4908/6000] Iteration: 196310 | Loss: 0.0006 | PSNR: 32.1073 | lr: 0.00010000 | Time: 8.74s\n",
      "[4908/6000] Iteration: 196320 | Loss: 0.0006 | PSNR: 32.5714 | lr: 0.00010000 | Time: 8.80s\n",
      "[4909/6000] Iteration: 196330 | Loss: 0.0005 | PSNR: 33.3116 | lr: 0.00010000 | Time: 8.75s\n",
      "[4909/6000] Iteration: 196340 | Loss: 0.0007 | PSNR: 31.3588 | lr: 0.00010000 | Time: 8.72s\n",
      "[4909/6000] Iteration: 196350 | Loss: 0.0005 | PSNR: 33.0476 | lr: 0.00010000 | Time: 8.71s\n",
      "[4909/6000] Iteration: 196360 | Loss: 0.0009 | PSNR: 30.6183 | lr: 0.00010000 | Time: 8.77s\n",
      "[4910/6000] Iteration: 196370 | Loss: 0.0008 | PSNR: 30.9748 | lr: 0.00010000 | Time: 8.72s\n",
      "[4910/6000] Iteration: 196380 | Loss: 0.0005 | PSNR: 33.3688 | lr: 0.00010000 | Time: 8.68s\n",
      "[4910/6000] Iteration: 196390 | Loss: 0.0005 | PSNR: 32.6937 | lr: 0.00010000 | Time: 8.75s\n",
      "[4910/6000] Iteration: 196400 | Loss: 0.0007 | PSNR: 31.2501 | lr: 0.00010000 | Time: 8.71s\n",
      "[4911/6000] Iteration: 196410 | Loss: 0.0008 | PSNR: 31.2196 | lr: 0.00010000 | Time: 8.70s\n",
      "[4911/6000] Iteration: 196420 | Loss: 0.0004 | PSNR: 34.0701 | lr: 0.00010000 | Time: 8.72s\n",
      "[4911/6000] Iteration: 196430 | Loss: 0.0005 | PSNR: 32.9199 | lr: 0.00010000 | Time: 8.76s\n",
      "[4911/6000] Iteration: 196440 | Loss: 0.0004 | PSNR: 34.3367 | lr: 0.00010000 | Time: 8.71s\n",
      "[4912/6000] Iteration: 196450 | Loss: 0.0006 | PSNR: 32.1361 | lr: 0.00010000 | Time: 8.72s\n",
      "[4912/6000] Iteration: 196460 | Loss: 0.0006 | PSNR: 32.0345 | lr: 0.00010000 | Time: 8.71s\n",
      "[4912/6000] Iteration: 196470 | Loss: 0.0003 | PSNR: 35.8877 | lr: 0.00010000 | Time: 8.68s\n",
      "[4912/6000] Iteration: 196480 | Loss: 0.0009 | PSNR: 30.3237 | lr: 0.00010000 | Time: 8.71s\n",
      "[4913/6000] Iteration: 196490 | Loss: 0.0002 | PSNR: 36.8198 | lr: 0.00010000 | Time: 8.70s\n",
      "[4913/6000] Iteration: 196500 | Loss: 0.0006 | PSNR: 32.1621 | lr: 0.00010000 | Time: 8.75s\n",
      "[4913/6000] Iteration: 196510 | Loss: 0.0004 | PSNR: 33.6619 | lr: 0.00010000 | Time: 8.70s\n",
      "[4913/6000] Iteration: 196520 | Loss: 0.0003 | PSNR: 35.6079 | lr: 0.00010000 | Time: 8.70s\n",
      "[4914/6000] Iteration: 196530 | Loss: 0.0005 | PSNR: 32.7272 | lr: 0.00010000 | Time: 8.69s\n",
      "[4914/6000] Iteration: 196540 | Loss: 0.0008 | PSNR: 31.0893 | lr: 0.00010000 | Time: 8.71s\n",
      "[4914/6000] Iteration: 196550 | Loss: 0.0003 | PSNR: 35.0547 | lr: 0.00010000 | Time: 8.70s\n",
      "[4914/6000] Iteration: 196560 | Loss: 0.0005 | PSNR: 33.4511 | lr: 0.00010000 | Time: 8.70s\n",
      "[4915/6000] Iteration: 196570 | Loss: 0.0003 | PSNR: 34.5962 | lr: 0.00010000 | Time: 8.74s\n",
      "[4915/6000] Iteration: 196580 | Loss: 0.0003 | PSNR: 34.8202 | lr: 0.00010000 | Time: 8.75s\n",
      "[4915/6000] Iteration: 196590 | Loss: 0.0007 | PSNR: 31.3516 | lr: 0.00010000 | Time: 8.71s\n",
      "[4915/6000] Iteration: 196600 | Loss: 0.0006 | PSNR: 32.3503 | lr: 0.00010000 | Time: 8.76s\n",
      "[4916/6000] Iteration: 196610 | Loss: 0.0004 | PSNR: 33.8582 | lr: 0.00010000 | Time: 8.74s\n",
      "[4916/6000] Iteration: 196620 | Loss: 0.0005 | PSNR: 32.7377 | lr: 0.00010000 | Time: 8.72s\n",
      "[4916/6000] Iteration: 196630 | Loss: 0.0003 | PSNR: 34.9791 | lr: 0.00010000 | Time: 8.77s\n",
      "[4916/6000] Iteration: 196640 | Loss: 0.0002 | PSNR: 36.2365 | lr: 0.00010000 | Time: 8.72s\n",
      "[4917/6000] Iteration: 196650 | Loss: 0.0003 | PSNR: 34.9625 | lr: 0.00010000 | Time: 8.71s\n",
      "[4917/6000] Iteration: 196660 | Loss: 0.0004 | PSNR: 34.0985 | lr: 0.00010000 | Time: 8.69s\n",
      "[4917/6000] Iteration: 196670 | Loss: 0.0003 | PSNR: 35.2293 | lr: 0.00010000 | Time: 8.69s\n",
      "[4917/6000] Iteration: 196680 | Loss: 0.0002 | PSNR: 37.7321 | lr: 0.00010000 | Time: 8.73s\n",
      "[4918/6000] Iteration: 196690 | Loss: 0.0003 | PSNR: 35.4287 | lr: 0.00010000 | Time: 8.74s\n",
      "[4918/6000] Iteration: 196700 | Loss: 0.0007 | PSNR: 31.5136 | lr: 0.00010000 | Time: 8.73s\n",
      "[4918/6000] Iteration: 196710 | Loss: 0.0008 | PSNR: 31.2224 | lr: 0.00010000 | Time: 8.73s\n",
      "[4918/6000] Iteration: 196720 | Loss: 0.0004 | PSNR: 34.3518 | lr: 0.00010000 | Time: 8.67s\n",
      "[4919/6000] Iteration: 196730 | Loss: 0.0004 | PSNR: 33.5860 | lr: 0.00010000 | Time: 8.69s\n",
      "[4919/6000] Iteration: 196740 | Loss: 0.0004 | PSNR: 34.1998 | lr: 0.00010000 | Time: 8.69s\n",
      "[4919/6000] Iteration: 196750 | Loss: 0.0004 | PSNR: 33.7021 | lr: 0.00010000 | Time: 8.74s\n",
      "[4919/6000] Iteration: 196760 | Loss: 0.0003 | PSNR: 34.6809 | lr: 0.00010000 | Time: 8.73s\n",
      "[4920/6000] Iteration: 196770 | Loss: 0.0003 | PSNR: 35.5310 | lr: 0.00010000 | Time: 8.66s\n",
      "[4920/6000] Iteration: 196780 | Loss: 0.0005 | PSNR: 33.4203 | lr: 0.00010000 | Time: 8.74s\n",
      "[4920/6000] Iteration: 196790 | Loss: 0.0004 | PSNR: 34.4972 | lr: 0.00010000 | Time: 8.70s\n",
      "[4920/6000] Iteration: 196800 | Loss: 0.0003 | PSNR: 34.6431 | lr: 0.00010000 | Time: 8.69s\n",
      "0.png 28.274972915649414\n",
      "1.png 28.338817596435547\n",
      "2.png 29.601518630981445\n",
      "3.png 29.2838191986084\n",
      "4.png 32.70341110229492\n",
      "5.png 34.53730010986328\n",
      "6.png 25.35341453552246\n",
      "7.png 32.527000427246094\n",
      "8.png 24.438148498535156\n",
      "9.png 29.06696128845215\n",
      "10.png 30.607784271240234\n",
      "11.png 28.76864242553711\n",
      "12.png 29.201250076293945\n",
      "13.png 26.153743743896484\n",
      "14.png 25.52210235595703\n",
      "15.png 27.884937286376953\n",
      "16.png 33.024410247802734\n",
      "17.png 25.959882736206055\n",
      "18.png 29.085790634155273\n",
      "19.png 30.84957504272461\n",
      "20.png 28.661821365356445\n",
      "21.png 26.17304229736328\n",
      "22.png 22.49095916748047\n",
      "23.png 28.23210906982422\n",
      "24.png 25.041601181030273\n",
      "25.png 27.681884765625\n",
      "26.png 34.886199951171875\n",
      "27.png 30.533235549926758\n",
      "28.png 26.959035873413086\n",
      "29.png 28.32786750793457\n",
      "30.png 30.92341423034668\n",
      "31.png 33.41756057739258\n",
      "32.png 29.6605224609375\n",
      "33.png 33.667205810546875\n",
      "34.png 32.871795654296875\n",
      "35.png 30.041465759277344\n",
      "36.png 31.47264862060547\n",
      "37.png 30.19649887084961\n",
      "38.png 28.466449737548828\n",
      "39.png 24.913841247558594\n",
      "Validation PSNR:  29.14506607055664\n",
      "[4921/6000] Iteration: 196810 | Loss: 0.0005 | PSNR: 33.2793 | lr: 0.00010000 | Time: 28.38s\n",
      "[4921/6000] Iteration: 196820 | Loss: 0.0003 | PSNR: 34.7448 | lr: 0.00010000 | Time: 8.64s\n",
      "[4921/6000] Iteration: 196830 | Loss: 0.0002 | PSNR: 37.1146 | lr: 0.00010000 | Time: 8.75s\n",
      "[4921/6000] Iteration: 196840 | Loss: 0.0002 | PSNR: 36.6506 | lr: 0.00010000 | Time: 8.72s\n",
      "[4922/6000] Iteration: 196850 | Loss: 0.0003 | PSNR: 35.0742 | lr: 0.00010000 | Time: 8.71s\n",
      "[4922/6000] Iteration: 196860 | Loss: 0.0004 | PSNR: 33.7251 | lr: 0.00010000 | Time: 8.71s\n",
      "[4922/6000] Iteration: 196870 | Loss: 0.0003 | PSNR: 35.0588 | lr: 0.00010000 | Time: 8.74s\n",
      "[4922/6000] Iteration: 196880 | Loss: 0.0002 | PSNR: 36.0598 | lr: 0.00010000 | Time: 8.69s\n",
      "[4923/6000] Iteration: 196890 | Loss: 0.0003 | PSNR: 35.0668 | lr: 0.00010000 | Time: 8.74s\n",
      "[4923/6000] Iteration: 196900 | Loss: 0.0003 | PSNR: 35.6799 | lr: 0.00010000 | Time: 8.70s\n",
      "[4923/6000] Iteration: 196910 | Loss: 0.0003 | PSNR: 34.5770 | lr: 0.00010000 | Time: 8.69s\n",
      "[4923/6000] Iteration: 196920 | Loss: 0.0003 | PSNR: 34.7991 | lr: 0.00010000 | Time: 8.72s\n",
      "[4924/6000] Iteration: 196930 | Loss: 0.0004 | PSNR: 33.8453 | lr: 0.00010000 | Time: 8.72s\n",
      "[4924/6000] Iteration: 196940 | Loss: 0.0002 | PSNR: 36.7897 | lr: 0.00010000 | Time: 8.73s\n",
      "[4924/6000] Iteration: 196950 | Loss: 0.0003 | PSNR: 35.2906 | lr: 0.00010000 | Time: 8.71s\n",
      "[4924/6000] Iteration: 196960 | Loss: 0.0004 | PSNR: 34.3114 | lr: 0.00010000 | Time: 8.67s\n",
      "[4925/6000] Iteration: 196970 | Loss: 0.0004 | PSNR: 34.1284 | lr: 0.00010000 | Time: 8.72s\n",
      "[4925/6000] Iteration: 196980 | Loss: 0.0002 | PSNR: 37.1244 | lr: 0.00010000 | Time: 8.72s\n",
      "[4925/6000] Iteration: 196990 | Loss: 0.0003 | PSNR: 35.3451 | lr: 0.00010000 | Time: 8.71s\n",
      "[4925/6000] Iteration: 197000 | Loss: 0.0004 | PSNR: 34.0341 | lr: 0.00010000 | Time: 8.71s\n",
      "[4926/6000] Iteration: 197010 | Loss: 0.0003 | PSNR: 34.5913 | lr: 0.00010000 | Time: 8.74s\n",
      "[4926/6000] Iteration: 197020 | Loss: 0.0003 | PSNR: 34.6890 | lr: 0.00010000 | Time: 8.74s\n",
      "[4926/6000] Iteration: 197030 | Loss: 0.0004 | PSNR: 34.3323 | lr: 0.00010000 | Time: 8.69s\n",
      "[4926/6000] Iteration: 197040 | Loss: 0.0005 | PSNR: 32.6001 | lr: 0.00010000 | Time: 8.74s\n",
      "[4927/6000] Iteration: 197050 | Loss: 0.0004 | PSNR: 34.3832 | lr: 0.00010000 | Time: 8.74s\n",
      "[4927/6000] Iteration: 197060 | Loss: 0.0004 | PSNR: 34.1096 | lr: 0.00010000 | Time: 8.73s\n",
      "[4927/6000] Iteration: 197070 | Loss: 0.0006 | PSNR: 31.8957 | lr: 0.00010000 | Time: 8.68s\n",
      "[4927/6000] Iteration: 197080 | Loss: 0.0005 | PSNR: 33.3667 | lr: 0.00010000 | Time: 8.72s\n",
      "[4928/6000] Iteration: 197090 | Loss: 0.0002 | PSNR: 36.3707 | lr: 0.00010000 | Time: 8.71s\n",
      "[4928/6000] Iteration: 197100 | Loss: 0.0004 | PSNR: 33.8939 | lr: 0.00010000 | Time: 8.71s\n",
      "[4928/6000] Iteration: 197110 | Loss: 0.0003 | PSNR: 35.4976 | lr: 0.00010000 | Time: 8.72s\n",
      "[4928/6000] Iteration: 197120 | Loss: 0.0003 | PSNR: 34.6349 | lr: 0.00010000 | Time: 8.69s\n",
      "[4929/6000] Iteration: 197130 | Loss: 0.0002 | PSNR: 37.0936 | lr: 0.00010000 | Time: 8.66s\n",
      "[4929/6000] Iteration: 197140 | Loss: 0.0005 | PSNR: 33.3741 | lr: 0.00010000 | Time: 8.75s\n",
      "[4929/6000] Iteration: 197150 | Loss: 0.0004 | PSNR: 34.4535 | lr: 0.00010000 | Time: 8.79s\n",
      "[4929/6000] Iteration: 197160 | Loss: 0.0008 | PSNR: 31.1506 | lr: 0.00010000 | Time: 8.69s\n",
      "[4930/6000] Iteration: 197170 | Loss: 0.0004 | PSNR: 34.0052 | lr: 0.00010000 | Time: 8.70s\n",
      "[4930/6000] Iteration: 197180 | Loss: 0.0005 | PSNR: 33.1646 | lr: 0.00010000 | Time: 8.74s\n",
      "[4930/6000] Iteration: 197190 | Loss: 0.0003 | PSNR: 34.8056 | lr: 0.00010000 | Time: 8.73s\n",
      "[4930/6000] Iteration: 197200 | Loss: 0.0003 | PSNR: 35.7341 | lr: 0.00010000 | Time: 8.69s\n",
      "[4931/6000] Iteration: 197210 | Loss: 0.0004 | PSNR: 33.9706 | lr: 0.00010000 | Time: 8.70s\n",
      "[4931/6000] Iteration: 197220 | Loss: 0.0003 | PSNR: 35.4008 | lr: 0.00010000 | Time: 8.71s\n",
      "[4931/6000] Iteration: 197230 | Loss: 0.0003 | PSNR: 35.6030 | lr: 0.00010000 | Time: 8.66s\n",
      "[4931/6000] Iteration: 197240 | Loss: 0.0005 | PSNR: 32.9709 | lr: 0.00010000 | Time: 8.73s\n",
      "[4932/6000] Iteration: 197250 | Loss: 0.0003 | PSNR: 35.0307 | lr: 0.00010000 | Time: 8.68s\n",
      "[4932/6000] Iteration: 197260 | Loss: 0.0003 | PSNR: 35.9180 | lr: 0.00010000 | Time: 8.77s\n",
      "[4932/6000] Iteration: 197270 | Loss: 0.0003 | PSNR: 36.0055 | lr: 0.00010000 | Time: 8.77s\n",
      "[4932/6000] Iteration: 197280 | Loss: 0.0006 | PSNR: 32.0393 | lr: 0.00010000 | Time: 8.78s\n",
      "[4933/6000] Iteration: 197290 | Loss: 0.0007 | PSNR: 31.6237 | lr: 0.00010000 | Time: 8.69s\n",
      "[4933/6000] Iteration: 197300 | Loss: 0.0004 | PSNR: 33.4864 | lr: 0.00010000 | Time: 8.75s\n",
      "[4933/6000] Iteration: 197310 | Loss: 0.0004 | PSNR: 34.4307 | lr: 0.00010000 | Time: 8.74s\n",
      "[4933/6000] Iteration: 197320 | Loss: 0.0004 | PSNR: 34.2096 | lr: 0.00010000 | Time: 8.73s\n",
      "[4934/6000] Iteration: 197330 | Loss: 0.0003 | PSNR: 35.0515 | lr: 0.00010000 | Time: 8.77s\n",
      "[4934/6000] Iteration: 197340 | Loss: 0.0004 | PSNR: 33.8170 | lr: 0.00010000 | Time: 8.69s\n",
      "[4934/6000] Iteration: 197350 | Loss: 0.0005 | PSNR: 32.6332 | lr: 0.00010000 | Time: 8.79s\n",
      "[4934/6000] Iteration: 197360 | Loss: 0.0006 | PSNR: 32.3842 | lr: 0.00010000 | Time: 8.76s\n",
      "[4935/6000] Iteration: 197370 | Loss: 0.0007 | PSNR: 31.4513 | lr: 0.00010000 | Time: 8.71s\n",
      "[4935/6000] Iteration: 197380 | Loss: 0.0003 | PSNR: 35.3556 | lr: 0.00010000 | Time: 8.75s\n",
      "[4935/6000] Iteration: 197390 | Loss: 0.0005 | PSNR: 32.6474 | lr: 0.00010000 | Time: 8.73s\n",
      "[4935/6000] Iteration: 197400 | Loss: 0.0007 | PSNR: 31.6357 | lr: 0.00010000 | Time: 8.72s\n",
      "0.png 25.887638092041016\n",
      "1.png 27.424957275390625\n",
      "2.png 29.870588302612305\n",
      "3.png 29.018463134765625\n",
      "4.png 34.20259094238281\n",
      "5.png 34.12615966796875\n",
      "6.png 25.81085205078125\n",
      "7.png 31.871938705444336\n",
      "8.png 23.340225219726562\n",
      "9.png 29.831035614013672\n",
      "10.png 32.677223205566406\n",
      "11.png 32.104820251464844\n",
      "12.png 28.722042083740234\n",
      "13.png 27.371122360229492\n",
      "14.png 24.494760513305664\n",
      "15.png 27.33621597290039\n",
      "16.png 32.29930114746094\n",
      "17.png 25.174724578857422\n",
      "18.png 28.30750274658203\n",
      "19.png 32.2421760559082\n",
      "20.png 31.291542053222656\n",
      "21.png 24.5223331451416\n",
      "22.png 21.72588348388672\n",
      "23.png 24.231340408325195\n",
      "24.png 24.686735153198242\n",
      "25.png 29.066387176513672\n",
      "26.png 31.175947189331055\n",
      "27.png 28.814924240112305\n",
      "28.png 26.581283569335938\n",
      "29.png 27.03504753112793\n",
      "30.png 33.040077209472656\n",
      "31.png 35.26279830932617\n",
      "32.png 31.619279861450195\n",
      "33.png 31.113359451293945\n",
      "34.png 29.94784927368164\n",
      "35.png 28.669055938720703\n",
      "36.png 31.507774353027344\n",
      "37.png 31.20298194885254\n",
      "38.png 29.35316276550293\n",
      "39.png 26.7838191986084\n",
      "Validation PSNR:  28.99364800453186\n",
      "[4936/6000] Iteration: 197410 | Loss: 0.0004 | PSNR: 33.9094 | lr: 0.00010000 | Time: 28.47s\n",
      "[4936/6000] Iteration: 197420 | Loss: 0.0003 | PSNR: 34.9479 | lr: 0.00010000 | Time: 8.73s\n",
      "[4936/6000] Iteration: 197430 | Loss: 0.0004 | PSNR: 33.9989 | lr: 0.00010000 | Time: 8.69s\n",
      "[4936/6000] Iteration: 197440 | Loss: 0.0003 | PSNR: 35.1224 | lr: 0.00010000 | Time: 8.69s\n",
      "[4937/6000] Iteration: 197450 | Loss: 0.0004 | PSNR: 34.4269 | lr: 0.00010000 | Time: 8.73s\n",
      "[4937/6000] Iteration: 197460 | Loss: 0.0005 | PSNR: 33.0925 | lr: 0.00010000 | Time: 8.71s\n",
      "[4937/6000] Iteration: 197470 | Loss: 0.0004 | PSNR: 33.5075 | lr: 0.00010000 | Time: 8.67s\n",
      "[4937/6000] Iteration: 197480 | Loss: 0.0007 | PSNR: 31.5467 | lr: 0.00010000 | Time: 8.73s\n",
      "[4938/6000] Iteration: 197490 | Loss: 0.0003 | PSNR: 34.8354 | lr: 0.00010000 | Time: 8.75s\n",
      "[4938/6000] Iteration: 197500 | Loss: 0.0007 | PSNR: 31.6673 | lr: 0.00010000 | Time: 8.67s\n",
      "[4938/6000] Iteration: 197510 | Loss: 0.0005 | PSNR: 33.2101 | lr: 0.00010000 | Time: 8.70s\n",
      "[4938/6000] Iteration: 197520 | Loss: 0.0005 | PSNR: 33.0941 | lr: 0.00010000 | Time: 8.73s\n",
      "[4939/6000] Iteration: 197530 | Loss: 0.0004 | PSNR: 34.1237 | lr: 0.00010000 | Time: 8.68s\n",
      "[4939/6000] Iteration: 197540 | Loss: 0.0004 | PSNR: 33.9381 | lr: 0.00010000 | Time: 8.73s\n",
      "[4939/6000] Iteration: 197550 | Loss: 0.0002 | PSNR: 37.0319 | lr: 0.00010000 | Time: 8.70s\n",
      "[4939/6000] Iteration: 197560 | Loss: 0.0005 | PSNR: 33.1795 | lr: 0.00010000 | Time: 8.73s\n",
      "[4940/6000] Iteration: 197570 | Loss: 0.0004 | PSNR: 34.2617 | lr: 0.00010000 | Time: 8.71s\n",
      "[4940/6000] Iteration: 197580 | Loss: 0.0004 | PSNR: 34.2650 | lr: 0.00010000 | Time: 8.71s\n",
      "[4940/6000] Iteration: 197590 | Loss: 0.0002 | PSNR: 36.4613 | lr: 0.00010000 | Time: 8.77s\n",
      "[4940/6000] Iteration: 197600 | Loss: 0.0004 | PSNR: 33.8001 | lr: 0.00010000 | Time: 8.74s\n",
      "[4941/6000] Iteration: 197610 | Loss: 0.0003 | PSNR: 35.3773 | lr: 0.00010000 | Time: 8.71s\n",
      "[4941/6000] Iteration: 197620 | Loss: 0.0004 | PSNR: 34.1035 | lr: 0.00010000 | Time: 8.76s\n",
      "[4941/6000] Iteration: 197630 | Loss: 0.0003 | PSNR: 35.6034 | lr: 0.00010000 | Time: 8.71s\n",
      "[4941/6000] Iteration: 197640 | Loss: 0.0004 | PSNR: 34.5339 | lr: 0.00010000 | Time: 8.66s\n",
      "[4942/6000] Iteration: 197650 | Loss: 0.0003 | PSNR: 35.7934 | lr: 0.00010000 | Time: 8.68s\n",
      "[4942/6000] Iteration: 197660 | Loss: 0.0002 | PSNR: 37.7369 | lr: 0.00010000 | Time: 8.75s\n",
      "[4942/6000] Iteration: 197670 | Loss: 0.0002 | PSNR: 36.6244 | lr: 0.00010000 | Time: 8.71s\n",
      "[4942/6000] Iteration: 197680 | Loss: 0.0002 | PSNR: 36.1749 | lr: 0.00010000 | Time: 8.69s\n",
      "[4943/6000] Iteration: 197690 | Loss: 0.0005 | PSNR: 33.3958 | lr: 0.00010000 | Time: 8.66s\n",
      "[4943/6000] Iteration: 197700 | Loss: 0.0006 | PSNR: 32.3491 | lr: 0.00010000 | Time: 8.76s\n",
      "[4943/6000] Iteration: 197710 | Loss: 0.0006 | PSNR: 32.4267 | lr: 0.00010000 | Time: 8.70s\n",
      "[4943/6000] Iteration: 197720 | Loss: 0.0005 | PSNR: 33.2394 | lr: 0.00010000 | Time: 8.66s\n",
      "[4944/6000] Iteration: 197730 | Loss: 0.0003 | PSNR: 34.6949 | lr: 0.00010000 | Time: 8.70s\n",
      "[4944/6000] Iteration: 197740 | Loss: 0.0003 | PSNR: 34.7843 | lr: 0.00010000 | Time: 8.75s\n",
      "[4944/6000] Iteration: 197750 | Loss: 0.0006 | PSNR: 32.0744 | lr: 0.00010000 | Time: 8.69s\n",
      "[4944/6000] Iteration: 197760 | Loss: 0.0005 | PSNR: 33.2047 | lr: 0.00010000 | Time: 8.71s\n",
      "[4945/6000] Iteration: 197770 | Loss: 0.0004 | PSNR: 33.7840 | lr: 0.00010000 | Time: 8.74s\n",
      "[4945/6000] Iteration: 197780 | Loss: 0.0003 | PSNR: 35.1673 | lr: 0.00010000 | Time: 8.71s\n",
      "[4945/6000] Iteration: 197790 | Loss: 0.0005 | PSNR: 33.1746 | lr: 0.00010000 | Time: 8.72s\n",
      "[4945/6000] Iteration: 197800 | Loss: 0.0003 | PSNR: 34.5664 | lr: 0.00010000 | Time: 8.71s\n",
      "[4946/6000] Iteration: 197810 | Loss: 0.0003 | PSNR: 35.0576 | lr: 0.00010000 | Time: 8.79s\n",
      "[4946/6000] Iteration: 197820 | Loss: 0.0003 | PSNR: 35.4936 | lr: 0.00010000 | Time: 8.72s\n",
      "[4946/6000] Iteration: 197830 | Loss: 0.0010 | PSNR: 29.8272 | lr: 0.00010000 | Time: 8.78s\n",
      "[4946/6000] Iteration: 197840 | Loss: 0.0006 | PSNR: 32.4434 | lr: 0.00010000 | Time: 8.73s\n",
      "[4947/6000] Iteration: 197850 | Loss: 0.0004 | PSNR: 34.4197 | lr: 0.00010000 | Time: 8.70s\n",
      "[4947/6000] Iteration: 197860 | Loss: 0.0021 | PSNR: 26.8079 | lr: 0.00010000 | Time: 8.74s\n",
      "[4947/6000] Iteration: 197870 | Loss: 0.0008 | PSNR: 30.7279 | lr: 0.00010000 | Time: 8.72s\n",
      "[4947/6000] Iteration: 197880 | Loss: 0.0003 | PSNR: 35.3308 | lr: 0.00010000 | Time: 8.73s\n",
      "[4948/6000] Iteration: 197890 | Loss: 0.0004 | PSNR: 34.1374 | lr: 0.00010000 | Time: 8.68s\n",
      "[4948/6000] Iteration: 197900 | Loss: 0.0005 | PSNR: 33.1509 | lr: 0.00010000 | Time: 8.76s\n",
      "[4948/6000] Iteration: 197910 | Loss: 0.0005 | PSNR: 32.6404 | lr: 0.00010000 | Time: 8.80s\n",
      "[4948/6000] Iteration: 197920 | Loss: 0.0004 | PSNR: 33.6123 | lr: 0.00010000 | Time: 8.73s\n",
      "[4949/6000] Iteration: 197930 | Loss: 0.0003 | PSNR: 35.7466 | lr: 0.00010000 | Time: 8.73s\n",
      "[4949/6000] Iteration: 197940 | Loss: 0.0027 | PSNR: 25.7211 | lr: 0.00010000 | Time: 8.76s\n",
      "[4949/6000] Iteration: 197950 | Loss: 0.0005 | PSNR: 33.4361 | lr: 0.00010000 | Time: 8.76s\n",
      "[4949/6000] Iteration: 197960 | Loss: 0.0004 | PSNR: 33.5677 | lr: 0.00010000 | Time: 8.70s\n",
      "[4950/6000] Iteration: 197970 | Loss: 0.0002 | PSNR: 37.1729 | lr: 0.00010000 | Time: 8.67s\n",
      "[4950/6000] Iteration: 197980 | Loss: 0.0006 | PSNR: 32.4604 | lr: 0.00010000 | Time: 8.70s\n",
      "[4950/6000] Iteration: 197990 | Loss: 0.0005 | PSNR: 32.6663 | lr: 0.00010000 | Time: 8.77s\n",
      "[4950/6000] Iteration: 198000 | Loss: 0.0009 | PSNR: 30.5269 | lr: 0.00010000 | Time: 8.75s\n",
      "0.png 24.452245712280273\n",
      "1.png 25.817401885986328\n",
      "2.png 28.62329864501953\n",
      "3.png 29.1321964263916\n",
      "4.png 32.396854400634766\n",
      "5.png 34.627777099609375\n",
      "6.png 24.73967742919922\n",
      "7.png 30.835792541503906\n",
      "8.png 23.067672729492188\n",
      "9.png 28.745365142822266\n",
      "10.png 31.673498153686523\n",
      "11.png 28.518497467041016\n",
      "12.png 27.501523971557617\n",
      "13.png 30.22140884399414\n",
      "14.png 23.95537567138672\n",
      "15.png 24.105667114257812\n",
      "16.png 32.24790954589844\n",
      "17.png 25.844724655151367\n",
      "18.png 30.033214569091797\n",
      "19.png 28.835695266723633\n",
      "20.png 28.687002182006836\n",
      "21.png 26.226055145263672\n",
      "22.png 23.332096099853516\n",
      "23.png 27.897628784179688\n",
      "24.png 23.60175132751465\n",
      "25.png 28.974645614624023\n",
      "26.png 28.65495491027832\n",
      "27.png 27.02411460876465\n",
      "28.png 24.171855926513672\n",
      "29.png 25.963459014892578\n",
      "30.png 32.19327163696289\n",
      "31.png 33.12209701538086\n",
      "32.png 28.480552673339844\n",
      "33.png 33.41618347167969\n",
      "34.png 28.654468536376953\n",
      "35.png 29.016210556030273\n",
      "36.png 31.12371253967285\n",
      "37.png 28.39124298095703\n",
      "38.png 29.96236801147461\n",
      "39.png 23.561294555664062\n",
      "Validation PSNR:  28.19576907157898\n",
      "[4951/6000] Iteration: 198010 | Loss: 0.0002 | PSNR: 36.8955 | lr: 0.00010000 | Time: 28.34s\n",
      "[4951/6000] Iteration: 198020 | Loss: 0.0021 | PSNR: 26.8732 | lr: 0.00010000 | Time: 8.71s\n",
      "[4951/6000] Iteration: 198030 | Loss: 0.0004 | PSNR: 33.8803 | lr: 0.00010000 | Time: 8.76s\n",
      "[4951/6000] Iteration: 198040 | Loss: 0.0007 | PSNR: 31.3098 | lr: 0.00010000 | Time: 8.75s\n",
      "[4952/6000] Iteration: 198050 | Loss: 0.0003 | PSNR: 34.7128 | lr: 0.00010000 | Time: 8.73s\n",
      "[4952/6000] Iteration: 198060 | Loss: 0.0003 | PSNR: 35.0691 | lr: 0.00010000 | Time: 8.72s\n",
      "[4952/6000] Iteration: 198070 | Loss: 0.0003 | PSNR: 35.1034 | lr: 0.00010000 | Time: 8.73s\n",
      "[4952/6000] Iteration: 198080 | Loss: 0.0005 | PSNR: 32.6332 | lr: 0.00010000 | Time: 8.71s\n",
      "[4953/6000] Iteration: 198090 | Loss: 0.0004 | PSNR: 33.6183 | lr: 0.00010000 | Time: 8.70s\n",
      "[4953/6000] Iteration: 198100 | Loss: 0.0003 | PSNR: 34.5731 | lr: 0.00010000 | Time: 8.75s\n",
      "[4953/6000] Iteration: 198110 | Loss: 0.0005 | PSNR: 33.0945 | lr: 0.00010000 | Time: 8.74s\n",
      "[4953/6000] Iteration: 198120 | Loss: 0.0004 | PSNR: 34.3442 | lr: 0.00010000 | Time: 8.79s\n",
      "[4954/6000] Iteration: 198130 | Loss: 0.0004 | PSNR: 34.0143 | lr: 0.00010000 | Time: 8.67s\n",
      "[4954/6000] Iteration: 198140 | Loss: 0.0005 | PSNR: 33.4229 | lr: 0.00010000 | Time: 8.75s\n",
      "[4954/6000] Iteration: 198150 | Loss: 0.0003 | PSNR: 35.2102 | lr: 0.00010000 | Time: 8.71s\n",
      "[4954/6000] Iteration: 198160 | Loss: 0.0003 | PSNR: 35.9331 | lr: 0.00010000 | Time: 8.70s\n",
      "[4955/6000] Iteration: 198170 | Loss: 0.0003 | PSNR: 34.7887 | lr: 0.00010000 | Time: 8.69s\n",
      "[4955/6000] Iteration: 198180 | Loss: 0.0005 | PSNR: 33.0518 | lr: 0.00010000 | Time: 8.75s\n",
      "[4955/6000] Iteration: 198190 | Loss: 0.0002 | PSNR: 36.0512 | lr: 0.00010000 | Time: 8.71s\n",
      "[4955/6000] Iteration: 198200 | Loss: 0.0003 | PSNR: 34.7107 | lr: 0.00010000 | Time: 8.66s\n",
      "[4956/6000] Iteration: 198210 | Loss: 0.0003 | PSNR: 34.6235 | lr: 0.00010000 | Time: 8.75s\n",
      "[4956/6000] Iteration: 198220 | Loss: 0.0003 | PSNR: 35.0619 | lr: 0.00010000 | Time: 8.74s\n",
      "[4956/6000] Iteration: 198230 | Loss: 0.0002 | PSNR: 36.9994 | lr: 0.00010000 | Time: 8.78s\n",
      "[4956/6000] Iteration: 198240 | Loss: 0.0003 | PSNR: 34.7343 | lr: 0.00010000 | Time: 8.76s\n",
      "[4957/6000] Iteration: 198250 | Loss: 0.0004 | PSNR: 33.9046 | lr: 0.00010000 | Time: 8.72s\n",
      "[4957/6000] Iteration: 198260 | Loss: 0.0001 | PSNR: 38.3131 | lr: 0.00010000 | Time: 8.84s\n",
      "[4957/6000] Iteration: 198270 | Loss: 0.0003 | PSNR: 35.1967 | lr: 0.00010000 | Time: 8.72s\n",
      "[4957/6000] Iteration: 198280 | Loss: 0.0003 | PSNR: 35.8452 | lr: 0.00010000 | Time: 8.68s\n",
      "[4958/6000] Iteration: 198290 | Loss: 0.0004 | PSNR: 34.5360 | lr: 0.00010000 | Time: 8.74s\n",
      "[4958/6000] Iteration: 198300 | Loss: 0.0005 | PSNR: 33.2962 | lr: 0.00010000 | Time: 8.77s\n",
      "[4958/6000] Iteration: 198310 | Loss: 0.0004 | PSNR: 34.4348 | lr: 0.00010000 | Time: 8.71s\n",
      "[4958/6000] Iteration: 198320 | Loss: 0.0003 | PSNR: 35.1153 | lr: 0.00010000 | Time: 8.73s\n",
      "[4959/6000] Iteration: 198330 | Loss: 0.0004 | PSNR: 33.7853 | lr: 0.00010000 | Time: 8.73s\n",
      "[4959/6000] Iteration: 198340 | Loss: 0.0002 | PSNR: 37.2603 | lr: 0.00010000 | Time: 8.70s\n",
      "[4959/6000] Iteration: 198350 | Loss: 0.0004 | PSNR: 33.8162 | lr: 0.00010000 | Time: 8.74s\n",
      "[4959/6000] Iteration: 198360 | Loss: 0.0002 | PSNR: 36.7336 | lr: 0.00010000 | Time: 8.70s\n",
      "[4960/6000] Iteration: 198370 | Loss: 0.0003 | PSNR: 34.6585 | lr: 0.00010000 | Time: 8.73s\n",
      "[4960/6000] Iteration: 198380 | Loss: 0.0004 | PSNR: 34.0925 | lr: 0.00010000 | Time: 8.69s\n",
      "[4960/6000] Iteration: 198390 | Loss: 0.0003 | PSNR: 35.5838 | lr: 0.00010000 | Time: 8.77s\n",
      "[4960/6000] Iteration: 198400 | Loss: 0.0004 | PSNR: 34.2945 | lr: 0.00010000 | Time: 8.72s\n",
      "[4961/6000] Iteration: 198410 | Loss: 0.0005 | PSNR: 32.8012 | lr: 0.00010000 | Time: 8.69s\n",
      "[4961/6000] Iteration: 198420 | Loss: 0.0002 | PSNR: 36.6707 | lr: 0.00010000 | Time: 8.72s\n",
      "[4961/6000] Iteration: 198430 | Loss: 0.0003 | PSNR: 35.6047 | lr: 0.00010000 | Time: 8.73s\n",
      "[4961/6000] Iteration: 198440 | Loss: 0.0003 | PSNR: 34.5655 | lr: 0.00010000 | Time: 8.72s\n",
      "[4962/6000] Iteration: 198450 | Loss: 0.0005 | PSNR: 32.7209 | lr: 0.00010000 | Time: 8.68s\n",
      "[4962/6000] Iteration: 198460 | Loss: 0.0002 | PSNR: 36.7046 | lr: 0.00010000 | Time: 8.78s\n",
      "[4962/6000] Iteration: 198470 | Loss: 0.0006 | PSNR: 32.1302 | lr: 0.00010000 | Time: 8.76s\n",
      "[4962/6000] Iteration: 198480 | Loss: 0.0004 | PSNR: 34.1678 | lr: 0.00010000 | Time: 8.73s\n",
      "[4963/6000] Iteration: 198490 | Loss: 0.0003 | PSNR: 35.4406 | lr: 0.00010000 | Time: 8.72s\n",
      "[4963/6000] Iteration: 198500 | Loss: 0.0004 | PSNR: 34.3466 | lr: 0.00010000 | Time: 8.78s\n",
      "[4963/6000] Iteration: 198510 | Loss: 0.0004 | PSNR: 34.3252 | lr: 0.00010000 | Time: 8.80s\n",
      "[4963/6000] Iteration: 198520 | Loss: 0.0002 | PSNR: 37.5233 | lr: 0.00010000 | Time: 8.70s\n",
      "[4964/6000] Iteration: 198530 | Loss: 0.0004 | PSNR: 34.1127 | lr: 0.00010000 | Time: 8.71s\n",
      "[4964/6000] Iteration: 198540 | Loss: 0.0003 | PSNR: 35.0030 | lr: 0.00010000 | Time: 8.74s\n",
      "[4964/6000] Iteration: 198550 | Loss: 0.0003 | PSNR: 35.8766 | lr: 0.00010000 | Time: 8.75s\n",
      "[4964/6000] Iteration: 198560 | Loss: 0.0003 | PSNR: 35.6682 | lr: 0.00010000 | Time: 8.71s\n",
      "[4965/6000] Iteration: 198570 | Loss: 0.0003 | PSNR: 35.2168 | lr: 0.00010000 | Time: 8.75s\n",
      "[4965/6000] Iteration: 198580 | Loss: 0.0004 | PSNR: 34.4558 | lr: 0.00010000 | Time: 8.66s\n",
      "[4965/6000] Iteration: 198590 | Loss: 0.0006 | PSNR: 32.2966 | lr: 0.00010000 | Time: 8.71s\n",
      "[4965/6000] Iteration: 198600 | Loss: 0.0003 | PSNR: 35.2448 | lr: 0.00010000 | Time: 8.77s\n",
      "0.png 27.75339126586914\n",
      "1.png 29.853914260864258\n",
      "2.png 31.34933090209961\n",
      "3.png 30.509309768676758\n",
      "4.png 32.4323616027832\n",
      "5.png 31.00205421447754\n",
      "6.png 26.24932861328125\n",
      "7.png 33.0302848815918\n",
      "8.png 21.912405014038086\n",
      "9.png 29.431228637695312\n",
      "10.png 29.799928665161133\n",
      "11.png 29.00766372680664\n",
      "12.png 26.9223690032959\n",
      "13.png 24.321353912353516\n",
      "14.png 23.60540199279785\n",
      "15.png 28.305984497070312\n",
      "16.png 32.28620147705078\n",
      "17.png 27.151765823364258\n",
      "18.png 30.154720306396484\n",
      "19.png 29.67858123779297\n",
      "20.png 27.132265090942383\n",
      "21.png 26.908485412597656\n",
      "22.png 24.476261138916016\n",
      "23.png 28.561382293701172\n",
      "24.png 28.22085952758789\n",
      "25.png 28.767127990722656\n",
      "26.png 35.06704330444336\n",
      "27.png 28.87272834777832\n",
      "28.png 25.887432098388672\n",
      "29.png 26.170917510986328\n",
      "30.png 30.949705123901367\n",
      "31.png 33.464019775390625\n",
      "32.png 28.777603149414062\n",
      "33.png 34.61516571044922\n",
      "34.png 31.865137100219727\n",
      "35.png 31.01764678955078\n",
      "36.png 31.838743209838867\n",
      "37.png 29.150615692138672\n",
      "38.png 29.198686599731445\n",
      "39.png 27.423784255981445\n",
      "Validation PSNR:  29.078079748153687\n",
      "[4966/6000] Iteration: 198610 | Loss: 0.0003 | PSNR: 35.5704 | lr: 0.00010000 | Time: 28.40s\n",
      "[4966/6000] Iteration: 198620 | Loss: 0.0006 | PSNR: 32.2263 | lr: 0.00010000 | Time: 8.75s\n",
      "[4966/6000] Iteration: 198630 | Loss: 0.0003 | PSNR: 35.2081 | lr: 0.00010000 | Time: 8.67s\n",
      "[4966/6000] Iteration: 198640 | Loss: 0.0006 | PSNR: 32.2420 | lr: 0.00010000 | Time: 8.68s\n",
      "[4967/6000] Iteration: 198650 | Loss: 0.0003 | PSNR: 35.1102 | lr: 0.00010000 | Time: 8.80s\n",
      "[4967/6000] Iteration: 198660 | Loss: 0.0004 | PSNR: 33.6152 | lr: 0.00010000 | Time: 8.69s\n",
      "[4967/6000] Iteration: 198670 | Loss: 0.0003 | PSNR: 34.7805 | lr: 0.00010000 | Time: 8.68s\n",
      "[4967/6000] Iteration: 198680 | Loss: 0.0004 | PSNR: 34.0390 | lr: 0.00010000 | Time: 8.71s\n",
      "[4968/6000] Iteration: 198690 | Loss: 0.0003 | PSNR: 36.0054 | lr: 0.00010000 | Time: 8.78s\n",
      "[4968/6000] Iteration: 198700 | Loss: 0.0003 | PSNR: 35.7599 | lr: 0.00010000 | Time: 8.75s\n",
      "[4968/6000] Iteration: 198710 | Loss: 0.0003 | PSNR: 35.8022 | lr: 0.00010000 | Time: 8.74s\n",
      "[4968/6000] Iteration: 198720 | Loss: 0.0003 | PSNR: 35.1294 | lr: 0.00010000 | Time: 8.74s\n",
      "[4969/6000] Iteration: 198730 | Loss: 0.0005 | PSNR: 33.3407 | lr: 0.00010000 | Time: 8.75s\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mtrain_main\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[8], line 191\u001b[0m, in \u001b[0;36mtrain_main\u001b[0;34m(params, first_time)\u001b[0m\n\u001b[1;32m    188\u001b[0m     device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    189\u001b[0m model\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[0;32m--> 191\u001b[0m \u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_loader\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalid_loader\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mprev_epochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[8], line 94\u001b[0m, in \u001b[0;36mtrain\u001b[0;34m(params, train_loader, valid_loader, model, ep, device)\u001b[0m\n\u001b[1;32m     91\u001b[0m loss \u001b[38;5;241m=\u001b[39m criterion(output, target)\n\u001b[1;32m     93\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 94\u001b[0m \u001b[43mloss\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     95\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     96\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m params[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaterial_mask\u001b[39m\u001b[38;5;124m'\u001b[39m]:\n",
      "File \u001b[0;32m~/anaconda3/envs/rohanpv21/lib/python3.9/site-packages/torch/tensor.py:245\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    237\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    238\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    239\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    243\u001b[0m         create_graph\u001b[38;5;241m=\u001b[39mcreate_graph,\n\u001b[1;32m    244\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs)\n\u001b[0;32m--> 245\u001b[0m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautograd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgradient\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minputs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/envs/rohanpv21/lib/python3.9/site-packages/torch/autograd/__init__.py:145\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m retain_graph \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    143\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[0;32m--> 145\u001b[0m \u001b[43mVariable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execution_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    146\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrad_tensors_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    147\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_unreachable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "train_main(params, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test(params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating ssim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage import io, img_as_float\n",
    "from skimage.metrics import structural_similarity as ssim\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Function to load images from two directories and calculate SSIM for each pair\n",
    "def load_and_calculate_ssim(dir1, dir2):\n",
    "    ssim_values = []\n",
    "#     E_values = []\n",
    "\n",
    "    # Get sorted list of image filenames from both directories\n",
    "    files1 = sorted([f for f in os.listdir(dir1) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tif'))])\n",
    "    files2 = sorted([f for f in os.listdir(dir2) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tif'))])\n",
    "\n",
    "    # Ensure both directories have the same number of images\n",
    "    if len(files1) != len(files2):\n",
    "        print(len(files1))\n",
    "        print(len(files2))\n",
    "        print(\"The number of images in both directories must be the same.\")\n",
    "        return\n",
    "\n",
    "    # Loop through the files and calculate SSIM for each pair\n",
    "    for file1, file2 in zip(files1, files2):\n",
    "        # Load images from both directories\n",
    "        image1_path = os.path.join(dir1, file1)\n",
    "        image2_path = os.path.join(dir2, file2)\n",
    "        image1 = cv2.imread(image1_path)\n",
    "        image2 = cv2.imread(image2_path)\n",
    "\n",
    "        if image1 is not None and image2 is not None:\n",
    "            # Calculate SSIM for the current pair of images\n",
    "            ssim_value = calculate_ssim(image1, image2)\n",
    "#             E_value = calculate_delta_e_tiff(image1_path, image2_path)\n",
    "#             print(ssim_value)\n",
    "            ssim_values.append(ssim_value)\n",
    "#             E_values.append(E_value)\n",
    "        else:\n",
    "            print(f\"Error loading images {file1} or {file2}\")\n",
    "    \n",
    "    return ssim_values\n",
    "\n",
    "# Example usage\n",
    "dir1 = '/kaggle/working/outputs_jdm'  # Replace with your directory path\n",
    "dir2 = '/kaggle/input/mobile-spec/Mobile-Spec/eval/target'  # Replace with your directory path\n",
    "\n",
    "ssim_results = load_and_calculate_ssim(dir1, dir2)\n",
    "# print(ssim_results)\n",
    "# Print SSIM results\n",
    "ssim = np.mean(ssim_results)\n",
    "print(f'SSIM : {ssim}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyNpvGrtUTe5AwuRga7+ODnJ",
   "mount_file_id": "157nuVYQ2XQkOgKN6VrUmo_WJsc6K0h0Z",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5892023,
     "sourceId": 9647424,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 143486,
     "modelInstanceId": 120270,
     "sourceId": 141972,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 144617,
     "modelInstanceId": 121472,
     "sourceId": 143373,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 144620,
     "modelInstanceId": 121475,
     "sourceId": 143376,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
